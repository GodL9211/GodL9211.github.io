<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>细水流深的博客</title>
    <link>https://godl9211.github.io/</link>
    <description>Recent content on 细水流深的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 11 Jan 2023 11:29:33 +0800</lastBuildDate><atom:link href="https://godl9211.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序</title>
      <link>https://godl9211.github.io/posts/20-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 11 Jan 2023 11:29:33 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/20-%E6%8E%92%E5%BA%8F/</guid>
      <description>排序 OrderingFilter类支持简单的查询参数控制结果排序 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class GameView(CustomModelViewSet): queryset = Game.objects.all() serializer_class = GameSerializer filter_backends = (DjangoFilterBackend, filters.SearchFilter,filters.OrderingFilter) # 过滤 # filter_fields = (&amp;#39;name&amp;#39;,</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://godl9211.github.io/posts/19-%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 11 Jan 2023 11:29:23 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/19-%E6%90%9C%E7%B4%A2/</guid>
      <description>搜索 SearchFilter可以搜索我们设置的参数 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from .custom_model_view_set import CustomModelViewSet from django_filters.rest_framework import DjangoFilterBackend from .custom_filter import GameFilter from rest_framework import filters class GameView(CustomModelViewSet): queryset = Game.objects.all() serializer_class = GameSerializer filter_backends</description>
    </item>
    
    <item>
      <title>过滤</title>
      <link>https://godl9211.github.io/posts/18-%E8%BF%87%E6%BB%A4/</link>
      <pubDate>Wed, 11 Jan 2023 11:29:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/18-%E8%BF%87%E6%BB%A4/</guid>
      <description>过滤 一、利用get_queryset过滤 1 2 3 4 5 6 7 8 9 10 11 12 from .custom_model_view_set import CustomModelViewSet class GameView(CustomModelViewSet): queryset = Game.objects.all() serializer_class = GameSerializer def get_queryset(self): ordering = self.request.query_params.get(&amp;#39;ordering&amp;#39;) if not ordering: queryset = Game.objects.all() else: queryset = Game.objects.all().order_by(ordering) return queryset http://127.0.0.1:8000/api/v1/games/?ordering=-id 二、django</description>
    </item>
    
    <item>
      <title>自定义响应</title>
      <link>https://godl9211.github.io/posts/17-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94/</link>
      <pubDate>Wed, 11 Jan 2023 11:28:54 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/17-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94/</guid>
      <description>自定义返回响应 目前我们返回的数据样式是这样 1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;next&amp;#34;: &amp;#34;http://127.0.0.1:8000/api/v1/games/?cursor=cD0x&amp;#34;, &amp;#34;previous&amp;#34;: null, &amp;#34;results&amp;#34;: [ { &amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;老马&amp;#34;, &amp;#34;status&amp;#34;: 0 } ] } 或 1 2 3 4 5 { &amp;#34;id&amp;#34;: 1,</description>
    </item>
    
    <item>
      <title>自定义异常</title>
      <link>https://godl9211.github.io/posts/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 11 Jan 2023 11:28:53 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</guid>
      <description>自定义异常 目前我们返回的一些异常信息，长这个样子 1 2 3 { &amp;#34;detail&amp;#34;: &amp;#34;Authentication credentials were not provided.&amp;#34; } 这样结构，对于移动端程序员是极其不友好的，所以我们一般给对方返回这样的</description>
    </item>
    
    <item>
      <title>API文档</title>
      <link>https://godl9211.github.io/posts/15-API%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 11 Jan 2023 11:28:33 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/15-API%E6%96%87%E6%A1%A3/</guid>
      <description>API文档 DRF给我提供了自动生成API文档的功能，大大省去了写开发文档的时间。 pip install coreapi 路由 from rest_framework.documentation import include_docs_urls path(&amp;#39;docs/&amp;#39;, include_docs_urls(ti</description>
    </item>
    
    <item>
      <title>视图集</title>
      <link>https://godl9211.github.io/posts/14-%E8%A7%86%E5%9B%BE%E9%9B%86%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8/</link>
      <pubDate>Wed, 11 Jan 2023 11:28:23 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/14-%E8%A7%86%E5%9B%BE%E9%9B%86%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8/</guid>
      <description>视图集 我们在前面已经用了类视图，DRF给我了提供了更加抽象的封装，叫做ModelViewSet。 视图 class GameView(ModelViewSet): queryset = Game.objects.all() serializer_class = GameSerializer 路由 game_list = views.GameView.as_view({ &amp;#39;get&amp;#39;: &amp;#39;list&amp;#39;, &amp;#39;post&amp;#39;: &amp;#39;create&amp;#39; }) game_detail =</description>
    </item>
    
    <item>
      <title>解析器</title>
      <link>https://godl9211.github.io/posts/13-%E8%A7%A3%E6%9E%90%E5%99%A8/</link>
      <pubDate>Wed, 11 Jan 2023 11:28:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/13-%E8%A7%A3%E6%9E%90%E5%99%A8/</guid>
      <description>解析器 对请求的数据进行解析：是针对请求体进行解析的。表示服务器可以解析的数据格式的种类 #如果是这样的格式发送的数据，在POST里面有值 Content-Type: application/url-encoding..... request.body</description>
    </item>
    
    <item>
      <title>分页</title>
      <link>https://godl9211.github.io/posts/12-%E5%88%86%E9%A1%B5/</link>
      <pubDate>Wed, 11 Jan 2023 11:26:33 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/12-%E5%88%86%E9%A1%B5/</guid>
      <description>分页 当对于数据量大的时候，我们就需要采用分页操作。 方式 普通分页，看第n页，每页显示m条数据； 切割分页，在n个位置，向后查看m条数据； 加密分页</description>
    </item>
    
    <item>
      <title>版本控制</title>
      <link>https://godl9211.github.io/posts/11-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 11 Jan 2023 11:26:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/11-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid>
      <description>版本控制 API 版本控制允许我们在不同的客户端之间更改行为（同一个接口的不同版本会返回不同的数据）。 DRF提供了许多不同的版本控制方案。 可能会有一</description>
    </item>
    
    <item>
      <title>限制频率</title>
      <link>https://godl9211.github.io/posts/10-%E9%99%90%E5%88%B6%E9%A2%91%E7%8E%87/</link>
      <pubDate>Wed, 11 Jan 2023 11:25:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/10-%E9%99%90%E5%88%B6%E9%A2%91%E7%8E%87/</guid>
      <description>限制频率 开放平台的API接口调用需要限制其频率，以节约服务器资源和避免恶意的频繁调用。 内置频率类 在应用下新建一个mythrottle类。如下</description>
    </item>
    
    <item>
      <title>Django RESTFUL提供的认证</title>
      <link>https://godl9211.github.io/posts/09-%E4%BD%BF%E7%94%A8jwt%E8%BF%9B%E8%A1%8C%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Wed, 11 Jan 2023 11:24:43 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/09-%E4%BD%BF%E7%94%A8jwt%E8%BF%9B%E8%A1%8C%E8%AE%A4%E8%AF%81/</guid>
      <description>Django RESTFUL提供的认证 BasicAuthentication：此身份验证方案使用HTTP基本身份验证，根据用户的用户名和密码进行签名。基</description>
    </item>
    
    <item>
      <title>认证和权限</title>
      <link>https://godl9211.github.io/posts/08-%E8%AE%A4%E8%AF%81%E5%92%8C%E6%9D%83%E9%99%90/</link>
      <pubDate>Wed, 11 Jan 2023 11:24:33 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/08-%E8%AE%A4%E8%AF%81%E5%92%8C%E6%9D%83%E9%99%90/</guid>
      <description>认证和权限 现在我们写的接口，会发现一个问题，就是任何人都可以创建数据，都可以修改数据。这样肯定是不行的，我们希望只有数据的创建者才能有权限修</description>
    </item>
    
    <item>
      <title>类视图</title>
      <link>https://godl9211.github.io/posts/07-%E7%B1%BB%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Wed, 11 Jan 2023 11:24:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/07-%E7%B1%BB%E8%A7%86%E5%9B%BE/</guid>
      <description>类视图 使用类视图最大的好处就是可以创建复用的行为。我们在上一节，已经用了简单的类视图。 mixins 我们常用的操作比如创建、更新、删除、查找。REST框</description>
    </item>
    
    <item>
      <title>请求与响应</title>
      <link>https://godl9211.github.io/posts/06-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</link>
      <pubDate>Wed, 11 Jan 2023 11:23:33 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/06-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</guid>
      <description>请求 REST里面有个HttpRequest特别相似的对象叫request，主要获取前端传递过来的数据，获取数据的方法就是request.da</description>
    </item>
    
    <item>
      <title>序列化验证</title>
      <link>https://godl9211.github.io/posts/05-%E5%BA%8F%E5%88%97%E5%8C%96%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Wed, 11 Jan 2023 11:23:15 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/05-%E5%BA%8F%E5%88%97%E5%8C%96%E9%AA%8C%E8%AF%81/</guid>
      <description>序列化验证 一般前后端分离的时候，我们都会校验前端的参数时候合法。如果我们ModelSerializer话，因为它本身已经帮我们写好creat</description>
    </item>
    
    <item>
      <title>序列化高级</title>
      <link>https://godl9211.github.io/posts/04-%E5%BA%8F%E5%88%97%E5%8C%96%E9%AB%98%E7%BA%A7/</link>
      <pubDate>Wed, 11 Jan 2023 11:23:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/04-%E5%BA%8F%E5%88%97%E5%8C%96%E9%AB%98%E7%BA%A7/</guid>
      <description>模型类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from django.db import models # Create your models here. class Category(models.Model): name = models.CharField(verbose_name=&amp;#39</description>
    </item>
    
    <item>
      <title>序列化</title>
      <link>https://godl9211.github.io/posts/03-%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Wed, 11 Jan 2023 11:22:22 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/03-%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>模型类 创建模型类 from django.db import models # Create your models here. class Article(models.Model): title = models.CharField(verbose_name=&amp;#39;标题&amp;#39;, max_length=100) vum = mod</description>
    </item>
    
    <item>
      <title>Django REST framework</title>
      <link>https://godl9211.github.io/posts/02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 11 Jan 2023 11:22:19 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>Django REST framework Django REST framework框架是一个用于构建Web API的强大而又灵活的工具. 通常简称为DRF框架 或 REST framework框架. 特点 提供了定</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://godl9211.github.io/posts/01-RESTful-API/</link>
      <pubDate>Tue, 10 Jan 2023 19:22:16 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/01-RESTful-API/</guid>
      <description>RESTful API设计规范 域名 应该尽量将API部署在专用域名之下 https://api.example.com 如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。 https://example.com/api/ 版本 应该将API的版</description>
    </item>
    
    <item>
      <title>前后端分离</title>
      <link>https://godl9211.github.io/posts/00-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</link>
      <pubDate>Tue, 10 Jan 2023 19:22:13 +0800</pubDate>
      
      <guid>https://godl9211.github.io/posts/00-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</guid>
      <description>开发模式 在Web开发模式中，有两种开发模式 前后端不分离 前后端分离 前后端分离优势 在前后端不分离模式中，前端页面看到的效果都是由后端控制，由后端</description>
    </item>
    
  </channel>
</rss>
