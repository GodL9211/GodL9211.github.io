import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c,a as n,b as e,e as a,f as t}from"./app-9976b6d0.js";const p={},l=t('<h1 id="rest-framework专栏讲解-二十-内容协商" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-二十-内容协商" aria-hidden="true">#</a> Rest-framework专栏讲解(二十)：内容协商</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">内容协商</a><ul><li><a href="#%E7%A1%AE%E5%AE%9A%E6%8E%A5%E5%8F%97%E7%9A%84%E6%B8%B2%E6%9F%93%E5%99%A8">确定接受的渲染器</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">自定义内容协商</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">设置内容协商</a></li></ul></li></ul><hr>',4),d={href:"http://www.django-rest-framework.org/api-guide/content-negotiation/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},u={id:"内容协商",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#内容协商","aria-hidden":"true"},"#",-1),_={href:"http://drf.jiuyou.info/#/drf/content-negotiation?id=%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86",title:"内容协商",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"内容协商是基于客户端或服务器偏好选择多种可能的表示之一以返回客户端的过程。",-1),E={id:"确定接受的渲染器",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#确定接受的渲染器","aria-hidden":"true"},"#",-1),f={href:"http://drf.jiuyou.info/#/drf/content-negotiation?id=%E7%A1%AE%E5%AE%9A%E6%8E%A5%E5%8F%97%E7%9A%84%E6%B8%B2%E6%9F%93%E5%99%A8",title:"确定接受的渲染器",target:"_blank",rel:"noopener noreferrer"},v=t("<p>REST framework 根据可用的渲染器，每个渲染器的优先级以及客户端的 <code>Accept:</code> header，使用简单的内容协商风格来确定应将哪些媒体类型返回给客户端。所使用的风格部分由客户端驱动，部分由服务器驱动。</p><ol><li>更具体的媒体类型优先于较不特定的媒体类型。</li><li>如果多种媒体类型具有相同的特性，则优先根据为给定视图配置的渲染器排序。</li></ol><p>例如，给出以下 <code>Accept</code> header:</p><p>application/json; indent=4, application/json, application/yaml, text/html, <em>/</em></p><p>每种给定媒体类型的优先级为：</p><ul><li><code>application/json; indent=4</code></li><li><code>application/json</code>, <code>application/yaml</code> 和 <code>text/html</code></li><li><code>*/*</code></li></ul><p>如果所请求的视图仅用 <code>YAML</code> 和 <code>HTML</code> 的渲染器配置，则 REST framework 将选择 <code>renderer_classes</code> 列表或 <code>DEFAULT_RENDERER_CLASSES</code> 设置中首先列出的渲染器。</p><blockquote><p><strong>注意</strong>: 确定偏好时，REST framework 不会考虑 &quot;q&quot; 值。使用 &quot;q&quot; 值会对缓存产生负面影响，作者认为这是对内容协商的一种不必要和过于复杂的方法。</p></blockquote>",8),b=n("code",null,"HTTP Accept",-1),g={href:"https://link.juejin.cn/?target=https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html",title:"RFC 2616",target:"_blank",rel:"noopener noreferrer"},A={id:"自定义内容协商",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#自定义内容协商","aria-hidden":"true"},"#",-1),q={href:"http://drf.jiuyou.info/#/drf/content-negotiation?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86",title:"自定义内容协商",target:"_blank",rel:"noopener noreferrer"},y=t("<p>你不太可能希望为 REST framework 提供自定义内容协商方案，但如果需要，你可以这样做。要实现自定义内容协商方案，请覆盖 <code>BaseContentNegotiation</code>。</p><p>REST framework 的内容协商类处理选择适当的请求解析器和适当的响应渲染器，因此你应该实现 <code>.select_parser(request, parsers)</code> 和 <code>.select_renderer(request, renderers, format_suffix)</code> 方法。</p><p><code>select_parser()</code> 方法应从可用解析器列表中返回一个解析器实例，如果没有任何解析器可以处理传入请求，则返回 <code>None</code>。</p><p><code>select_renderer()</code> 方法应该返回（渲染器实例，媒体类型）的二元组，或引发 <code>NotAcceptable</code> 异常。</p>",4),B={id:"举个栗子",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),x={href:"http://drf.jiuyou.info/#/drf/content-negotiation?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>以下是自定义内容协商类，它在选择适当的解析器或渲染器时会忽略客户端请求。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>negotiation <span class="token keyword">import</span> BaseContentNegotiation

<span class="token keyword">class</span> <span class="token class-name">IgnoreClientContentNegotiation</span><span class="token punctuation">(</span>BaseContentNegotiation<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">select_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> parsers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Select the first parser in the \`.parser_classes\` list.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> parsers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">select_renderer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> renderers<span class="token punctuation">,</span> format_suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Select the first renderer in the \`.renderer_classes\` list.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>renderers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> renderers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>media_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T={id:"设置内容协商",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#设置内容协商","aria-hidden":"true"},"#",-1),F={href:"http://drf.jiuyou.info/#/drf/content-negotiation?id=%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86",title:"设置内容协商",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>默认内容协商类可以使用 <code>DEFAULT_CONTENT_NEGOTIATION_CLASS</code> setting 全局设置。例如，以下设置将使用我们的示例 <code>IgnoreClientContentNegotiation</code> 类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_CONTENT_NEGOTIATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;myapp.negotiation.IgnoreClientContentNegotiation&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 <code>API​​View</code> 基于类的视图设置用于单个视图或视图集的内容协商：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>negotiation <span class="token keyword">import</span> IgnoreClientContentNegotiation
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">NoNegotiationView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    An example view that does not perform content negotiation.
    &quot;&quot;&quot;</span>
    content_negotiation_class <span class="token operator">=</span> IgnoreClientContentNegotiation

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&#39;accepted media type&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>accepted_renderer<span class="token punctuation">.</span>media_type
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function D(I,j){const s=i("ExternalLinkIcon");return r(),c("div",null,[l,n("blockquote",null,[n("p",null,[n("a",d,[e("官方原文链接"),a(s)])])]),n("h1",u,[k,e(),n("a",_,[e("内容协商"),a(s)])]),h,n("h2",E,[m,e(),n("a",f,[e("确定接受的渲染器"),a(s)])]),v,n("blockquote",null,[n("p",null,[e("有关 "),b,e(" 标题的更多信息，请参见 "),n("a",g,[e("RFC 2616"),a(s)]),e("。")])]),n("h1",A,[w,e(),n("a",q,[e("自定义内容协商"),a(s)])]),y,n("h2",B,[N,e(),n("a",x,[e("举个栗子"),a(s)])]),C,n("h2",T,[R,e(),n("a",F,[e("设置内容协商"),a(s)])]),S])}const O=o(p,[["render",D],["__file","Rest-framework专栏讲解(二十)：内容协商.html.vue"]]);export{O as default};
