const e=JSON.parse('{"key":"v-746cffde","path":"/docs/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"消除if else神器-策略模式（经典设计模式）","lang":"zh-CN","frontmatter":{"title":"消除if else神器-策略模式（经典设计模式）","icon":"book","index":true,"article":false,"description":"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用，也是面试经常会问到的知识点。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。 我们生活中的策略场景：\\r买东西结账：可以使用现金支付、`微信支付、支付宝支付或者银行卡支付，这些交易方式就是不同的策略。 ; \\r登录APP：可以...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"消除if else神器-策略模式（经典设计模式）"}],["meta",{"property":"og:description","content":"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用，也是面试经常会问到的知识点。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。 我们生活中的策略场景：\\r买东西结账：可以使用现金支付、`微信支付、支付宝支付或者银行卡支付，这些交易方式就是不同的策略。 ; \\r登录APP：可以..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:41:54.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"消除if else神器-策略模式（经典设计模式）"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:41:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"消除if else神器-策略模式（经典设计模式）\\",\\"description\\":\\"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用，也是面试经常会问到的知识点。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。 我们生活中的策略场景：\\\\r买东西结账：可以使用现金支付、`微信支付、支付宝支付或者银行卡支付，这些交易方式就是不同的策略。 ; \\\\r登录APP：可以...\\"}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]}]},{"level":2,"title":"策略的定义","slug":"策略的定义","link":"#策略的定义","children":[{"level":3,"title":"登录策略","slug":"登录策略","link":"#登录策略","children":[]}]},{"level":2,"title":"策略的创建","slug":"策略的创建","link":"#策略的创建","children":[]},{"level":2,"title":"策略的使用","slug":"策略的使用","link":"#策略的使用","children":[]},{"level":2,"title":"如何利用策略模式避免分支判断","slug":"如何利用策略模式避免分支判断","link":"#如何利用策略模式避免分支判断","children":[{"level":3,"title":"查表法","slug":"查表法","link":"#查表法","children":[]}]},{"level":2,"title":"常见策略场景","slug":"常见策略场景","link":"#常见策略场景","children":[{"level":3,"title":"超市做活动的场景","slug":"超市做活动的场景","link":"#超市做活动的场景","children":[]},{"level":3,"title":"出行","slug":"出行","link":"#出行","children":[]}]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":2,"title":"策略模式优缺点","slug":"策略模式优缺点","link":"#策略模式优缺点","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1695120233000,"updatedTime":1721126514000,"contributors":[{"name":"lianhaifeng","email":"lianhaifeng@rongannetworks.com","commits":6}]},"readingTime":{"minutes":10.5,"words":3151},"filePathRelative":"docs/python/设计模式/策略模式.md","localizedDate":"2023年9月19日","excerpt":"","autoDesc":true}');export{e as data};
