import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,e,f as t}from"./app-967d79b2.js";const l={},u=t('<h1 id="rest-framework专栏讲解-八-viewset" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-八-viewset" aria-hidden="true">#</a> Rest-framework专栏讲解(八)：ViewSet</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li><li><a href="#%E8%A7%86%E5%9B%BE%E9%9B%86">视图集</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E8%A7%86%E5%9B%BE%E9%9B%86">操作视图集</a></li><li><a href="#%E6%A0%87%E8%AE%B0%E9%A2%9D%E5%A4%96%E7%9A%84%E8%B7%AF%E7%94%B1%E8%A1%8C%E4%B8%BA">标记额外的路由行为</a></li><li><a href="#action-%E8%B7%B3%E8%BD%AC">action 跳转</a></li></ul></li><li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#ViewSet-">ViewSet </a></li><li><a href="#GenericViewSet">GenericViewSet</a></li><li><a href="#ModelViewSet">ModelViewSet</a></li><li><a href="#ReadOnlyModelViewSet">ReadOnlyModelViewSet</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E9%9B%86%E5%9F%BA%E7%B1%BB">自定义视图集基类</a></li></ul><hr>',4),r={id:"点击跳转到-rest-framework-专栏目录",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#点击跳转到-rest-framework-专栏目录","aria-hidden":"true"},"#",-1),k={href:"https://juejin.cn/post/6844904185163415566",title:"点击跳转到 Rest-Framework 专栏目录",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.django-rest-framework.org/api-guide/viewsets/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},m={id:"视图集",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#视图集","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/viewsets?id=%E8%A7%86%E5%9B%BE%E9%9B%86",title:"视图集",target:"_blank",rel:"noopener noreferrer"},h=t("<blockquote><p>在路由决定了哪个控制器用于请求后，控制器负责理解请求并产生适当的输出。— <em>Ruby on Rails 文档</em></p></blockquote><p>Django REST framework 允许将一组相关视图的逻辑组合到一个称为 <code>ViewSet</code> 的类中。在其他框架中，您可能会发现概念上类似的实现，名为 “Resources” 或 “Controllers” 。</p><p><code>ViewSet</code> 类只是一种基于类的 View，它不提供任何处理方法，如 <code>.get()</code> 或 <code>.post()</code>，而是提供诸如 <code>.list()</code> 和 <code>.create()</code> 之类的操作。</p><p><code>ViewSet</code> 只在用 <code>.as_view()</code> 方法绑定到最终化视图时做一些相应操作。</p><p>通常，不是在 urlconf 中的视图集中明确注册视图，而是使用路由器类注册视图集，这会自动为您确定 urlconf。</p>",5),f={id:"举个栗子",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),y={href:"http://drf.jiuyou.info/#/drf/viewsets?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>定义一个简单的视图集，可以用来列出或检索系统中的所有用户。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404
<span class="token keyword">from</span> myapps<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response

<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        user <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要，可以将这个视图集合成两个单独的视图，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_list <span class="token operator">=</span> UserViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
user_detail <span class="token operator">=</span> UserViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;retrieve&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情况下，我们不会这样做，而是用路由器注册视图集，并允许自动生成 urlconf。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>views <span class="token keyword">import</span> UserViewSet
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter

router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">,</span> base_name<span class="token operator">=</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不用自己编写视图集，通常使用默认提供的现有基类。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    用于查看和编辑用户实例的视图。
    &quot;&quot;&quot;</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ViewSet</code> 类比使用 View 类有两个主要优点。</p><ul><li><code>重复的逻辑可以合并成一个类</code>。在上面的例子中，我们只需要指定一次查询集，它将在多个视图中使用。</li><li>通过<code>使用 routers</code>，我们不再需要处理自己的 URL 配置。</li></ul><p>这两者各有优缺点。使用常规视图和 URL 配置文件更加明确，并为您提供更多控制。如果想要更快速的开发出一个应用，或者需要使大型 API 的 URL 配置始终保持一致，视图集会非常有用。</p>`,11),q={id:"操作视图集",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#操作视图集","aria-hidden":"true"},"#",-1),S={href:"http://drf.jiuyou.info/#/drf/viewsets?id=%E6%93%8D%E4%BD%9C%E8%A7%86%E5%9B%BE%E9%9B%86",title:"操作视图集",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>REST framework 中包含的默认 routes 将为一组标准的 create / retrieve / update / destroy 风格 action 提供路由，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    这些方法将由路由器负责处理。

    如果要使用后缀，请确保加上 \`format = None\` 关键字参数
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">partial_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调度期间，当前 action 的名称可以通过 <code>.action</code> 属性获得。您可以检查 <code>.action</code> 以根据当前 action 调整行为。</p><p>例如，您可以将权限限制为只有 admin 才能访问 <code>list</code> 以外的其他 action，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_permissions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    实例化并返回此视图所需的权限列表。
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">:</span>
        permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdmin<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>permission<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> permission <span class="token keyword">in</span> permission_classes<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),V={id:"标记额外的路由行为",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#标记额外的路由行为","aria-hidden":"true"},"#",-1),x={href:"http://drf.jiuyou.info/#/drf/viewsets?id=%E6%A0%87%E8%AE%B0%E9%A2%9D%E5%A4%96%E7%9A%84%E8%B7%AF%E7%94%B1%E8%A1%8C%E4%B8%BA",title:"标记额外的路由行为",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>如果需要路由特定方法，则可以用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰器进行修饰。</p><p><code>@detail_route</code> 装饰器在其 URL 模式中包含 <code>pk</code>，用于支持需要获取单个实例的方法。<code>@list_route</code> 修饰器适用于在对象列表上操作的方法。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route<span class="token punctuation">,</span> list_route
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer<span class="token punctuation">,</span> PasswordSerializer

<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    提供标准操作的视图集
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer

    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> PasswordSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;password set&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span>
                            status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@list_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">recent_users</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        recent_users <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">&#39;-last_login&#39;</span><span class="token punctuation">)</span>

        page <span class="token operator">=</span> self<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>recent_users<span class="token punctuation">)</span>
        <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>page<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>recent_users<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，装饰器可以为路由视图设置额外的参数。例如...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些装饰器默认路由 <code>GET</code> 请求，但也可以使用 <code>methods</code> 参数接受其他 HTTP 方法。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">unset_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个新操作将在 urls <code>^users/{pk}/set_password/$</code> 和 <code>^users/{pk}/unset_password/$</code> 上。</p>`,9),z={id:"action-跳转",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#action-跳转","aria-hidden":"true"},"#",-1),j={href:"http://drf.jiuyou.info/#/drf/viewsets?id=action-%E8%B7%B3%E8%BD%AC",title:"action 跳转",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>如果你需要获取 action 的 URL ，请使用 <code>.reverse_action()</code> 方法。这是 <code>.reverse()</code> 的一个便捷包装，它会自动传递视图的请求对象，并将 <code>url_name</code> 与 <code>.basename</code> 属性挂接。</p><p>请注意，<code>basename</code> 是在 <code>ViewSet</code> 注册过程中由路由器提供的。如果您不使用路由器，则必须提供<code>.as_view()</code> 方法的 <code>basename</code> 参数。</p><p>使用上一节中的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> view<span class="token punctuation">.</span>reverse_action<span class="token punctuation">(</span><span class="token string">&#39;set-password&#39;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token string">&#39;http://localhost:8000/api/users/1/set_password&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>url_name</code> 参数应该与 <code>@list_route</code> 和 <code>@detail_route</code> 装饰器的相同参数匹配。另外，这可以用来反转默认 <code>list</code> 和 <code>detail</code> 路由。</p>`,5),I={id:"api-参考",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),P={href:"http://drf.jiuyou.info/#/drf/viewsets?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},D=t(`<h3 id="viewset" tabindex="-1"><a class="header-anchor" href="#viewset" aria-hidden="true">#</a> ViewSet </h3><p><code>ViewSet</code> 类继承自 <code>APIView</code>。您可以使用任何标准属性（如 <code>permission_classes</code>，<code>authentication_classes</code>）来控制视图上的 API 策略。</p><p><code>ViewSet</code> 类不提供任何 action 的实现。为了使用 <code>ViewSet</code> 类，必须继承该类并明确定义 action 实现。</p><p>在标准的接口中, 提供了标准的创建/检索/更新/删除实例对象的路由, 如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Example empty viewset demonstrating the standard
    actions that will be handled by a router class.

    If you&#39;re using format suffixes, make sure to also include
    the \`format=None\` keyword argument for each action.
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">partial_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 不常用</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在分发期间你可以使用以下属性：</p><ul><li><code>basename</code>：用于创建 URL 的基础名称</li><li><code>action</code>：当前操作的动作名称字符串(如 <code>list</code>)</li><li><code>detail</code>：是否返回列表/详情信息的布尔值</li><li><code>suffix</code>：视图集类型的显示后缀</li><li><code>name</code>：视图集的显示名称, 会与 <code>suffix</code> 参数互斥</li><li><code>description</code>：单个试图的显示描述</li></ul>`,7),G={id:"genericviewset",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#genericviewset","aria-hidden":"true"},"#",-1),F={href:"http://drf.jiuyou.info/#/drf/viewsets?id=genericviewset",title:"GenericViewSet",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[n("code",null,"GenericViewSet"),s(" 类继承自 "),n("code",null,"GenericAPIView"),s("，并提供默认的 "),n("code",null,"get_object"),s("，"),n("code",null,"get_queryset"),s(" 方法和其他通用视图基础行为，但默认情况下不包含任何操作。")],-1),O=n("p",null,[s("为了使用 "),n("code",null,"GenericViewSet"),s(" 类，必须继承该类并混合所需的 mixin 类，或明确定义操作实现。")],-1),L={id:"modelviewset",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#modelviewset","aria-hidden":"true"},"#",-1),$={href:"http://drf.jiuyou.info/#/drf/viewsets?id=modelviewset",title:"ModelViewSet",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p><code>ModelViewSet</code> 类继承自 <code>GenericAPIView</code>，并通过混合各种 mixin 类的行为来包含各种操作的实现。</p><p><code>ModelViewSet</code> 提供的操作有 <code>.list()</code> , <code>.retrieve()</code> , <code>.create()</code> , <code>.update()</code> , <code>.partial_update()</code>, 和 <code>.destroy()</code> 。</p><p>举个栗子：</p><p>由于 <code>ModelViewSet</code> 类继承自 <code>GenericAPIView</code>，因此通常需要提供至少 <code>queryset</code> 和 <code>serializer_class</code> 属性。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    用于查看和编辑 Account
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> AccountSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAccountAdminOrReadOnly<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，您可以覆盖 <code>GenericAPIView</code> 提供的任何标准属性或方法。例如，要动态确定它应该操作的查询集的<code>ViewSet</code>，可以这样做：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A simple ViewSet for viewing and editing the accounts
    associated with the user.
    &quot;&quot;&quot;</span>
    serializer_class <span class="token operator">=</span> AccountSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAccountAdminOrReadOnly<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但请注意，从 <code>ViewSet</code> 中删除 <code>queryset</code> 属性后，任何关联的 router 将无法自动导出模型的 <code>base_name</code>，因此您必须将 <code>base_name</code> kwarg 指定为 router 注册的一部分。</p><p>还要注意，虽然这个类默认提供了完整的 create / list / retrieve / update / destroy 操作集，但您可以通过使用标准权限类来限制可用操作。</p>`,9),J={id:"readonlymodelviewset",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#readonlymodelviewset","aria-hidden":"true"},"#",-1),W={href:"http://drf.jiuyou.info/#/drf/viewsets?id=readonlymodelviewset",title:"ReadOnlyModelViewSet",target:"_blank",rel:"noopener noreferrer"},X=t(`<p><code>ReadOnlyModelViewSet</code> 类也从 <code>GenericAPIView</code> 继承。与 <code>ModelViewSet</code> 一样，它也包含各种操作的实现，但与 <code>ModelViewSet</code> 不同的是它只提供 “只读” 操作，<code>.list()</code> 和 <code>.retrieve()</code>。</p><p>举个栗子：</p><p>与 <code>ModelViewSet</code> 一样，您通常需要提供至少 <code>queryset</code> 和 <code>serializer_class</code> 属性。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ReadOnlyModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A simple ViewSet for viewing accounts.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> AccountSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，与 <code>ModelViewSet</code> 一样，您可以覆盖<code>GenericAPIView</code> 可用的任何标准属性和方法。</p>`,5),Y={id:"自定义视图集基类",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#自定义视图集基类","aria-hidden":"true"},"#",-1),nn={href:"http://drf.jiuyou.info/#/drf/viewsets?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E9%9B%86%E5%9F%BA%E7%B1%BB",title:"自定义视图集基类",target:"_blank",rel:"noopener noreferrer"},sn=t(`<p>您可能需要使用没有完整 <code>ModelViewSet</code> 操作集的自定义 <code>ViewSet</code> 类，或其他自定义行为。</p><p>举个栗子：</p><p>要创建提供 <code>create</code>， <code>list</code> 和 <code>retrieve</code> 操作的基本视图集类，请从 <code>GenericViewSet</code> 继承，并混合（mixin ）所需的操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins

<span class="token keyword">class</span> <span class="token class-name">CreateListRetrieveViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>CreateModelMixin<span class="token punctuation">,</span>
                                mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span>
                                mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span>
                                viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A viewset that provides \`retrieve\`, \`create\`, and \`list\` actions.

    To use it, override the class and set the \`.queryset\` and
    \`.serializer_class\` attributes.
    &quot;&quot;&quot;</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过创建自己的基本 ViewSet 类，能够提供可在 API 中的多个视图集中重用的常见行为。</p>`,5);function an(en,tn){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,n("h4",r,[d,s(),n("a",k,[s("点击跳转到 Rest-Framework 专栏目录"),e(a)])]),n("blockquote",null,[n("p",null,[n("a",v,[s("官方原文链接"),e(a)])])]),n("h2",m,[b,s(),n("a",w,[s("视图集"),e(a)])]),h,n("h3",f,[_,s(),n("a",y,[s("举个栗子"),e(a)])]),g,n("h3",q,[E,s(),n("a",S,[s("操作视图集"),e(a)])]),A,n("h3",V,[B,s(),n("a",x,[s("标记额外的路由行为"),e(a)])]),R,n("h3",z,[U,s(),n("a",j,[s("action 跳转"),e(a)])]),M,n("h2",I,[N,s(),n("a",P,[s("API 参考"),e(a)])]),D,n("h3",G,[T,s(),n("a",F,[s("GenericViewSet"),e(a)])]),C,O,n("h3",L,[H,s(),n("a",$,[s("ModelViewSet"),e(a)])]),Q,n("h3",J,[K,s(),n("a",W,[s("ReadOnlyModelViewSet"),e(a)])]),X,n("h2",Y,[Z,s(),n("a",nn,[s("自定义视图集基类"),e(a)])]),sn])}const cn=o(l,[["render",an],["__file","Rest-framework专栏讲解(八)：ViewSet.html.vue"]]);export{cn as default};
