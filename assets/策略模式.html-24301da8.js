import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as r,a as n,b as s,e as a,f as l}from"./app-9976b6d0.js";const c="/assets/策略模式-2f94bba7.png",i="/assets/什么时候干掉if-3d2e0cbf.png",u="/assets/阿里巴巴消除if-b82098a7.jpg",d="/assets/登录策略-693133e5.jpg",k={},h=l('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在实际的项目开发中，<code>策略模式(Strategy Design Pattern)也比较常用</code>，也是面试经常会问到的知识点。最常见的应用场景是，利用它来<code>避免冗长的 if-else 或 switch 分支判断。</code></p><p>我们生活中的策略场景：</p><ul><li><strong>买东西结账</strong>：可以使用<code>现金支付</code>、<code>微信支付</code>、<code>支付宝支付</code>或者<code>银行卡支付</code>，这些交易方式就是不同的策略。</li><li><strong>登录APP</strong>：可以使用<code>QQ登录</code>、<code>微信登录</code>、<code>微博登录</code>等，这些不同的登录在后台看来也需要不同的处理策略。</li><li><strong>告警功能</strong>：根据不同的告警策略发送告警信息，如<code>钉钉通知</code>，<code>微信通知</code>等。</li><li><strong>商品促销</strong>：在电商或零售业务中，根据不同的节日、季节或促销活动，使用不同的促销策略（如满减、固定折扣、买一送一等）。</li></ul><blockquote><p>这些不同场景，各自的策略通常都是不止3个，意味着常规编程模式实现时，代码必然充斥着大量的<code>if stament</code>。</p></blockquote><p>在《阿里巴巴 Java 开发手册》中有提到当超过 3 层的<code>if-else</code>的逻辑判断代码可以使用策略模式来实现，这在 python 中同样适用。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>错了，是下面这个！</code></p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>策略模式定义一系列算法类，每个类封装特定的算法逻辑，以实现算法间的可互换性。通过策略模式，算法的变更和扩展可以独立于客户端代码进行，客户端代码指的是那些依赖特定算法实现的业务逻辑部分。</p><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h3><ul><li>Strategy：策略抽象接口，定义所有支持算法的公共接口。</li><li>Context：策略上下文，负责与具体的策略类交互，它并不知道具体的策略对象是什么，只知道执行策略对象的方法。</li><li>ConcreteStrategy：具体的策略实现，封装了具体的算法实现。</li></ul><p>策略模式主要的作用是解耦策略的定义、创建和使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。除此之外，对于复杂代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，最小化、集中化代码改动，减少引入 bug 的风险。</p><blockquote><p>工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是<code>策略的定义</code>、<code>创建</code>、<code>使用</code>这三部分。所以一般实现上都是策略模式+工厂方法模式优化。</p></blockquote><h2 id="策略的定义" tabindex="-1"><a class="header-anchor" href="#策略的定义" aria-hidden="true">#</a> 策略的定义</h2><blockquote><p>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。</p></blockquote><h3 id="登录策略" tabindex="-1"><a class="header-anchor" href="#登录策略" aria-hidden="true">#</a> 登录策略</h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>因为所有的策略类都实现相同的接口，所以，<strong>客户端代码基于接口而非实现编程，可以灵活地替换不同的策略</strong>。</p></blockquote><h2 id="策略的创建" tabindex="-1"><a class="header-anchor" href="#策略的创建" aria-hidden="true">#</a> 策略的创建</h2><blockquote><p>策略的创建由工厂类来完成，封装策略创建的细节。</p></blockquote><h2 id="策略的使用" tabindex="-1"><a class="header-anchor" href="#策略的使用" aria-hidden="true">#</a> 策略的使用</h2><h2 id="如何利用策略模式避免分支判断" tabindex="-1"><a class="header-anchor" href="#如何利用策略模式避免分支判断" aria-hidden="true">#</a> 如何利用策略模式避免分支判断</h2><blockquote><p>策略模式适用于根据不同类型的动态，决定使用哪种策略这样一种应用场景。</p></blockquote><h3 id="查表法" tabindex="-1"><a class="header-anchor" href="#查表法" aria-hidden="true">#</a> 查表法</h3><h2 id="常见策略场景" tabindex="-1"><a class="header-anchor" href="#常见策略场景" aria-hidden="true">#</a> 常见策略场景</h2><ul><li>系统中有面对一个问题的多种解决方案；</li><li>系统可以动态地选择解决方案，而无需变化代码；</li><li>封装算法细节，实现对客户端使用方的隐藏。</li></ul><p>策略模式在日常中经常使用，有时可能我们都没有意识到，符合上面所说的三个条件的场景都可以使用策略模式，我们列一下日常具体的场景：</p><ul><li>排序算法</li><li>List、Map 的选择与实现</li><li>网站会员、等级、积分、折扣、支付方式</li><li>出行</li><li>...</li></ul><h3 id="超市做活动的场景" tabindex="-1"><a class="header-anchor" href="#超市做活动的场景" aria-hidden="true">#</a> 超市做活动的场景</h3><p>瘦西来超市做活动的场景来举个例子。</p><ul><li>Context：Order类，订单信息，包括商品，价格和数量，以为购买者等</li><li>Stragety：Promotion类，抽象基类，包含一个抽象方法（计算折扣）</li><li>ContreteStragety：分三个类，FidelityPromo、BulkItemPromo、LargeOrderPromo，实现具体的折扣计算方法。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod
<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple

<span class="token comment"># 定义客户命名元组</span>
Customer <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">&#39;Customer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name fidelity&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 购物项类</span>
<span class="token keyword">class</span> <span class="token class-name">LineItem</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> product<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>product <span class="token operator">=</span> product
        self<span class="token punctuation">.</span>quantity <span class="token operator">=</span> quantity
        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price

    <span class="token keyword">def</span> <span class="token function">total</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>quantity <span class="token operator">*</span> self<span class="token punctuation">.</span>price

<span class="token comment"># 订单类</span>
<span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> customer<span class="token punctuation">:</span> Customer<span class="token punctuation">,</span> cart<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> promotion<span class="token punctuation">:</span> Promotion <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>customer <span class="token operator">=</span> customer
        self<span class="token punctuation">.</span>cart <span class="token operator">=</span> cart
        self<span class="token punctuation">.</span>promotion <span class="token operator">=</span> promotion
        self<span class="token punctuation">.</span>__total <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">total</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__total <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>cart<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__total

    <span class="token keyword">def</span> <span class="token function">due</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        discount <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>promotion<span class="token punctuation">:</span>
            discount <span class="token operator">=</span> self<span class="token punctuation">.</span>promotion<span class="token punctuation">.</span>discount<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> discount

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;&lt;Order total: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string"> due: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>due<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&gt;&#39;</span></span>

<span class="token comment"># 优惠策略抽象基类</span>
<span class="token keyword">class</span> <span class="token class-name">Promotion</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">discount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">:</span> Order<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token comment"># 批量购买优惠策略</span>
<span class="token keyword">class</span> <span class="token class-name">BulkItemPromo</span><span class="token punctuation">(</span>Promotion<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">discount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">:</span> Order<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        discount <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> order<span class="token punctuation">.</span>cart<span class="token punctuation">:</span>
            <span class="token keyword">if</span> item<span class="token punctuation">.</span>quantity <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>
                discount <span class="token operator">+=</span> item<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span>
        <span class="token keyword">return</span> discount

<span class="token comment"># 大额订单优惠策略</span>
<span class="token keyword">class</span> <span class="token class-name">LargeOrderPromo</span><span class="token punctuation">(</span>Promotion<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">discount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">:</span> Order<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">50</span> <span class="token keyword">if</span> order<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">500</span> <span class="token keyword">else</span> <span class="token number">0</span>

<span class="token comment"># 主程序</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    customer <span class="token operator">=</span> Customer<span class="token punctuation">(</span><span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
    cart <span class="token operator">=</span> <span class="token punctuation">[</span>LineItem<span class="token punctuation">(</span><span class="token string">&#39;鞋子&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LineItem<span class="token punctuation">(</span><span class="token string">&#39;衣服&#39;</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    order <span class="token operator">=</span> Order<span class="token punctuation">(</span>customer<span class="token punctuation">,</span> cart<span class="token punctuation">,</span> BulkItemPromo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是问题很快又来了，商场搞活动，却让顾客手动选择使用哪个优惠策略，作为一个良心的商家，应该要能自动对比所有策略得出最优惠的价格来给到顾客。这就要求后台代码要能够找出当前可用的全部策略，并一一比对折扣</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token comment"># 实现一个最优策略类找出最优的策略</span>
<span class="token keyword">class</span> <span class="token class-name">BestPromo</span><span class="token punctuation">(</span>Promotion<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">discount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>
 
        all_promotion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span>
                         name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;Promo&#39;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> name <span class="token operator">!=</span> <span class="token string">&#39;BestPromo&#39;</span><span class="token punctuation">]</span>
 
        <span class="token comment"># 计算最大折扣</span>
        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>discount<span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token keyword">for</span> promo <span class="token keyword">in</span> all_promotion<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上例子，可以总结出使用策略模式的好处:</p><ul><li>扩展性优秀，移植方便，使用灵活。可以很方便扩展策略；</li><li>各个策略可以自由切换。这也是依赖抽象类设计接口的好处之一；</li></ul><p>但同时，策略模式 也会带来一些弊端:</p><ul><li>项目比较庞大时，策略可能比较多，不便于维护；</li><li>策略的使用方必须知道有哪些策略，才能决定使用哪一个策略。</li></ul><p>具体的策略类用函数来实现，然后在实例化 Order 类时指定这个策略函数即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fidelity_promo</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> order<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.05</span> <span class="token keyword">if</span> order<span class="token punctuation">.</span>customer<span class="token punctuation">.</span>fidelity<span class="token operator">&gt;=</span><span class="token number">1000</span> <span class="token keyword">else</span> <span class="token number">0</span>
 
<span class="token keyword">def</span> <span class="token function">bulk_promo</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">:</span>
    discount<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> order<span class="token punctuation">.</span>cart<span class="token punctuation">:</span>
        <span class="token keyword">if</span> item<span class="token punctuation">.</span>quantity<span class="token operator">&gt;=</span><span class="token number">20</span><span class="token punctuation">:</span>
            discount<span class="token operator">+=</span>item<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.1</span>
    <span class="token keyword">return</span> discount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出行" tabindex="-1"><a class="header-anchor" href="#出行" aria-hidden="true">#</a> 出行</h3><p>如果我需要在早晨从家里出发去上班，我可以有几个策略考虑：</p><ul><li>我可以乘坐地铁，</li><li>乘坐公交车，</li><li>走路或其它的途径。</li></ul><p>每个策略可以得到相同的结果，但是使用了不同的资源。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Type

<span class="token comment"># 使用抽象基类定义策略接口</span>
<span class="token keyword">class</span> <span class="token class-name">TravelStrategy</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;定义旅行策略的接口&quot;&quot;&quot;</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">travel_algorithm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;执行旅行策略&quot;&quot;&quot;</span>
        <span class="token keyword">pass</span>

<span class="token comment"># 具体策略实现</span>
<span class="token keyword">class</span> <span class="token class-name">AirplaneStrategy</span><span class="token punctuation">(</span>TravelStrategy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;飞机旅行策略实现&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">travel_algorithm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Traveling by air.&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TrainStrategy</span><span class="token punctuation">(</span>TravelStrategy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;火车旅行策略实现&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">travel_algorithm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Traveling by high-speed train.&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">CarStrategy</span><span class="token punctuation">(</span>TravelStrategy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;汽车旅行策略实现&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">travel_algorithm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Traveling by car.&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">BicycleStrategy</span><span class="token punctuation">(</span>TravelStrategy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;自行车旅行策略实现&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">travel_algorithm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Traveling by bicycle.&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 上下文管理器，用于设置和重置策略</span>
<span class="token keyword">class</span> <span class="token class-name">TravelContext</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;旅行策略上下文管理器&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">:</span> TravelStrategy<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>strategy<span class="token punctuation">:</span> TravelStrategy <span class="token operator">=</span> strategy

    <span class="token keyword">def</span> <span class="token function">set_strategy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">:</span> TravelStrategy<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy

    <span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;执行当前策略的旅行算法&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>travel_algorithm<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;TravelContext&#39;</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;允许使用上下文管理器&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;确保在退出时进行清理（如果有的话）&quot;&quot;&quot;</span>
        <span class="token keyword">pass</span>

<span class="token comment"># 使用示例</span>
<span class="token comment"># 创建初始策略为飞机出行的上下文</span>
travel_context <span class="token operator">=</span> TravelContext<span class="token punctuation">(</span>AirplaneStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
travel_context<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Traveling by air.</span>

<span class="token comment"># 更改策略为高铁出行</span>
travel_context<span class="token punctuation">.</span>set_strategy<span class="token punctuation">(</span>TrainStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
travel_context<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Traveling by high-speed train.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h2><p>从上下文类中找出修改频率较高的算法 （也可能是用于在运行时选择某个算法变体的复杂条件运算符）。<br> 声明该算法所有变体的通用策略接口。<br> 将算法逐一抽取到各自的类中， 它们都必须实现策略接口。<br> 在上下文类中添加一个成员变量用于保存对于策略对象的引用。 然后提供设置器以修改该成员变量。 上下文仅可通过策略接口同策略对象进行交互， 如有需要还可定义一个接口来让策略访问其数据。<br> 客户端必须将上下文类与相应策略进行关联， 使上下文可以预期的方式完成其主要工作。</p><h2 id="策略模式优缺点" tabindex="-1"><a class="header-anchor" href="#策略模式优缺点" aria-hidden="true">#</a> 策略模式优缺点</h2><p><strong>优点</strong></p><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li>开闭原则。 你无需对上下文进行修改就能够引入新的策略。</li><li>使功能改变或者扩展更容易。具体地说，修改一个算法不必重新编译“Client”与“Context”类。增加一个新算法时，在应用程序暂时还不想使用该新算法的情况下，不必重新编译“Client”与“Context”类。</li></ul><p><strong>缺点</strong></p><ul><li>如果你的算法极少发生改变，那么没有任何理由引入新的类和接口。使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能，允许你在一组匿名函数中实现不同版本的算法。这样，你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>策略模式运用好能去除代码中大量的<code>if else</code>，策略模式通常是以面向对象的多态取代条件表达式。</p><p>设计原则和思想是更高层次的理论和指导原则，设计模式只是这些理论和指导原则下，根据经验和场景，总结出来的编程范式，设计原则和思想比设计模式更加普适和重要。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,58),b={href:"https://www.chenshiyang.com/archives/929",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),_={href:"https://shaoxyz.github.io/2020/07/13/Python%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),v={href:"https://www.jb51.net/article/274712.htm",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),f={href:"https://www.youtube.com/watch?v=zAZ9EC9koP0",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),q={href:"https://johneyzheng.top/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),P={href:"https://www.jianshu.com/p/6c127b4ab53e",target:"_blank",rel:"noopener noreferrer"},C=n("br",null,null,-1),B={href:"https://www.jb51.net/article/237513.htm",target:"_blank",rel:"noopener noreferrer"},E=n("br",null,null,-1),T={href:"https://segmentfault.com/a/1190000013402337",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),j={href:"https://nqtr.cn/news/show-5418233.html?action=onClick",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),A={href:"https://segmentfault.com/a/1190000016656319",target:"_blank",rel:"noopener noreferrer"},I=n("br",null,null,-1),L={href:"https://www.jianshu.com/p/ada6ba3cb8c1",target:"_blank",rel:"noopener noreferrer"},O=n("br",null,null,-1),V={href:"https://m.xp.cn/c.php/13035.html",target:"_blank",rel:"noopener noreferrer"},M=n("br",null,null,-1),D={href:"https://www.bilibili.com/video/BV1p34y1P7Jx/?spm_id_from=333.788.recommend_more_video.3&vd_source=f6ed028b29a932df5d0a09a54802e1b5",target:"_blank",rel:"noopener noreferrer"},F=n("br",null,null,-1),H={href:"https://m.startmvc.com/article_31077.html",target:"_blank",rel:"noopener noreferrer"},z=n("br",null,null,-1),Y={href:"https://www.modb.pro/db/127368",target:"_blank",rel:"noopener noreferrer"},J=n("br",null,null,-1),Q={href:"https://www.youtube.com/watch?v=anhqH-rKMrc",target:"_blank",rel:"noopener noreferrer"},U=n("br",null,null,-1),W={href:"https://github.com/faif/python-patterns",target:"_blank",rel:"noopener noreferrer"},X=n("br",null,null,-1),K={href:"http://www.rhkb.cn/news/376822.html",target:"_blank",rel:"noopener noreferrer"},R=n("br",null,null,-1),G={href:"https://www.bilibili.com/video/BV19E42137eX/?vd_source=f6ed028b29a932df5d0a09a54802e1b5",target:"_blank",rel:"noopener noreferrer"},Z=n("br",null,null,-1),$={href:"https://mikechen.cc/9338.html",target:"_blank",rel:"noopener noreferrer"},nn=n("br",null,null,-1),sn={href:"https://refactoring.guru/design-patterns/strategy/python/example",target:"_blank",rel:"noopener noreferrer"},tn=n("br",null,null,-1),an={href:"https://medium.com/@niteshbhargav1210/exploring-the-strategy-design-pattern-in-python-a-guide-with-examples-63f292a8c9fb",target:"_blank",rel:"noopener noreferrer"},en=n("br",null,null,-1),on={href:"https://www.geeksforgeeks.org/strategy-method-python-design-patterns/",target:"_blank",rel:"noopener noreferrer"},pn=n("br",null,null,-1),rn={href:"https://auth0.com/blog/strategy-design-pattern-in-python/",target:"_blank",rel:"noopener noreferrer"},ln=n("br",null,null,-1),cn={href:"https://medium.com/@amirm.lavasani/design-patterns-in-python-strategy-7b14f1c4c162",target:"_blank",rel:"noopener noreferrer"},un=n("br",null,null,-1),dn={href:"https://dev.to/timilehin-olusegun/strategy-design-patterns-in-python-3n3a",target:"_blank",rel:"noopener noreferrer"},kn=n("br",null,null,-1),hn={href:"https://stackoverflow.com/questions/56506985/strategy-pattern-in-python",target:"_blank",rel:"noopener noreferrer"},bn=n("br",null,null,-1),mn={href:"https://towardsdev.com/solid-principles-explained-635ad3608b20",target:"_blank",rel:"noopener noreferrer"},_n=n("br",null,null,-1),gn={href:"https://levelup.gitconnected.com/design-patterns-in-python-strategy-pattern-2189c540756d",target:"_blank",rel:"noopener noreferrer"},vn=n("br",null,null,-1),wn={href:"https://dev.to/fayomihorace/become-a-python-design-strategist-using-the-strategy-pattern-6ad",target:"_blank",rel:"noopener noreferrer"},fn=n("br",null,null,-1),yn={href:"https://www.algorystcorner.com/python-design-patterns/",target:"_blank",rel:"noopener noreferrer"},qn=n("br",null,null,-1),xn={href:"https://towardsdatascience.com/how-the-strategy-design-pattern-can-help-you-quickly-evaluate-alternative-models-66e0f625016f",target:"_blank",rel:"noopener noreferrer"},Pn=n("br",null,null,-1),Cn={href:"https://python.plainenglish.io/strategy-pattern-in-python-5f05be0c0bf6",target:"_blank",rel:"noopener noreferrer"},Bn=n("br",null,null,-1),En={href:"https://sourcemaking.com/design_patterns/strategy/python/1",target:"_blank",rel:"noopener noreferrer"},Tn=n("br",null,null,-1),Nn={href:"https://www.giacomodebidda.com/posts/strategy-pattern-in-python/",target:"_blank",rel:"noopener noreferrer"},jn=n("br",null,null,-1),Sn={href:"https://www.youtube.com/watch?v=UPBOOIRrl40",target:"_blank",rel:"noopener noreferrer"},An=n("br",null,null,-1),In={href:"https://github.com/gennad/Design-Patterns-in-Python/blob/master/strategy.py",target:"_blank",rel:"noopener noreferrer"},Ln=n("br",null,null,-1),On={href:"https://www.getwebtips.net/blog/2022/7/5/practical-python-design-patterns-strategy-pattern/",target:"_blank",rel:"noopener noreferrer"},Vn=n("br",null,null,-1),Mn={href:"https://alan-turing-institute.github.io/rse-course/html/module07_construction_and_design/07_07_design_patterns.html#strategy-pattern",target:"_blank",rel:"noopener noreferrer"},Dn=n("br",null,null,-1),Fn={href:"http://coursegalaxy.com/design-patterns/strategy-python.html",target:"_blank",rel:"noopener noreferrer"},Hn=n("br",null,null,-1),zn={href:"https://www.geeksforgeeks.org/strategy-pattern-set-1/",target:"_blank",rel:"noopener noreferrer"},Yn=n("br",null,null,-1),Jn={href:"https://robp.dev/the-strategy-pattern-in-python/",target:"_blank",rel:"noopener noreferrer"},Qn=n("br",null,null,-1),Un={href:"https://www.youtube.com/watch?v=vzTrLpxPF54",target:"_blank",rel:"noopener noreferrer"},Wn=n("br",null,null,-1),Xn={href:"https://subscription.packtpub.com/book/programming/9781787125186/1/ch01lvl1sec11/10-python-design-patterns-i",target:"_blank",rel:"noopener noreferrer"},Kn=n("br",null,null,-1),Rn={href:"https://deparkes.co.uk/2020/07/07/python-strategy-pattern/",target:"_blank",rel:"noopener noreferrer"},Gn=n("br",null,null,-1),Zn={href:"https://riptutorial.com/python/example/26001/strategy-pattern",target:"_blank",rel:"noopener noreferrer"},$n=n("br",null,null,-1),ns={href:"https://www.youtube.com/watch?v=eofyXRNCiVE",target:"_blank",rel:"noopener noreferrer"},ss=n("br",null,null,-1),ts={href:"https://www.reddit.com/r/Python/comments/mglc3a/strategy_design_pattern_explanation_and_code/",target:"_blank",rel:"noopener noreferrer"},as=n("br",null,null,-1),es={href:"https://blog.slys.dev/design-pattern-strategy/",target:"_blank",rel:"noopener noreferrer"},os=n("br",null,null,-1),ps={href:"https://www.pythoninformer.com/programming-techniques/design-patterns/strategy/",target:"_blank",rel:"noopener noreferrer"},rs=n("br",null,null,-1),ls={href:"https://cijo.me/posts/stragey-pattern/",target:"_blank",rel:"noopener noreferrer"},cs=n("br",null,null,-1),is={href:"https://www.toptal.com/python/python-design-patterns",target:"_blank",rel:"noopener noreferrer"},us=n("br",null,null,-1),ds={href:"https://py.checkio.org/blog/design-patterns-part-1/",target:"_blank",rel:"noopener noreferrer"},ks=n("br",null,null,-1),hs={href:"https://nimak.hashnode.dev/strategy-design-pattern-in-python",target:"_blank",rel:"noopener noreferrer"},bs=n("br",null,null,-1),ms={href:"https://www.startdataengineering.com/post/code-patterns/",target:"_blank",rel:"noopener noreferrer"},_s=n("br",null,null,-1),gs={href:"https://dagster.io/blog/python-factory-patterns",target:"_blank",rel:"noopener noreferrer"},vs=n("br",null,null,-1),ws={href:"https://stackabuse.com/behavioral-design-patterns-in-python/",target:"_blank",rel:"noopener noreferrer"},fs=n("br",null,null,-1),ys={href:"https://www.youtube.com/playlist?list=PLplJltxWVIbIjWVcNStHBkPsaRLpYnDBU",target:"_blank",rel:"noopener noreferrer"},qs=n("br",null,null,-1),xs={href:"https://www.bomberbot.com/design-patterns/a-beginners-guide-to-the-strategy-design-pattern/",target:"_blank",rel:"noopener noreferrer"},Ps=n("br",null,null,-1),Cs={href:"https://thecodest.co/blog/thats-the-strategy-strategy-design-pattern/",target:"_blank",rel:"noopener noreferrer"},Bs=n("br",null,null,-1),Es={href:"https://www.youtube.com/watch?v=hYoNW0Oy9N4",target:"_blank",rel:"noopener noreferrer"},Ts=n("br",null,null,-1),Ns={href:"https://sbcode.net/python/strategy/",target:"_blank",rel:"noopener noreferrer"},js=n("br",null,null,-1),Ss={href:"https://www.learncsdesign.com/understanding-the-gang-of-four-gof-design-patterns-using-python-part-6/",target:"_blank",rel:"noopener noreferrer"},As=n("br",null,null,-1),Is={href:"https://laszlo.substack.com/p/you-only-need-2-design-patterns-to",target:"_blank",rel:"noopener noreferrer"},Ls=n("br",null,null,-1),Os={href:"https://www.youtube.com/watch?v=xFOnFjoJBb8",target:"_blank",rel:"noopener noreferrer"},Vs=n("br",null,null,-1),Ms={href:"https://www.w3process.com/strategy-design-pattern-a-guide-for-software-professionals/",target:"_blank",rel:"noopener noreferrer"},Ds=n("br",null,null,-1),Fs={href:"https://www.youtube.com/watch?v=QKeL46JoDU4&list=PLmCsXDGbJHdhXoxY7HBMv06H3-76QDMHs&index=1",target:"_blank",rel:"noopener noreferrer"},Hs=n("br",null,null,-1),zs={href:"https://www.youtube.com/watch?v=MSWelgwhm-k",target:"_blank",rel:"noopener noreferrer"},Ys=n("br",null,null,-1),Js={href:"https://www.youtube.com/watch?v=E9-4uaoncVY",target:"_blank",rel:"noopener noreferrer"},Qs=n("br",null,null,-1),Us={href:"https://www.youtube.com/watch?v=jN7DDV5bCn4",target:"_blank",rel:"noopener noreferrer"},Ws=n("br",null,null,-1),Xs={href:"https://www.youtube.com/watch?v=n2b_Cxh20Fw",target:"_blank",rel:"noopener noreferrer"},Ks=n("br",null,null,-1),Rs={href:"https://blog.csdn.net/u010870679/article/details/140431618",target:"_blank",rel:"noopener noreferrer"},Gs=n("br",null,null,-1),Zs={href:"https://www.youtube.com/watch?v=7wHiPs9Fhbc",target:"_blank",rel:"noopener noreferrer"},$s=n("br",null,null,-1),nt={href:"https://www.youtube.com/watch?v=MPBk1XMTby8",target:"_blank",rel:"noopener noreferrer"},st=n("br",null,null,-1),tt={href:"https://programmersought.com/article/979411277903/",target:"_blank",rel:"noopener noreferrer"},at=n("br",null,null,-1),et={href:"https://www.youtube.com/watch?v=hVLb3-OE3pM",target:"_blank",rel:"noopener noreferrer"},ot=n("br",null,null,-1),pt={href:"https://www.youtube.com/watch?v=wNiMoNiQQJg",target:"_blank",rel:"noopener noreferrer"},rt=n("br",null,null,-1),lt={href:"https://www.youtube.com/watch?v=TtkdYqLMBHI",target:"_blank",rel:"noopener noreferrer"},ct=n("br",null,null,-1),it={href:"https://www.youtube.com/watch?v=UCyqiYC_Ups",target:"_blank",rel:"noopener noreferrer"},ut=n("br",null,null,-1),dt={href:"https://www.youtube.com/watch?v=9uDFHTWCKkQ",target:"_blank",rel:"noopener noreferrer"},kt=n("br",null,null,-1),ht={href:"https://www.youtube.com/watch?v=CPK3sg6YnjI",target:"_blank",rel:"noopener noreferrer"},bt=n("br",null,null,-1),mt={href:"https://www.youtube.com/watch?v=v9ejT8FO-7I",target:"_blank",rel:"noopener noreferrer"},_t=n("br",null,null,-1),gt={href:"https://www.youtube.com/watch?v=yuMuVaIdfGk",target:"_blank",rel:"noopener noreferrer"};function vt(wt,ft){const t=o("ExternalLinkIcon");return p(),r("div",null,[h,n("blockquote",null,[n("p",null,[n("a",b,[s("https://www.chenshiyang.com/archives/929"),a(t)]),m,n("a",_,[s("https://shaoxyz.github.io/2020/07/13/Python实现策略模式/"),a(t)]),g,n("a",v,[s("https://www.jb51.net/article/274712.htm"),a(t)]),w,n("a",f,[s("https://www.youtube.com/watch?v=zAZ9EC9koP0"),a(t)]),y,n("a",q,[s("https://johneyzheng.top/posts/设计模式-策略模式/"),a(t)]),x,n("a",P,[s("https://www.jianshu.com/p/6c127b4ab53e"),a(t)]),C,n("a",B,[s("https://www.jb51.net/article/237513.htm"),a(t)]),E,n("a",T,[s("https://segmentfault.com/a/1190000013402337"),a(t)]),N,n("a",j,[s("https://nqtr.cn/news/show-5418233.html?action=onClick"),a(t)]),S,n("a",A,[s("https://segmentfault.com/a/1190000016656319"),a(t)]),I,n("a",L,[s("https://www.jianshu.com/p/ada6ba3cb8c1"),a(t)]),O,n("a",V,[s("https://m.xp.cn/c.php/13035.html"),a(t)]),M,n("a",D,[s("https://www.bilibili.com/video/BV1p34y1P7Jx/?spm_id_from=333.788.recommend_more_video.3&vd_source=f6ed028b29a932df5d0a09a54802e1b5"),a(t)]),F,n("a",H,[s("https://m.startmvc.com/article_31077.html"),a(t)]),z,n("a",Y,[s("https://www.modb.pro/db/127368"),a(t)]),J,n("a",Q,[s("https://www.youtube.com/watch?v=anhqH-rKMrc"),a(t)]),U,n("a",W,[s("https://github.com/faif/python-patterns"),a(t)]),X,n("a",K,[s("http://www.rhkb.cn/news/376822.html"),a(t)]),R,n("a",G,[s("https://www.bilibili.com/video/BV19E42137eX/?vd_source=f6ed028b29a932df5d0a09a54802e1b5"),a(t)]),Z,n("a",$,[s("https://mikechen.cc/9338.html"),a(t)]),nn,n("a",sn,[s("https://refactoring.guru/design-patterns/strategy/python/example"),a(t)]),tn,n("a",an,[s("https://medium.com/@niteshbhargav1210/exploring-the-strategy-design-pattern-in-python-a-guide-with-examples-63f292a8c9fb"),a(t)]),en,n("a",on,[s("https://www.geeksforgeeks.org/strategy-method-python-design-patterns/"),a(t)]),pn,n("a",rn,[s("https://auth0.com/blog/strategy-design-pattern-in-python/"),a(t)]),ln,n("a",cn,[s("https://medium.com/@amirm.lavasani/design-patterns-in-python-strategy-7b14f1c4c162"),a(t)]),un,n("a",dn,[s("https://dev.to/timilehin-olusegun/strategy-design-patterns-in-python-3n3a"),a(t)]),kn,n("a",hn,[s("https://stackoverflow.com/questions/56506985/strategy-pattern-in-python"),a(t)]),bn,n("a",mn,[s("https://towardsdev.com/solid-principles-explained-635ad3608b20"),a(t)]),_n,n("a",gn,[s("https://levelup.gitconnected.com/design-patterns-in-python-strategy-pattern-2189c540756d"),a(t)]),vn,n("a",wn,[s("https://dev.to/fayomihorace/become-a-python-design-strategist-using-the-strategy-pattern-6ad"),a(t)]),fn,n("a",yn,[s("https://www.algorystcorner.com/python-design-patterns/"),a(t)]),qn,n("a",xn,[s("https://towardsdatascience.com/how-the-strategy-design-pattern-can-help-you-quickly-evaluate-alternative-models-66e0f625016f"),a(t)]),Pn,n("a",Cn,[s("https://python.plainenglish.io/strategy-pattern-in-python-5f05be0c0bf6"),a(t)]),Bn,n("a",En,[s("https://sourcemaking.com/design_patterns/strategy/python/1"),a(t)]),Tn,n("a",Nn,[s("https://www.giacomodebidda.com/posts/strategy-pattern-in-python/"),a(t)]),jn,n("a",Sn,[s("https://www.youtube.com/watch?v=UPBOOIRrl40"),a(t)]),An,n("a",In,[s("https://github.com/gennad/Design-Patterns-in-Python/blob/master/strategy.py"),a(t)]),Ln,n("a",On,[s("https://www.getwebtips.net/blog/2022/7/5/practical-python-design-patterns-strategy-pattern/"),a(t)]),Vn,n("a",Mn,[s("https://alan-turing-institute.github.io/rse-course/html/module07_construction_and_design/07_07_design_patterns.html#strategy-pattern"),a(t)]),Dn,n("a",Fn,[s("http://coursegalaxy.com/design-patterns/strategy-python.html"),a(t)]),Hn,n("strong",null,[n("a",zn,[s("https://www.geeksforgeeks.org/strategy-pattern-set-1/"),a(t)])]),s(" */"),Yn,n("a",Jn,[s("https://robp.dev/the-strategy-pattern-in-python/"),a(t)]),Qn,n("a",Un,[s("https://www.youtube.com/watch?v=vzTrLpxPF54"),a(t)]),Wn,n("a",Xn,[s("https://subscription.packtpub.com/book/programming/9781787125186/1/ch01lvl1sec11/10-python-design-patterns-i"),a(t)]),Kn,n("a",Rn,[s("https://deparkes.co.uk/2020/07/07/python-strategy-pattern/"),a(t)]),Gn,n("strong",null,[n("a",Zn,[s("https://riptutorial.com/python/example/26001/strategy-pattern"),a(t)])]),$n,n("a",ns,[s("https://www.youtube.com/watch?v=eofyXRNCiVE"),a(t)]),ss,n("a",ts,[s("https://www.reddit.com/r/Python/comments/mglc3a/strategy_design_pattern_explanation_and_code/"),a(t)]),as,n("a",es,[s("https://blog.slys.dev/design-pattern-strategy/"),a(t)]),os,n("a",ps,[s("https://www.pythoninformer.com/programming-techniques/design-patterns/strategy/"),a(t)]),rs,n("a",ls,[s("https://cijo.me/posts/stragey-pattern/"),a(t)]),cs,n("a",is,[s("https://www.toptal.com/python/python-design-patterns"),a(t)]),us,n("a",ds,[s("https://py.checkio.org/blog/design-patterns-part-1/"),a(t)]),ks,n("a",hs,[s("https://nimak.hashnode.dev/strategy-design-pattern-in-python"),a(t)]),bs,n("a",ms,[s("https://www.startdataengineering.com/post/code-patterns/"),a(t)]),_s,n("a",gs,[s("https://dagster.io/blog/python-factory-patterns"),a(t)]),vs,n("a",ws,[s("https://stackabuse.com/behavioral-design-patterns-in-python/"),a(t)]),fs,n("a",ys,[s("https://www.youtube.com/playlist?list=PLplJltxWVIbIjWVcNStHBkPsaRLpYnDBU"),a(t)]),qs,n("a",xs,[s("https://www.bomberbot.com/design-patterns/a-beginners-guide-to-the-strategy-design-pattern/"),a(t)]),Ps,n("strong",null,[n("a",Cs,[s("https://thecodest.co/blog/thats-the-strategy-strategy-design-pattern/"),a(t)])]),s(" */"),Bs,n("a",Es,[s("https://www.youtube.com/watch?v=hYoNW0Oy9N4"),a(t)]),Ts,n("a",Ns,[s("https://sbcode.net/python/strategy/"),a(t)]),js,n("a",Ss,[s("https://www.learncsdesign.com/understanding-the-gang-of-four-gof-design-patterns-using-python-part-6/"),a(t)]),As,n("a",Is,[s("https://laszlo.substack.com/p/you-only-need-2-design-patterns-to"),a(t)]),Ls,n("a",Os,[s("https://www.youtube.com/watch?v=xFOnFjoJBb8"),a(t)]),Vs,n("strong",null,[n("a",Ms,[s("https://www.w3process.com/strategy-design-pattern-a-guide-for-software-professionals/"),a(t)])]),Ds,n("a",Fs,[s("https://www.youtube.com/watch?v=QKeL46JoDU4&list=PLmCsXDGbJHdhXoxY7HBMv06H3-76QDMHs&index=1"),a(t)]),Hs,n("a",zs,[s("https://www.youtube.com/watch?v=MSWelgwhm-k"),a(t)]),Ys,n("a",Js,[s("https://www.youtube.com/watch?v=E9-4uaoncVY"),a(t)]),Qs,n("a",Us,[s("https://www.youtube.com/watch?v=jN7DDV5bCn4"),a(t)]),Ws,n("a",Xs,[s("https://www.youtube.com/watch?v=n2b_Cxh20Fw"),a(t)]),Ks,n("a",Rs,[s("https://blog.csdn.net/u010870679/article/details/140431618"),a(t)]),Gs,n("a",Zs,[s("https://www.youtube.com/watch?v=7wHiPs9Fhbc"),a(t)]),$s,n("a",nt,[s("https://www.youtube.com/watch?v=MPBk1XMTby8"),a(t)]),st,n("strong",null,[n("a",tt,[s("https://programmersought.com/article/979411277903/"),a(t)])]),at,n("strong",null,[n("a",et,[s("https://www.youtube.com/watch?v=hVLb3-OE3pM"),a(t)])]),ot,n("a",pt,[s("https://www.youtube.com/watch?v=wNiMoNiQQJg"),a(t)]),rt,n("a",lt,[s("https://www.youtube.com/watch?v=TtkdYqLMBHI"),a(t)]),ct,n("a",it,[s("https://www.youtube.com/watch?v=UCyqiYC_Ups"),a(t)]),ut,n("a",dt,[s("https://www.youtube.com/watch?v=9uDFHTWCKkQ"),a(t)]),kt,n("a",ht,[s("https://www.youtube.com/watch?v=CPK3sg6YnjI"),a(t)]),bt,n("a",mt,[s("https://www.youtube.com/watch?v=v9ejT8FO-7I"),a(t)]),_t,n("a",gt,[s("https://www.youtube.com/watch?v=yuMuVaIdfGk"),a(t)])])])])}const xt=e(k,[["render",vt],["__file","策略模式.html.vue"]]);export{xt as default};
