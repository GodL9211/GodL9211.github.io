const e=JSON.parse('{"key":"v-33e21b7c","path":"/docs/golang/golang-base/18.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"18. 自定义数据结构","lang":"zh-CN","frontmatter":{"title":"18. 自定义数据结构","icon":"book","index":true,"article":false,"description":"在Go语言中，你可以使用type关键字来创建自定义数据类型和设置类型别名。下面是两者的区别： 1. 自定义数据类型：通过type关键字可以创建一个全新的数据类型。例如，你可以创建一个表示温度的新类型： ```go package main import \\"fmt\\" // 自定义类型 type Celsius float64 func main() { ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/golang/golang-base/18.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"18. 自定义数据结构"}],["meta",{"property":"og:description","content":"在Go语言中，你可以使用type关键字来创建自定义数据类型和设置类型别名。下面是两者的区别： 1. 自定义数据类型：通过type关键字可以创建一个全新的数据类型。例如，你可以创建一个表示温度的新类型： ```go package main import \\"fmt\\" // 自定义类型 type Celsius float64 func main() { ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-28T09:45:26.000Z"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["meta",{"property":"article:modified_time","content":"2023-09-28T09:45:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"18. 自定义数据结构\\",\\"description\\":\\"在Go语言中，你可以使用type关键字来创建自定义数据类型和设置类型别名。下面是两者的区别： 1. 自定义数据类型：通过type关键字可以创建一个全新的数据类型。例如，你可以创建一个表示温度的新类型： ```go package main import \\\\\\"fmt\\\\\\" // 自定义类型 type Celsius float64 func main() { ...\\"}"]]},"headers":[],"git":{"createdTime":1695894326000,"updatedTime":1695894326000,"contributors":[{"name":"lianhaifeng","email":"lianhaifeng@rongannetworks.com","commits":1}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"docs/golang/golang-base/18.自定义数据结构.md","localizedDate":"2023年9月28日","excerpt":"","autoDesc":true}');export{e as data};
