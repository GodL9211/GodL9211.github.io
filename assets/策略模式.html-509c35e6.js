import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,f as t}from"./app-265d3719.js";const c={},d=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在实际的项目开发中，<code>策略模式(Strategy Design Pattern)也比较常用</code>。最常见的应用场景是，利用它来<code>避免冗长的 if-else 或 switch 分支判断。</code></p><blockquote><p>工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是策略的定义、创建、使用这三部分。</p></blockquote><h2 id="策略的定义" tabindex="-1"><a class="header-anchor" href="#策略的定义" aria-hidden="true">#</a> 策略的定义</h2><p>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。因为所有的策略类都实现相同的接口，所以，客户端代码基于接口而非实现编程，可以灵活地替换不同的策略。</p><h2 id="策略的创建" tabindex="-1"><a class="header-anchor" href="#策略的创建" aria-hidden="true">#</a> 策略的创建</h2><h2 id="策略的使用" tabindex="-1"><a class="header-anchor" href="#策略的使用" aria-hidden="true">#</a> 策略的使用</h2>',7),h=[d];function o(i,n){return a(),r("div",null,h)}const l=e(c,[["render",o],["__file","策略模式.html.vue"]]);export{l as default};
