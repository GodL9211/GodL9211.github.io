import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c as i,a as n,b as e,e as a,f as t}from"./app-9976b6d0.js";const c="/assets/image_7mysriImJ9-8104cee9.png",l="/assets/image_hsR0KgLa7P-7d8fe2ab.png",d={},u=t('<h1 id="rest-framework专栏讲解-十-renderers" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十-renderers" aria-hidden="true">#</a> Rest-framework专栏讲解(十)：Renderers</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E6%B8%B2%E6%9F%93">渲染</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8">如何确定使用哪个渲染器</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%99%A8">设置渲染器</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%B1%BB%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7">渲染器类的优先级</a></li></ul></li><li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%BD%97%E5%88%97">渲染器罗列</a></li><li><a href="#JSONRenderer">JSONRenderer</a></li><li><a href="#TemplateHTMLRenderer">TemplateHTMLRenderer</a></li><li><a href="#StaticHTMLRenderer">StaticHTMLRenderer</a></li><li><a href="#BrowsableAPIRenderer">BrowsableAPIRenderer</a></li><li><a href="#AdminRenderer">AdminRenderer</a></li><li><a href="#HTMLFormRenderer">HTMLFormRenderer</a></li><li><a href="#MultiPartRenderer">MultiPartRenderer</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B8%B2%E6%9F%93%E5%99%A8">自定义渲染器</a><ul><li><a href="#data">data</a></li><li><a href="#media_typeNone">media_type=None</a></li><li><a href="#renderer_contextNone">renderer_context=None</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li><li><a href="#%E8%AE%BE%E7%BD%AE-charset">设置 charset</a></li></ul></li><li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">渲染器的高级用法</a><ul><li><a href="#media-type-%E7%9A%84%E5%8F%98%E5%8C%96">media type 的变化</a></li><li><a href="#%E4%B8%8D%E6%98%8E%E7%A1%AE%E7%9A%84-media-type">不明确的 media type</a></li><li><a href="#HTML-error-%E8%A7%86%E5%9B%BE">HTML error 视图</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6">第三方组件</a><ul><li><a href="#YAML">YAML</a></li><li><a href="#XML">XML</a></li><li><a href="#JSONP">JSONP</a></li><li><a href="#MessagePack">MessagePack</a></li><li><a href="#XLSX">XLSX</a></li><li><a href="#CSV">CSV</a></li><li><a href="#UltraJSON">UltraJSON</a></li><li><a href="#Pandas-CSV-Excel-PNG">Pandas (CSV, Excel, PNG)</a></li><li><a href="#LaTeX">LaTeX</a></li></ul></li></ul></li></ul><hr>',4),k={href:"http://www.django-rest-framework.org/api-guide/renderers/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},h={id:"渲染",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#渲染","aria-hidden":"true"},"#",-1),_={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93",title:"渲染",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"REST framework 包含许多内置的渲染器类，允许您使用各种 media type 返回响应。同时也支持自定义渲染器。",-1),b={id:"如何确定使用哪个渲染器",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#如何确定使用哪个渲染器","aria-hidden":"true"},"#",-1),g={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8",title:"如何确定使用哪个渲染器",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[e("视图的渲染器集合始终被定义为类列表。当调用视图时，REST framework 将对请求内容进行分析，并确定最合适的渲染器以满足请求。内容分析的基本过程包括检查请求的 "),n("code",null,"Accept"),e(" header，以确定它在响应中期望的 media type。或者，用 URL 上的格式后缀明确表示。例如，URL "),n("code",null,"http://example.com/api/users_count.json"),e(" 可能始终返回 JSON 数据。")],-1),E={id:"设置渲染器",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#设置渲染器","aria-hidden":"true"},"#",-1),R={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%99%A8",title:"设置渲染器",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>可以使用 <code>DEFAULT_RENDERER_CLASSES</code> 设置全局的默认渲染器集。例如，以下设置将使用JSON作为主要 media type，并且还包含自描述 API。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.BrowsableAPIRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含了返回 JSON 数据以外, 还包括了自述 API 的返回。 当然, 如果你不想在全局中设置渲染的方式, 还可以使用基于 <code>API​​View</code> 的视图类来设置单个视图或视图集的渲染器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">UserCountView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns the count of active users in JSON.
    &quot;&quot;&quot;</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONRenderer<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再或者是在基于 <code>@api_view</code> 装饰器的函数视图上设置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>JSONRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">user_count_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns the count of active users in JSON.
    &quot;&quot;&quot;</span>
    user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用多种渲染器的时候, 默认使用的是下标为 <code>0</code> 的首选渲染器, 当然你可以在你的请求头中指定 <code>Accept</code>。</p>`,7),x={id:"渲染器类的优先级",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#渲染器类的优先级","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93%E5%99%A8%E7%B1%BB%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7",title:"渲染器类的优先级",target:"_blank",rel:"noopener noreferrer"},j=t("<p>在为 API 指定渲染器类时，需要考虑它们处理每种媒体类型时的优先级，这点很重要。如果客户端没有指定接受数据的表现形式，例如发送 <code>Accept：*/*</code> header，或者根本不包含 <code>Accept</code> header，则 REST framework 将选择列表中的第一个渲染器用于响应。</p><p>例如，如果你的 API 提供 JSON 响应和可浏览的 HTML API，则可能需要将 <code>JSONRenderer</code> 作为默认渲染器，以便将 <code>JSON</code> 响应发送给未指定 <code>Accept</code> header 的客户端。</p><p>如果你的 API 包含可根据请求同时处理常规网页和 API 响应的视图，那么你可以考虑将 <code>TemplateHTMLRenderer</code> 设置为默认渲染器，以便与发送 broken accept headers 的老式浏览器很好地配合使用。</p>",3),L={id:"api-参考",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),B={href:"http://drf.jiuyou.info/#/drf/renderers?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},P=t('<h3 id="渲染器罗列" tabindex="-1"><a class="header-anchor" href="#渲染器罗列" aria-hidden="true">#</a> 渲染器罗列</h3><table><thead><tr><th>渲染器类</th><th>渲染类型</th><th>说明</th></tr></thead><tbody><tr><td><code>JSONRenderer</code></td><td><code>application/json</code></td><td>将返回数据渲染成 JSON 数据样式, 并且你可以使用 <code>indent</code> 媒体类型参数制定你的缩进方式, 例如 <code>Accept: application/json; indent=4</code></td></tr><tr><td><code>TemplateHTMLRenderer</code></td><td><code>text/html</code></td><td>使用 Django 模板数据返回时, 将返回 HTML 类型数据, 并与其他返回数据不一样的是, 使用此渲染器返回数据不需要序列化, 但是在你创建并返回 Response 实例对象时需要制定 <code>template_name</code> 关键字参数</td></tr><tr><td><code>StaticHTMLRenderer</code></td><td><code>text/html</code></td><td>一个将渲染的 HTML 作为字符渲染的方式传递的渲染器</td></tr><tr><td><code>BrowsableAPIRenderer</code></td><td><code>text/html</code></td><td>将数据呈现为 Browsable API 的 HTML</td></tr><tr><td><code>AdminRenderer</code></td><td><code>text/html</code></td><td>该渲染器适用于 CRUD 样式的 WebAPI, 这些 API 也应提供用户友好的界面来管理数据</td></tr><tr><td><code>HTMLFormRenderer</code></td><td><code>text/html</code></td><td>将序列化数据呈现为 HTML, 次渲染器的输出不包含封闭的 <code>&lt;from&gt;</code> 标签以及隐藏的 CSRF 输入或任何提交按钮</td></tr><tr><td><code>MultiPartRenderer</code></td><td><code>multipart/form-data; boundary=BoUnDaRyStRiNg</code></td><td>该渲染器用于渲染 HTML 多部分表单数据, 它不适合用作响应渲染器, 而是用于使用 REST 框架的测试客户端和测试请求工厂创建测试请求</td></tr></tbody></table>',2),N={id:"jsonrenderer",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#jsonrenderer","aria-hidden":"true"},"#",-1),H={href:"http://drf.jiuyou.info/#/drf/renderers?id=jsonrenderer",title:"JSONRenderer",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>使用 utf-8 编码将请求数据呈现为 <code>JSON</code>。</p><p>请注意，默认风格包含 unicode 字符，并使用紧凑风格呈现（没有多余的空白）响应：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&quot;unicode black star&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;★&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span><span class="token number">999</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端可能还会包含 “缩进” media type 参数，在这种情况下，返回的 JSON 将会缩进。</p><p>比如： Accept: application/json; indent=4。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;unicode black star&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;★&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token number">999</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>UNICODE_JSON</code> 和 <code>COMPACT_JSON</code> 设置键可以更改默认的 JSON 编码风格。</p><p><strong>.media_type</strong>： <code>application/json</code></p><p><strong>.format</strong>： <code>&#39;.json&#39;</code></p><p><strong>.charset</strong>： <code>None</code></p>`,10),O={id:"templatehtmlrenderer",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#templatehtmlrenderer","aria-hidden":"true"},"#",-1),I={href:"http://drf.jiuyou.info/#/drf/renderers?id=templatehtmlrenderer",title:"TemplateHTMLRenderer",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>使用 Django 的标准模板将数据呈现为 HTML。与其他渲染器不同，传递给 <code>Response</code> 的数据不需要序列化。另外，创建 <code>Response</code> 时可能需要包含 <code>template_name</code> 参数。</p><p>TemplateHTMLRenderer 将创建一个 <code>RequestContext</code>，使用 <code>response.data</code> 作为上下文字典，并确定用于呈现上下文的模板名称。</p><p>模板名称由（按优先顺序）确定：</p><ol><li>传递给 response 的显式 <code>template_name</code> 参数。</li><li>在此类上设置明确的 <code>.template_name</code> 属性。</li><li>调用 <code>view.get_template_names()</code> 的返回结果。</li></ol><p>使用 <code>TemplateHTMLRenderer</code> 的视图示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns a templated HTML representation of a given user.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">object</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">}</span><span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;user_detail.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>TemplateHTMLRenderer</code> 来使 REST framework 返回常规 HTML 页面，或者从单个端点（a single endpoint）返回 HTML 和 API 响应。</p><p>如果你正在构建使用 <code>TemplateHTMLRenderer</code> 以及其他渲染器类的网站，则应考虑将 <code>TemplateHTMLRenderer</code> 列为 <code>renderer_classes</code> 列表中的第一个类，以便即使对于发送格式错误的 <code>ACCEPT:</code> header 的浏览器，也会优先考虑它。</p><p><strong>.media_type</strong>： <code>text/html</code></p><p><strong>.format</strong>： <code>&#39;.html&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p>`,11),C={id:"statichtmlrenderer",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#statichtmlrenderer","aria-hidden":"true"},"#",-1),X={href:"http://drf.jiuyou.info/#/drf/renderers?id=statichtmlrenderer",title:"StaticHTMLRenderer",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>一个简单的渲染器，它只是返回预渲染的 HTML。与其他渲染器不同，传递给响应对象的数据应该是表示要返回的内容的字符串。</p><p>使用 <code>StaticHTMLRenderer</code> 的视图示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>StaticHTMLRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">simple_html_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">&#39;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>StaticHTMLRenderer</code> 来使 REST framework 返回常规 HTML 页面，或者从单个端点（a single endpoint）返回 HTML 和 API 响应。</p><p><strong>.media_type</strong>： <code>text/html</code></p><p><strong>.format</strong>： <code>&#39;.html&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p>`,7),V={id:"browsableapirenderer",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#browsableapirenderer","aria-hidden":"true"},"#",-1),W={href:"http://drf.jiuyou.info/#/drf/renderers?id=browsableapirenderer",title:"BrowsableAPIRenderer",target:"_blank",rel:"noopener noreferrer"},K=t('<p>将数据呈现为可浏览的 HTML API：</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该渲染器将确定哪个其他渲染器被赋予最高优先级，并使用该渲染器在 HTML 页面中显示 API 风格响应。</p><p><strong>.media_type</strong>： <code>text/html</code></p><p><strong>.format</strong>： <code>&#39;.api&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p><p><strong>.template</strong>： <code>&#39;rest_framework/api.html&#39;</code></p><p><strong>自定义 BrowsableAPIRenderer</strong></p><p>默认情况下，除 <code>BrowsableAPIRenderer</code> 之外，响应内容将使用最高优先级的渲染器渲染。如果你需要自定义此行为，例如，将 HTML 用作默认返回格式，但在可浏览的 API 中使用 JSON，则可以通过覆盖 <code>get_default_renderer()</code> 方法来实现。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomBrowsableAPIRenderer</span><span class="token punctuation">(</span>BrowsableAPIRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_default_renderer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> JSONRenderer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),Y={id:"adminrenderer",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#adminrenderer","aria-hidden":"true"},"#",-1),Z={href:"http://drf.jiuyou.info/#/drf/renderers?id=adminrenderer",title:"AdminRenderer",target:"_blank",rel:"noopener noreferrer"},$=t('<p>将数据呈现为 HTML，以显示类似管理员的内容：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该渲染器适用于 CRUD 风格的 Web API，该 API 还应提供用于管理数据的用户友好界面。</p><p>请注意， <code>AdminRenderer</code> 对于嵌套或列出序列化输入的视图不起作用，因为 HTML 表单无法正确支持它们。</p><p><strong>注意</strong>：当数据中存在正确配置的 <code>URL_FIELD_NAME</code> （默认为 <code>url</code>）属性时， <code>AdminRenderer</code> 仅能够包含指向详细页面的链接。对于 <code>HyperlinkedModelSerializer</code> ，情况就是这样，但对于 <code>ModelSerializer</code> 类或普通 <code>Serializer</code> 类，你需要确保明确包含该字段。例如，在这里我们使用模型 <code>get_absolute_url</code> 方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;get_absolute_url&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.media_type</strong>： <code>text/html</code></p><p><strong>.format</strong>： <code>&#39;.admin&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p><p><strong>.template</strong>： <code>&#39;rest_framework/admin.html&#39;</code></p>`,10),nn={id:"htmlformrenderer",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#htmlformrenderer","aria-hidden":"true"},"#",-1),sn={href:"http://drf.jiuyou.info/#/drf/renderers?id=htmlformrenderer",title:"HTMLFormRenderer",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,[e("将序列化返回的数据呈现为 HTML 表单。该渲染器的输出不包含封闭的 "),n("code",null,"<form>"),e(" 标签，隐藏的 CSRF 输入或任何提交按钮。")],-1),tn=n("p",null,[e("这个渲染器不是直接使用，而是可以通过将一个序列化器实例传递给 "),n("code",null,"render_form"),e(" 模板标签来在模板中使用。")],-1),on={href:"https://link.juejin.cn/?target=https://www.django-rest-framework.org/topics/html-and-forms/",title:"HTML＆Forms 文档",target:"_blank",rel:"noopener noreferrer"},rn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token operator">%</span> load rest_framework <span class="token operator">%</span><span class="token punctuation">}</span>

<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">&quot;/submit-report/&quot;</span> method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> render_form serializer <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Save&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.media_type</strong>： <code>text/html</code></p><p><strong>.format</strong>： <code>&#39;.form&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p><p><strong>.template</strong>： <code>&#39;rest_framework/horizontal/form.html&#39;</code></p>`,5),pn={id:"multipartrenderer",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#multipartrenderer","aria-hidden":"true"},"#",-1),ln={href:"http://drf.jiuyou.info/#/drf/renderers?id=multipartrenderer",title:"MultiPartRenderer",target:"_blank",rel:"noopener noreferrer"},dn=t("<p>该渲染器用于呈现 HTML multipart form 数据。它不适合作为响应渲染器，而是用于创建测试请求，使用REST framework 的测试客户端和测试请求工厂。</p><p><strong>.media_type</strong>： <code>multipart/form-data; boundary=BoUnDaRyStRiNg</code></p><p><strong>.format</strong>： <code>&#39;.multipart&#39;</code></p><p><strong>.charset</strong>： <code>utf-8</code></p>",4),un={id:"自定义渲染器",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#自定义渲染器","aria-hidden":"true"},"#",-1),hn={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B8%B2%E6%9F%93%E5%99%A8",title:"自定义渲染器",target:"_blank",rel:"noopener noreferrer"},mn=t("<p>要实现自定义渲染器，您应该继承 <code>BaseRenderer</code> ，设置 <code>.media_type</code> 和 <code>.format</code> 属性，并实现 <code>.render(self, data, media_type=None, renderer_context=None)</code> 方法。</p><p>该方法应返回一个字符串，它将用作 HTTP 响应的主体。</p><p>传递给 <code>.render()</code> 方法的参数是：</p>",3),_n={id:"data",tabindex:"-1"},vn=n("a",{class:"header-anchor",href:"#data","aria-hidden":"true"},"#",-1),bn={href:"http://drf.jiuyou.info/#/drf/renderers?id=data",title:"data",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,[e("请求数据，由 "),n("code",null,"Response()"),e(" 实例化时设置。")],-1),gn={id:"media-type-none",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#media-type-none","aria-hidden":"true"},"#",-1),En={href:"http://drf.jiuyou.info/#/drf/renderers?id=media_typenone",title:"media_type=None",target:"_blank",rel:"noopener noreferrer"},An=n("p",null,"可选的。如果提供，这是接受的媒体类型，由内容协商（content negotiation）阶段确定。",-1),Rn=n("p",null,[e("依赖于客户端的 "),n("code",null,"Accept:"),e(" header，它可以比渲染器的 "),n("code",null,"media_type"),e(" 属性更具体，并且可能包含媒体类型参数。比如 "),n("code",null,'"application/json; nested=true"'),e(" 。")],-1),wn={id:"renderer-context-none",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#renderer-context-none","aria-hidden":"true"},"#",-1),Sn={href:"http://drf.jiuyou.info/#/drf/renderers?id=renderer_contextnone",title:"renderer_context=None",target:"_blank",rel:"noopener noreferrer"},Tn=n("p",null,"可选的。如果提供，它是视图提供的上下文信息字典。",-1),jn=n("p",null,[e("默认情况下，这将包括以下键："),n("code",null,"view"),e(" , "),n("code",null,"request"),e(" , "),n("code",null,"response"),e(" , "),n("code",null,"args"),e(" , "),n("code",null,"kwargs"),e(" 。")],-1),Ln={id:"举个栗子",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),Bn={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<p>以下是一个示例纯文本渲染器，它将返回带有数据参数的响应作为响应的内容。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>encoding <span class="token keyword">import</span> smart_unicode
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers


<span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Nn={id:"设置-charset",tabindex:"-1"},qn=n("a",{class:"header-anchor",href:"#设置-charset","aria-hidden":"true"},"#",-1),Hn={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E8%AE%BE%E7%BD%AE-charset",title:"设置 charset",target:"_blank",rel:"noopener noreferrer"},Fn=t(`<p>默认情况下，渲染器类被假定为使用 UTF-8 编码。要使用不同的编码，请在渲染器上设置 <code>charset</code> 属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>
    charset <span class="token operator">=</span> <span class="token string">&#39;iso-8859-1&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果渲染器类返回一个 unicode 字符串，则响应内容将被 <code>Response</code> 类强制为一个 bytestring，请在渲染器上设置 <code>charset</code> 属性用于确定编码。</p><p>如果渲染器返回代表原始二进制内容的字符串，则应将 <code>charset</code> 值设置为 <code>None</code>，这将确保响应的 <code>Content-Type</code> header 不会设置 <code>charset</code> 值。</p><p>在某些情况下，你可能还想将 <code>render_style</code> 属性设置为 <code>&#39;binary&#39;</code>。这样做也将确保可浏览的 API 不会尝试将二进制内容显示为字符串。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">JPEGRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;image/jpeg&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;jpg&#39;</span>
    charset <span class="token operator">=</span> <span class="token boolean">None</span>
    render_style <span class="token operator">=</span> <span class="token string">&#39;binary&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),On={id:"渲染器的高级用法",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#渲染器的高级用法","aria-hidden":"true"},"#",-1),In={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95",title:"渲染器的高级用法",target:"_blank",rel:"noopener noreferrer"},Dn=n("p",null,"你可以使用 REST framework 的渲染器来做一些非常灵活的事情。例如...",-1),Cn=n("ul",null,[n("li",null,"根据请求的 media type，提供来自同一端点的平面或嵌套（flat or nested）表示。"),n("li",null,"同时处理常规 HTML 网页和来自相同端点的基于 JSON 的 API 响应。"),n("li",null,"指定 API 客户端使用的多种 HTML 表示形式。"),n("li",null,[e("不用明确指定渲染器的 media type，例如使用 "),n("code",null,"media_type ='image/*'"),e("，并使用 "),n("code",null,"Accept"),e(" header 改变响应的编码。")])],-1),Un={id:"media-type-的变化",tabindex:"-1"},Xn=n("a",{class:"header-anchor",href:"#media-type-的变化","aria-hidden":"true"},"#",-1),zn={href:"http://drf.jiuyou.info/#/drf/renderers?id=media-type-%E7%9A%84%E5%8F%98%E5%8C%96",title:"media type 的变化",target:"_blank",rel:"noopener noreferrer"},Vn=t(`<p>在某些情况下，可能希望视图根据接受的 media type 使用不同的序列化风格。如果需要这样做，可以访问 <code>request.accepted_renderer</code> 以确定将用于响应的协商（negotiate）渲染器。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span> JSONRenderer<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">list_users</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that can return JSON or HTML representations
    of the users in the system.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Users<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>accepted_renderer<span class="token punctuation">.</span><span class="token builtin">format</span> <span class="token operator">==</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># TemplateHTMLRenderer takes a context dict,</span>
        <span class="token comment"># and additionally requires a &#39;template_name&#39;.</span>
        <span class="token comment"># It does not require serialization.</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> queryset<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;list_users.html&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># JSONRenderer requires serialized data as normal.</span>
    serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>queryset<span class="token punctuation">)</span>
    data <span class="token operator">=</span> serializer<span class="token punctuation">.</span>data
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Gn={id:"不明确的-media-type",tabindex:"-1"},Wn=n("a",{class:"header-anchor",href:"#不明确的-media-type","aria-hidden":"true"},"#",-1),Kn={href:"http://drf.jiuyou.info/#/drf/renderers?id=%E4%B8%8D%E6%98%8E%E7%A1%AE%E7%9A%84-media-type",title:"不明确的 media type",target:"_blank",rel:"noopener noreferrer"},Yn=t(`<p>在某些情况下，可能需要渲染器来提供一系列 media type 。在这种情况下，可以通过使用 <code>media_type</code> 值（如 <code>image/*</code>或<code>*/*</code>）来指定它应该响应的 media type 。</p><p>如果没有明确指定渲染器的 media type ，则应确保在返回响应时使用 <code>content_type</code> 属性明确指定 media type 。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Qn={id:"html-error-视图",tabindex:"-1"},Zn=n("a",{class:"header-anchor",href:"#html-error-视图","aria-hidden":"true"},"#",-1),$n={href:"http://drf.jiuyou.info/#/drf/renderers?id=html-error-%E8%A7%86%E5%9B%BE",title:"HTML error 视图",target:"_blank",rel:"noopener noreferrer"},ne=t(`<p>通常情况下，无论处理常规响应还是引发异常的响应（例如 <code>Http404</code> 或 <code>PermissionDenied</code> 异常）或 <code>APIException</code> 的子类引起的响应，渲染器都会有相同的表现。</p><p>如果您使用的是 <code>TemplateHTMLRenderer</code> 或 <code>StaticHTMLRenderer</code>，并且引发异常，则行为会稍有不同，反映了 Django 对错误视图的默认处理。</p><p>由 HTML 渲染器引发和处理的异常将尝试使用以下方法之一（按优先顺序）进行渲染。</p><ul><li>加载并渲染模板 <code>{status_code}.html</code>。</li><li>加载并渲染模板 <code>api_exception.html</code>。</li><li>渲染 HTTP 状态码和文本，例如 &quot;404 Not Found&quot;。</li></ul><p>模板将使用 <code>RequestContext</code> 进行渲染，其中包含 <code>status_code</code> 和 <code>details</code> 键。</p><blockquote><p>注意：如果 <code>DEBUG = True</code>，则会显示 Django 的标准错误回溯页面，而不是显示 HTTP 状态码和文本。</p></blockquote><h3 id="第三方组件" tabindex="-1"><a class="header-anchor" href="#第三方组件" aria-hidden="true">#</a> 第三方组件</h3><h4 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> djangorestframework-yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_yaml.parsers.YAMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_yaml.renderers.YAMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> djangorestframework-xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_xml.parsers.XMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_xml.renderers.XMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h4><p>警告： <br> 如果你需要跨域 AJAX 请求, 通常应该使用 CORS 的更现代方法作为的替代方法 JSONP, 而该方法本质上是一种浏览器黑客, 并且仅适用于全局可读的 API 端点, 在该端点中, GET 请求未经身份验证并且不需要任何用户权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> djangorestframework-jsonp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_jsonp.renderers.JSONPRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="messagepack" tabindex="-1"><a class="header-anchor" href="#messagepack" aria-hidden="true">#</a> MessagePack</h4>`,18),ee=n("code",null,"MessagePack",-1),se={href:"https://link.juejin.cn/?target=https://github.com/juanriaza",title:"Juan Riaza",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://link.juejin.cn/?target=https://github.com/wharton/drf-renderer-xlsx",title:"djangorestframework-msgpack",target:"_blank",rel:"noopener noreferrer"},te=n("h4",{id:"xlsx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#xlsx","aria-hidden":"true"},"#"),e(" XLSX")],-1),oe={href:"https://link.juejin.cn/?target=https://github.com/wharton",title:"The Wharton School",target:"_blank",rel:"noopener noreferrer"},re={href:"https://link.juejin.cn/?target=https://github.com/flipperpa",title:"Tim Allen",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://link.juejin.cn/?target=https://github.com/wharton/drf-renderer-xlsx",title:"drf-renderer-xlsx",target:"_blank",rel:"noopener noreferrer"},ie=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> drf-renderer-xlsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.BrowsableAPIRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;drf_renderer_xlsx.renderers.XLSXRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免流传输的文件没有文件名(浏览器通常将其默认为没有扩展名的 <code>download</code>), 我们需要使用 <code>mixin</code> 覆盖 <code>Content-Disposition标头</code>, 如果未提供文件名则默认为 <code>medusa.xlsx</code>, 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ReadOnlyModelViewSet
<span class="token keyword">from</span> drf_renderer_xlsx<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> XLSXFileMixin
<span class="token keyword">from</span> drf_renderer_xlsx<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> XLSXRenderer

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> MyExampleModel
<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> MyExampleSerializer

<span class="token keyword">class</span> <span class="token class-name">MyExampleViewSet</span><span class="token punctuation">(</span>XLSXFileMixin<span class="token punctuation">,</span> ReadOnlyModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> MyExampleModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MyExampleSerializer
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">[</span>XLSXRenderer<span class="token punctuation">]</span>
    filename <span class="token operator">=</span> <span class="token string">&#39;medusa.xlsx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="csv" tabindex="-1"><a class="header-anchor" href="#csv" aria-hidden="true">#</a> CSV</h4>`,5),ce={href:"https://link.juejin.cn/?target=https://github.com/mjumbewu",title:"Mjumbe Poe",target:"_blank",rel:"noopener noreferrer"},le={href:"https://link.juejin.cn/?target=https://github.com/mjumbewu/django-rest-framework-csv",title:"djangorestframework-csv",target:"_blank",rel:"noopener noreferrer"},de=n("h4",{id:"ultrajson",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ultrajson","aria-hidden":"true"},"#"),e(" UltraJSON")],-1),ue=n("code",null,"UltraJSON",-1),ke=n("code",null,"C JSON",-1),he={href:"https://link.juejin.cn/?target=https://github.com/hzy",title:"Jacob Haslehurst",target:"_blank",rel:"noopener noreferrer"},me={href:"https://link.juejin.cn/?target=https://github.com/gizmag/drf-ujson-renderer",title:"drf-ujson-renderer",target:"_blank",rel:"noopener noreferrer"},_e=n("h4",{id:"pandas-csv-excel-png",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pandas-csv-excel-png","aria-hidden":"true"},"#"),e(" Pandas (CSV, Excel, PNG)")],-1),ve={href:"https://link.juejin.cn/?target=https://github.com/wq/django-rest-pandas",title:"Django REST Pandas",target:"_blank",rel:"noopener noreferrer"},be={href:"https://link.juejin.cn/?target=https://pandas.pydata.org/",title:"Pandas DataFrame API",target:"_blank",rel:"noopener noreferrer"},fe=n("code",null,"Django REST Pandas",-1),ge=n("code",null,"Pandas",-1),ye=n("code",null,"CSV",-1),Ee=n("code",null,"Excel",-1),Ae=n("code",null,".xls",-1),Re=n("code",null,".xlsx",-1),we={href:"https://link.juejin.cn/?target=https://github.com/sheppard",title:"S. Andrew Sheppard",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://link.juejin.cn/?target=https://github.com/wq",title:"wq Project",target:"_blank",rel:"noopener noreferrer"},Se=n("h4",{id:"latex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#latex","aria-hidden":"true"},"#"),e(" LaTeX")],-1),Te={href:"https://link.juejin.cn/?target=https://github.com/mypebble/rest-framework-latex",title:"Rest Framework Latex",target:"_blank",rel:"noopener noreferrer"},je=n("code",null,"Laulatex",-1),Le=n("code",null,"PDF",-1),Me={href:"https://link.juejin.cn/?target=https://github.com/mypebble",title:"Pebble (S/F Software)",target:"_blank",rel:"noopener noreferrer"};function Be(Pe,Ne){const s=r("ExternalLinkIcon");return p(),i("div",null,[u,n("blockquote",null,[n("p",null,[n("a",k,[e("官方原文链接"),a(s)])])]),n("h2",h,[m,e(),n("a",_,[e("渲染"),a(s)])]),v,n("h3",b,[f,e(),n("a",g,[e("如何确定使用哪个渲染器"),a(s)])]),y,n("h3",E,[A,e(),n("a",R,[e("设置渲染器"),a(s)])]),w,n("h3",x,[S,e(),n("a",T,[e("渲染器类的优先级"),a(s)])]),j,n("h2",L,[M,e(),n("a",B,[e("API 参考"),a(s)])]),P,n("h3",N,[q,e(),n("a",H,[e("JSONRenderer"),a(s)])]),F,n("h3",O,[J,e(),n("a",I,[e("TemplateHTMLRenderer"),a(s)])]),D,n("h3",C,[U,e(),n("a",X,[e("StaticHTMLRenderer"),a(s)])]),z,n("h3",V,[G,e(),n("a",W,[e("BrowsableAPIRenderer"),a(s)])]),K,n("h3",Y,[Q,e(),n("a",Z,[e("AdminRenderer"),a(s)])]),$,n("h3",nn,[en,e(),n("a",sn,[e("HTMLFormRenderer"),a(s)])]),an,tn,n("p",null,[e("render_form 模板标签在模板中使用, 参考 "),n("a",on,[e("HTML＆Forms 文档"),a(s)]),e("：")]),rn,n("h3",pn,[cn,e(),n("a",ln,[e("MultiPartRenderer"),a(s)])]),dn,n("h2",un,[kn,e(),n("a",hn,[e("自定义渲染器"),a(s)])]),mn,n("h3",_n,[vn,e(),n("a",bn,[e("data"),a(s)])]),fn,n("h3",gn,[yn,e(),n("a",En,[e("media_type=None"),a(s)])]),An,Rn,n("h3",wn,[xn,e(),n("a",Sn,[e("renderer_context=None"),a(s)])]),Tn,jn,n("h3",Ln,[Mn,e(),n("a",Bn,[e("举个栗子"),a(s)])]),Pn,n("h3",Nn,[qn,e(),n("a",Hn,[e("设置 charset"),a(s)])]),Fn,n("h2",On,[Jn,e(),n("a",In,[e("渲染器的高级用法"),a(s)])]),Dn,Cn,n("h3",Un,[Xn,e(),n("a",zn,[e("media type 的变化"),a(s)])]),Vn,n("h3",Gn,[Wn,e(),n("a",Kn,[e("不明确的 media type"),a(s)])]),Yn,n("h3",Qn,[Zn,e(),n("a",$n,[e("HTML error 视图"),a(s)])]),ne,n("p",null,[ee,e(" 是一种快速高效的二进制序列化格式, "),n("a",se,[e("Juan Riaza"),a(s)]),e(" 维护 "),n("a",ae,[e("djangorestframework-msgpack"),a(s)]),e(" 软件包, 该软件包为 REST 框架提供 MessagePack 渲染器和解析器支持。")]),te,n("p",null,[e("XLSX 是世界上最受欢迎的二进制电子表格格式, "),n("a",oe,[e("The Wharton School"),a(s)]),e(" 的 "),n("a",re,[e("Tim Allen"),a(s)]),e(" 维护着 "),n("a",pe,[e("drf-renderer-xlsx"),a(s)]),e(", 这使得端点使用 OpenPyXL 作为一个 XLSX 的电子表格, 并允许客户端下载。可以基于每个视图设置电子表格的样式。")]),ie,n("p",null,[e("逗号分隔的值是纯文本格式的表格数据格式, 可以轻松地导入电子表格应用程序中, "),n("a",ce,[e("Mjumbe Poe"),a(s)]),e(" 维护 "),n("a",le,[e("djangorestframework-csv"),a(s)]),e(" 软件包, 该软件包为 REST 框架提供 CSV 渲染器支持。")]),de,n("p",null,[ue,e(" 是经过优化的 "),ke,e(" 编码器, 可以显着加快 JSON 渲染速度, "),n("a",he,[e("Jacob Haslehurst"),a(s)]),e(" 维护了 "),n("a",me,[e("drf-ujson-renderer"),a(s)]),e(" 软件包, 该软件包使用 UJSON 软件包实现 JSON 呈现。")]),_e,n("p",null,[n("a",ve,[e("Django REST Pandas"),a(s)]),e(" 提供了序列化器和渲染器, 它们支持通过 "),n("a",be,[e("Pandas DataFrame API"),a(s)]),e(" 进行其他数据处理和输出, "),fe,e(" 包括用于 "),ge,e(" 样式 "),ye,e(" 文件、"),Ee,e("工作簿(包括 "),Ae,e(" 和 "),Re,e(")以及许多其他格式的渲染器, 它由 "),n("a",we,[e("S. Andrew Sheppard"),a(s)]),e(" 作为 "),n("a",xe,[e("wq Project"),a(s)]),e(" 的一部分进行维护。")]),Se,n("p",null,[n("a",Te,[e("Rest Framework Latex"),a(s)]),e(" 提供了一个渲染器, 该渲染器使用 "),je,e(" 输出 "),Le,e(", 它由 "),n("a",Me,[e("Pebble (S/F Software)"),a(s)]),e(" 维护。")])])}const Fe=o(d,[["render",Be],["__file","Rest-framework专栏讲解(十)：Renderers.html.vue"]]);export{Fe as default};
