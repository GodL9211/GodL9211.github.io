import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as n,b as c,e as i,f as s}from"./app-d1a619f2.js";const l={},d=s(`<h2 id="for-loop和迭代器" tabindex="-1"><a class="header-anchor" href="#for-loop和迭代器" aria-hidden="true">#</a> for loop和迭代器</h2><p>在Python中，for循环是一种常用的迭代结构，用于遍历<code>可迭代对象</code>中的元素。迭代器是一种特殊的对象，它实现了迭代协议，允许按照一定的顺序逐个访问元素。</p><p>for循环和迭代器之间存在密切的关系，实际上，for循环是基于迭代器工作的。当使用for循环遍历可迭代对象时，Python会在内部自动创建一个迭代器对象，并使用该迭代器来逐个获取元素，直到所有元素都被访问完毕。</p><blockquote><p>for loop里面in后面那个东西必须是一个iterable, 也就是必须是一个可迭代对象。</p></blockquote><p>下面是一个示例，演示了for循环和迭代器之间的关系：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 使用for循环遍历列表元素</span>
<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>

<span class="token comment"># 上述代码等价于下面的迭代器方式</span>
iterator <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment"># 创建迭代器对象</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        fruit <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span>  <span class="token comment"># 获取下一个元素</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们首先使用for循环遍历了列表<code>fruits</code>中的元素，打印出每个水果的名称。然后，我们手动创建了一个迭代器对象<code>iterator</code>，并使用<code>next()</code>函数逐个获取元素，直到遇到<code>StopIteration</code>异常，表示所有元素都被访问完毕。</p><p>可以看到，使用for循环可以简化迭代过程，不需要显式地创建迭代器对象和处理<code>StopIteration</code>异常。Python的许多内置对象（如列表、元组、字典等）都是可迭代的，因此可以直接在for循环中使用它们。</p><p><strong>列表</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字典</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件操作</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了内置的可迭代对象，你还可以自定义迭代器类，实现自己的迭代逻辑。这样，你就可以在for循环中使用自定义的迭代器来遍历特定的数据结构或实现特定的迭代行为。</p><blockquote><p>for loop的背后核心是<code>迭代器</code>和<code>可迭代对象</code>。</p></blockquote><h2 id="迭代器和可迭代对象" tabindex="-1"><a class="header-anchor" href="#迭代器和可迭代对象" aria-hidden="true">#</a> 迭代器和可迭代对象</h2>`,17),r={href:"https://docs.python.org/3/glossary.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>在Python中，可迭代对象和迭代器是两个相关但不同的概念。</p><p><code>可迭代对象（Iterable）</code>是指实现了<code>__iter__()</code>方法的对象，或者实现了<code>__getitem__()</code>方法且可按照顺序访问的对象。<code>这两者都是为了保证它可以在iter这个函数的作用下返回一个iterator</code>。可迭代对象可以被迭代，也就是可以在for循环中使用。常见的可迭代对象包括列表、元组、字符串、字典、集合等。</p><p><code>迭代器（Iterator）</code>是一种特殊的对象，它实现了迭代协议，具有<code>__iter__()</code>和<code>__next__()</code>方法。迭代器用于逐个返回可迭代对象中的元素，每次调用<code>__next__()</code>方法都会返回下一个元素，如果没有更多元素，则引发<code>StopIteration</code>异常。迭代器对象还可以在迭代过程中记录迭代状态。</p><p>每当使用for循环来遍历一个可迭代对象时，Python会在内部自动创建一个迭代器对象，并调用其<code>__next__()</code>方法来逐个获取元素。因此，可以说for循环是基于迭代器工作的。</p><p>下面是一个示例，演示了可迭代对象和迭代器的概念：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># fruits是可迭代对象，可以在for循环中使用</span>
<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>

<span class="token comment"># 创建迭代器对象</span>
iterator <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>

<span class="token comment"># 调用迭代器的__next__()方法获取下一个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：&#39;apple&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：&#39;banana&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：&#39;orange&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 引发StopIteration异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>fruits</code>是一个可迭代对象，我们可以直接在for循环中使用它来遍历元素。同时，我们也可以使用<code>iter()</code>函数手动将可迭代对象转换为迭代器对象，并使用<code>next()</code>函数来逐个获取元素。当所有元素都被访问完毕时，继续调用<code>next()</code>函数会引发<code>StopIteration</code>异常。</p><p>需要注意的是，迭代器是一种一次性的对象，即在迭代过程中，一旦迭代器返回了所有元素，它就会耗尽，无法再次使用。如果想重新遍历可迭代对象，需要重新创建迭代器对象。</p><blockquote><ul><li>一个iterable更像是一个数据的保存者，一个container，它是可以没有状态的，它可以完全不知道你这个iterator数到哪了，它需要有能力产生一个iterator。</li><li>iterator一定是有状态的，但是它并不需要实现一个container，它当然内部肯定知道它代表这个iterable里面是什么数据。iterator必须要有<code>__next__</code>这个method。这个method保证它在被next作用的时候可以返回下一个iterable。</li></ul></blockquote><h2 id="自定义一个可迭代对象和对应的迭代器-链表" tabindex="-1"><a class="header-anchor" href="#自定义一个可迭代对象和对应的迭代器-链表" aria-hidden="true">#</a> 自定义一个可迭代对象和对应的迭代器-链表</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#! -*-conding=: UTF-8 -*-</span>
<span class="token comment"># 2023/5/22 18:43</span>

<span class="token keyword">class</span> <span class="token class-name">NodeIter</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>curr_node <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>curr_node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>curr_node <span class="token operator">=</span> self<span class="token punctuation">.</span>curr_node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> node


<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> NodeIter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>


node1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node1&quot;</span><span class="token punctuation">)</span>
node2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node2&quot;</span><span class="token punctuation">)</span>
node3 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node3&quot;</span><span class="token punctuation">)</span>

node1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node2
node2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node3


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> node1<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想在for loop里面使用链表的话,那我们就要自己把链表变成一个iterable。</p><p>这段代码演示了如何自定义一个可迭代对象和对应的迭代器。</p><p>首先，我们定义了一个<code>Node</code>类，表示一个节点，每个节点具有一个名称和一个指向下一个节点的引用。<code>Node</code>类实现了<code>__iter__()</code>方法，该方法返回一个迭代器对象。</p><p>然后，我们定义了一个<code>NodeIter</code>类作为迭代器，它接收一个节点对象作为参数，并在<code>__init__()</code>方法中初始化当前节点。<code>NodeIter</code>类实现了<code>__next__()</code>方法，用于返回下一个节点。在每次调用<code>__next__()</code>方法时，它会将当前节点作为结果返回，并将当前节点更新为下一个节点。当没有更多节点时，抛出<code>StopIteration</code>异常。</p><p>最后，在<code>if __name__ == &#39;__main__&#39;:</code>条件下，我们使用自定义的可迭代对象和迭代器进行遍历。通过<code>for node in node1:</code>的语法，会自动调用<code>node1</code>对象的<code>__iter__()</code>方法获取迭代器，并通过迭代器逐个获取节点，并打印节点的名称。</p><p>运行以上代码，输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>node1
node2
node3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例展示了如何自定义可迭代对象和迭代器，并在for循环中使用它们实现自定义的迭代逻辑。</p><blockquote><p>喜欢这篇文章的话，可以关注一下我的公众号『<strong>海哥python</strong>』</p></blockquote>`,20);function k(v,m){const a=t("ExternalLinkIcon");return o(),p("div",null,[d,n("blockquote",null,[n("p",null,[n("a",r,[c("https://docs.python.org/3/glossary.html"),i(a)])])]),u])}const f=e(l,[["render",k],["__file","对迭代器一知半解？.html.vue"]]);export{f as default};
