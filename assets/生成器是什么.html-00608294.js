import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-967d79b2.js";const p={},o=e(`<h2 id="生成器是什么" tabindex="-1"><a class="header-anchor" href="#生成器是什么" aria-hidden="true">#</a> 生成器是什么？</h2><p>在Python中，生成器（Generator）是一种特殊类型的函数，它可以用于迭代（iteration）操作。</p><p>生成器函数使用关键字<code>yield</code>而不是<code>return</code>来返回值，这使得它能够在每次迭代时产生一个值，并在下一次迭代时继续执行。生成器在每次迭代中只计算并返回一个值，这样可以有效地节省内存空间。</p><p>生成器函数的结构类似于普通函数，但其特点是在执行过程中会暂停并保存当前的状态，等待下一次迭代时继续执行。生成器可以通过<code>yield</code>语句返回一个值，并且可以使用<code>for</code>循环或者<code>next()</code>函数来迭代生成器中的值。</p><h2 id="创建生成器的方式" tabindex="-1"><a class="header-anchor" href="#创建生成器的方式" aria-hidden="true">#</a> 创建生成器的方式？</h2><p>创建生成器的方式有两种：</p><ol><li>通过 <strong>生成器表达式</strong></li><li>通过 <strong>生成器函数</strong></li></ol><p><strong>生成器表达式</strong><br> 简单快捷，足以胜任简单的生成器创建工作，其形式和 <strong>列表推导式</strong> 类似，只不过将中括号 <code>[]</code> 替换成了小括号 <code>()</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: generator <span class="token operator">=</span> <span class="token punctuation">(</span>x * x <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">))</span>

In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: type<span class="token punctuation">(</span>generator<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: generator

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: lst <span class="token operator">=</span> <span class="token punctuation">[</span>x * x <span class="token keyword">for</span> <span class="token for-or-select variable">x</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: type<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成器函数</strong><br> 要让一个 <strong>函数</strong> 成为 <strong>生成器函数</strong> 很简单，只需要将函数中的 <code>return</code> 替换为 <code>yield</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> b
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span>
        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token string">&#39;done&#39;</span>


f <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;generator&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成器函数中，每次执行到 <code>yield</code> 语句就会返回，再次执行时从上次返回的 <code>yield</code> 语句处继续执行。</p><h2 id="生成器和迭代器有什么关系" tabindex="-1"><a class="header-anchor" href="#生成器和迭代器有什么关系" aria-hidden="true">#</a> 生成器和迭代器有什么关系？</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Generator
<span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterator

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>Generator<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>Generator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 生成器有三个专属方法 {&#39;throw&#39;, &#39;close&#39;, &#39;send&#39;}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>生成器</code>和<code>迭代器</code>在 Python 中有密切的关系，可以说<code>生成器是一种特殊类型的迭代器</code>。</p><p>迭代器（Iterator）是一个对象，它实现了迭代协议，即具有<code>__iter__()</code>和<code>__next__()</code>方法。迭代器可以使用<code>iter()</code>函数进行迭代，并使用<code>next()</code>函数获取下一个元素。迭代器每次返回一个值，并在迭代过程中记录自身的状态。</p><p>生成器是一种特殊的迭代器，可以通过生成器函数创建。生成器函数使用<code>yield</code>语句来产生值，每次调用生成器的<code>next()</code>方法时，生成器会执行并返回<code>yield</code>语句产生的值，然后暂停保存状态。这意味着生成器具有迭代器的所有特性，可以被<code>for</code>循环和<code>next()</code>函数使用。</p><p>迭代器是一种更通用的概念，它可以通过实现迭代协议来创建。而<code>生成器是一种特殊类型的迭代器</code>，它通过生成器函数的方式来创建，并具有延迟计算和状态保存的特性。因此，可以说生成器是迭代器的一种实现方式，是迭代器的一种特例。</p><h2 id="生成器有什么用" tabindex="-1"><a class="header-anchor" href="#生成器有什么用" aria-hidden="true">#</a> 生成器有什么用？</h2><p>生成器具有以下特点：</p><ol><li>延迟计算：生成器是惰性计算的，它们在需要时才生成值，可以逐个地生成并处理数据。这样可以节省内存，并且在处理大量数据或者无限序列时非常高效。</li><li>状态保存：生成器能够保存自身的状态，每次调用<code>next()</code>方法时从上次暂停的地方继续执行。这使得生成器能够处理需要记住状态或上下文的任务。</li><li>简洁性：使用生成器函数可以以一种简洁的方式实现迭代器，并且代码可读性较高。</li></ol><h3 id="生成器函数和生成器对象" tabindex="-1"><a class="header-anchor" href="#生成器函数和生成器对象" aria-hidden="true">#</a> 生成器函数和生成器对象</h3><p>前面我们已经了解了什么是生成器，以及如何创建生成器。这里我们看下生成器比较容易混淆的两个概念和生成器的运行原理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> num
        num <span class="token operator">-=</span> <span class="token number">1</span>
   <span class="token keyword">return</span> <span class="token number">100</span>
   
<span class="token comment"># 使用生成器函数创建生成器对象</span>
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
first <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>

<span class="token comment"># 迭代生成器中的值</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>gen(num)</code>是生成器函数。</li><li><code>g = gen(num)</code>，<code>调用生成器函数得到生成器对象</code>，即<code>g</code>是生成器对象。</li></ul><p>在给定的代码中，定义了一个生成器函数<code>gen(num)</code>，它使用<code>yield</code>语句产生从<code>num</code>到1的倒序序列。当<code>num</code>大于0时，通过<code>yield</code>语句返回<code>num</code>的值，并在下一次迭代时继续执行。当<code>num</code>小于等于0时，生成器函数会执行完毕并返回值<code>100</code>。</p><p>下面是代码的执行过程：</p><ol><li>创建生成器对象<code>g</code>，并将<code>num</code>参数设为5。</li><li>调用<code>next(g)</code>，生成器开始执行，进入循环。</li><li><code>yield num</code>语句产生值<code>5</code>，并将生成器暂停。此时<code>first</code>变量被赋值为<code>5</code>。</li><li>开始<code>for</code>循环迭代生成器<code>g</code>，从下一次迭代开始，即<code>num</code>为<code>4</code>。</li><li>在每次迭代中，<code>yield num</code>语句产生当前的<code>num</code>值，并将生成器暂停。被产生的值依次为<code>4</code>、<code>3</code>、<code>2</code>、<code>1</code>。</li><li>当<code>num</code>变为<code>0</code>时，生成器函数执行完毕，返回值<code>100</code>。</li><li><code>for</code>循环结束，没有更多的值可迭代。</li></ol><p>因此，代码的输出结果将是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">4</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>return</code>语句在生成器函数中不会被执行，因为生成器的返回值是由<code>yield</code>语句产生的值决定的，而不是通过<code>return</code>语句返回的。在这个例子中，<code>return 100</code>语句不会影响生成器的输出结果。</p><blockquote><p>在进行若干次之后, 这个时候它会运行这个return, 由于它(return)是在生成器函数里面了, 所以return等价于raise stop iteration。</p><p>这个return不管你有没有return值，它都不会在你调用next的时候被返回回去。如果你想拿到这个return value的话，你需要去catch那个stop iteration的exception。</p></blockquote><p>生成器在处理大量数据或者无限序列时非常有用，因为它们可以逐个生成并处理数据，而不需要一次性将所有数据加载到内存中。这种惰性计算的特性使得生成器在处理大型数据集或者需要逐步计算的任务时具有很高的效率。</p><h3 id="改写迭代器版链表遍历" tabindex="-1"><a class="header-anchor" href="#改写迭代器版链表遍历" aria-hidden="true">#</a> 改写<code>迭代器版链表遍历</code></h3><p><strong>迭代器版链表迭代</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#! -*-conding=: UTF-8 -*-</span>
<span class="token comment"># 2023/5/22 18:43</span>

<span class="token keyword">class</span> <span class="token class-name">NodeIter</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>curr_node <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>curr_node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>curr_node <span class="token operator">=</span> self<span class="token punctuation">.</span>curr_node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> node


<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> NodeIter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>


node1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node1&quot;</span><span class="token punctuation">)</span>
node2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node2&quot;</span><span class="token punctuation">)</span>
node3 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node3&quot;</span><span class="token punctuation">)</span>

node1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node2
node2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node3


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> node1<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成器版链表迭代</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#! -*-conding=: UTF-8 -*-</span>
<span class="token comment"># 2023/5/22 18:43</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> self
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> node
            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>


node1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node1&quot;</span><span class="token punctuation">)</span>
node2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node2&quot;</span><span class="token punctuation">)</span>
node3 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;node3&quot;</span><span class="token punctuation">)</span>

node1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node2
node2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node3


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> node1<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表本身的iterator，把这个node变成了一个iterable, 这一次我们也是想把这个node变成iterable。但是这个iter函数我们直接把它做成一个生成器，也就是当你做iter node的时候，它返回的是一个generator object。</p><blockquote><p>某些情况下，生成器实现的链表相比迭代器版是不是清爽简洁多了。</p></blockquote><h2 id="生成器对象" tabindex="-1"><a class="header-anchor" href="#生成器对象" aria-hidden="true">#</a> 生成器对象</h2><p>生成器的完整名称应该是<strong>生成器对象</strong>, 既然是一个对象，那么自然有 <strong>方法</strong> 和 <strong>属性</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">help</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
Help on generator <span class="token builtin">object</span><span class="token punctuation">:</span>
<span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">generator</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>  Methods defined here<span class="token punctuation">:</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  __del__<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  __getattribute__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      Return <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  __iter__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      Implement <span class="token builtin">iter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  __next__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      Implement <span class="token builtin">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  __repr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      Return <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  close<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> GeneratorExit inside generator<span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  send<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      send<span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> send <span class="token string">&#39;arg&#39;</span> into generator<span class="token punctuation">,</span>
 <span class="token operator">|</span>      <span class="token keyword">return</span> <span class="token builtin">next</span> yielded value <span class="token keyword">or</span> <span class="token keyword">raise</span> StopIteration<span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  throw<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>      throw<span class="token punctuation">(</span>typ<span class="token punctuation">[</span><span class="token punctuation">,</span>val<span class="token punctuation">[</span><span class="token punctuation">,</span>tb<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> exception <span class="token keyword">in</span> generator<span class="token punctuation">,</span>
 <span class="token operator">|</span>      <span class="token keyword">return</span> <span class="token builtin">next</span> yielded value <span class="token keyword">or</span> <span class="token keyword">raise</span> StopIteration<span class="token punctuation">.</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
 <span class="token operator">|</span>  Data descriptors defined here<span class="token punctuation">:</span>
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  gi_code
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  gi_frame
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  gi_running
 <span class="token operator">|</span>  
 <span class="token operator">|</span>  gi_yieldfrom
 <span class="token operator">|</span>      <span class="token builtin">object</span> being iterated by <span class="token keyword">yield</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="send方法" tabindex="-1"><a class="header-anchor" href="#send方法" aria-hidden="true">#</a> send方法</h3><p><code>send()</code>函数是用于与生成器进行交互的一种方法。它允许在生成器的每次暂停（yield）点发送值，并且该值将成为<code>yield</code>表达式的结果。</p><p>下面是关于<code>send()</code>函数的一些重要事项：</p><ol><li><code>yield</code>语句：<code>yield</code>语句是生成器函数中的特殊语句，它用于生成值并将生成器暂停。当生成器执行到<code>yield</code>语句时，它会产生一个值，并将该值返回给调用方。同时，生成器会保留它的状态，以便在下一次迭代时从暂停的地方继续执行。</li><li><code>send()</code>函数：<code>send()</code>函数用于向生成器发送值，并恢复生成器的执行。它的语法为<code>generator.send(value)</code>，其中<code>generator</code>是生成器对象，<code>value</code>是要发送给生成器的值。<code>send()</code>函数会将值发送给生成器，并将该值作为<code>yield</code>表达式的结果。同时，生成器会从上一次暂停的地方继续执行，并执行到下一个<code>yield</code>语句或函数结束。</li></ol><p>需要注意的是，当首次调用生成器时，必须使用<code>next()</code>函数来启动生成器，或者使用<code>send(None)</code>，将<code>None</code>作为参数发送给生成器。这是因为生成器在第一次调用时需要被激活，以准备接收来自<code>send()</code>函数的值。</p><p><strong>send不接收</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> num
        num <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token keyword">return</span> <span class="token number">100</span>


<span class="token comment"># 使用生成器函数创建生成器对象</span>
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
first <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>  <span class="token comment"># first =g.send(none)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;first: </span><span class="token interpolation"><span class="token punctuation">{</span>first<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;first: </span><span class="token interpolation"><span class="token punctuation">{</span>g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 迭代生成器中的值</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>first: <span class="token number">2</span>
first: <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>yield num</code>没有被赋值给任何东西，<code>g.send(5)</code>相当于被扔掉了。</p></blockquote><p><strong>send接收</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        tmp <span class="token operator">=</span> <span class="token keyword">yield</span> num
        <span class="token keyword">if</span> tmp <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> tmp
        num <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token number">100</span>


<span class="token comment"># 使用生成器函数创建生成器对象</span>
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
first <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>  <span class="token comment"># first =g.send(none)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;first: </span><span class="token interpolation"><span class="token punctuation">{</span>first<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;send: </span><span class="token interpolation"><span class="token punctuation">{</span>g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 迭代生成器中的值</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>first: <span class="token number">2</span>
send: <span class="token number">4</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close方法" tabindex="-1"><a class="header-anchor" href="#close方法" aria-hidden="true">#</a> close方法</h3><p>生成器对象的<code>close()</code>方法用于关闭生成器。调用<code>close()</code>方法后，生成器会抛出一个<code>GeneratorExit</code>异常，表示生成器已关闭。</p><p>关闭生成器有以下几个效果:</p><ul><li>当生成器在执行过程中遇到<code>yield</code>语句时，会抛出<code>GeneratorExit</code>异常，可以在生成器内部通过捕获该异常来执行一些清理操作。</li><li>后续对生成器的迭代操作会立即停止，不会再产生新的值。</li><li>如果生成器函数定义了<code>finally</code>语句块，那么在生成器关闭时，<code>finally</code>语句块中的代码会被执行。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> i
    <span class="token keyword">except</span> GeneratorExit<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;close generator&#39;</span><span class="token punctuation">)</span>


g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>

g<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span>
close generator
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;F:/study/pythonProjects/ss.py&quot;</span>, line <span class="token number">15</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    print<span class="token punctuation">(</span>next<span class="token punctuation">(</span>g<span class="token punctuation">))</span>
StopIteration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="throw方法" tabindex="-1"><a class="header-anchor" href="#throw方法" aria-hidden="true">#</a> throw方法</h3><p>生成器提供了一个<code>throw()</code>方法，允许在生成器内部引发一个指定的异常。</p><p><code>throw()</code>方法的语法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>generator<span class="token punctuation">.</span>throw<span class="token punctuation">(</span>exception<span class="token punctuation">[</span><span class="token punctuation">,</span> traceback<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>exception</code>参数是要引发的异常对象。</li><li><code>traceback</code>参数是可选的，用于指定异常的回溯信息（traceback）。</li></ul><p>当调用<code>generator.throw()</code>方法时，生成器会在当前的<code>yield</code>表达式上引发指定的异常。然后，异常会在生成器的当前位置被捕获，可以通过使用<code>try</code>/<code>except</code>语句来处理异常。</p><p>下面是一个示例代码，演示了生成器的<code>throw()</code>方法的使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token number">1</span>
        <span class="token keyword">yield</span> <span class="token number">2</span>
        <span class="token keyword">yield</span> <span class="token number">3</span>
    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Caught exception: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

gen <span class="token operator">=</span> my_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 2</span>

gen<span class="token punctuation">.</span>throw<span class="token punctuation">(</span>ValueError<span class="token punctuation">(</span><span class="token string">&quot;Custom exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 引发异常，并在生成器内部捕获</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>my_generator()</code>函数是一个生成器函数，它会生成数值 1、2 和 3。在生成器中，我们使用了<code>try</code>/<code>except</code>语句来捕获<code>ValueError</code>异常。当调用<code>gen.throw()</code>方法并传递一个<code>ValueError</code>异常时，生成器会在当前的<code>yield</code>表达式上引发该异常，并在生成器内部捕获。</p><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>
<span class="token number">2</span>
Caught exception: Custom exception
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在生成器捕获异常后，生成器会继续执行后续的<code>yield</code>表达式。在上述示例中，即使引发了异常，<code>yield 3</code>语句仍然会被执行，并返回最后一个值 3。</p><blockquote><p>它的实现手段是通过向生成器对象在上次被挂起处，抛出一个异常。之后会继续执行生成器对象中后面的语句，直至遇到下一个yield语句返回。如果在生成器对象方法执行完毕后，依然没有遇到yield语句，抛出StopIteration异常。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><blockquote><p>生成器是一种特殊的迭代器（注意这个逻辑关系反之不成立）。使用生成器，你可以写出来更加清晰的代码；合理使用生成器，可以降低内存占用、优化程序结构、提高程序速度。</p></blockquote><hr><blockquote><p>喜欢这篇文章的话，可以关注一下我的公众号『<strong>海哥python</strong>』</p></blockquote>`,81),t=[o];function c(l,i){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","生成器是什么.html.vue"]]);export{d as default};
