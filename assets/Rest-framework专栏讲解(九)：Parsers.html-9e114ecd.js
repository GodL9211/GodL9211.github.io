import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c as i,a as n,b as s,e,f as t}from"./app-967d79b2.js";const c={},l=t('<h1 id="rest-framework专栏讲解-九-parsers" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-九-parsers" aria-hidden="true">#</a> Rest-framework专栏讲解(九)：Parsers</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E8%A7%A3%E6%9E%90%E5%99%A8">解析器</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E8%A7%A3%E6%9E%90%E5%99%A8">如何确定使用哪个解析器</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E5%99%A8">配置解析器</a></li></ul></li><li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#JSONParser">JSONParser</a></li><li><a href="#FormParser">FormParser</a></li><li><a href="#MultiPartParser">MultiPartParser</a></li><li><a href="#FileUploadParser">FileUploadParser</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90">自定义解析</a><ul><li><a href="#stream">stream</a></li><li><a href="#media_type">media_type</a></li><li><a href="#parser_context">parser_context</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6">第三方组件</a><ul><li><a href="#YAML-%E6%94%AF%E6%8C%81">YAML 支持</a></li><li><a href="#XML-%E6%94%AF%E6%8C%81">XML 支持</a></li><li><a href="#MessagePack">MessagePack</a></li><li><a href="#CamelCase-JSON">CamelCase JSON</a></li></ul></li></ul><hr>',4),d={href:"http://www.django-rest-framework.org/api-guide/parsers/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},u={id:"解析器",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#解析器","aria-hidden":"true"},"#",-1),h={href:"http://drf.jiuyou.info/#/drf/parsers?id=%E8%A7%A3%E6%9E%90%E5%99%A8",title:"解析器",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"REST framework 包含许多内置的解析器类，允许接受各种媒体类型（media types）的请求。还支持自定义解析器，这使你可以灵活地设计 API 接受的媒体类型。",-1),_={id:"如何确定使用哪个解析器",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#如何确定使用哪个解析器","aria-hidden":"true"},"#",-1),f={href:"http://drf.jiuyou.info/#/drf/parsers?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E8%A7%A3%E6%9E%90%E5%99%A8",title:"如何确定使用哪个解析器",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>视图的有效解析器集始终定义为类列表。当访问 <code>request.data</code> 时，REST framework 将检查传入请求的 <code>Content-Type</code> ，并确定使用哪个解析器来解析请求内容。</p><blockquote><p><strong>注意</strong>：在开发客户端应用程序时，请务必确保在 HTTP 请求中发送数据时设置了 <code>Content-Type</code> 。如果你不设置 content type，大多数客户端将默认使用 <code>&#39;application / x-www-form-urlencoded&#39;</code> ，这可能不是你想要的。 例如，如果你使用 jQuery 和 <code>.ajax()</code> 方法发送 <code>json</code> 数据，则应确保包含 <code>contentType:&#39;application/json&#39;</code> 设置。</p></blockquote><h3 id="配置解析器" tabindex="-1"><a class="header-anchor" href="#配置解析器" aria-hidden="true">#</a> 配置解析器</h3><p>可以使用 <code>DEFAULT_PARSER_CLASSES</code> 设置默认的全局解析器。例如，以下设置将只允许带有 <code>JSON</code> 内容的请求，而不是默认的 JSON 或表单数据。</p><p>在使用 <code>restframework</code> 框架的时候我们需要设置返回的数据为 <code>JSON</code> 格式就需要在 <code>Django</code> 项目的 <code>settings.py</code> 中做如下配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework.parsers.JSONParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以在基于类（<code>API​​View</code> ）的视图上设置单个视图或视图集的解析器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that can accept POST requests with JSON content.
    &quot;&quot;&quot;</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONParser<span class="token punctuation">]</span>
    <span class="token comment"># parser_classes = (JSONParser,)</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者和 <code>@api_view</code> 装饰器一起使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> parser_classes
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@parser_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>JSONParser<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that can accept POST requests with JSON content.
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),E={id:"api-参考",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),y={href:"http://drf.jiuyou.info/#/drf/parsers?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},A={id:"jsonparser",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#jsonparser","aria-hidden":"true"},"#",-1),P={href:"http://drf.jiuyou.info/#/drf/parsers?id=jsonparser",title:"JSONParser",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"解析 JSON 请求内容。",-1),S=n("p",null,[n("strong",null,".media_type"),s("： "),n("code",null,"application/json")],-1),q={id:"formparser",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#formparser","aria-hidden":"true"},"#",-1),L={href:"http://drf.jiuyou.info/#/drf/parsers?id=formparser",title:"FormParser",target:"_blank",rel:"noopener noreferrer"},F=t("<p>解析 HTML 表单内容。<code>request.data</code> 是一个 <code>QueryDict</code> 字典，包含所有表单参数。</p><p>通常需要同时使用 <code>FormParser</code> 和 <code>MultiPartParser</code>，以完全支持 HTML 表单数据。</p><p><strong>.media_type</strong>： <code>application/x-www-form-urlencoded</code></p>",3),j={id:"multipartparser",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#multipartparser","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/parsers?id=multipartparser",title:"MultiPartParser",target:"_blank",rel:"noopener noreferrer"},N=t("<p>解析文件上传的 multipart HTML 表单内容。 <code>request.data</code> 是一个 <code>QueryDict</code>（其中包含表单参数和文件）。</p><p>通常需要同时使用 <code>FormParser</code> 和 <code>MultiPartParser</code>，以完全支持 HTML 表单数据。</p><p><strong>.media_type</strong>： <code>application/form-data</code></p>",3),B={id:"fileuploadparser",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#fileuploadparser","aria-hidden":"true"},"#",-1),D={href:"http://drf.jiuyou.info/#/drf/parsers?id=fileuploadparser",title:"FileUploadParser",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>解析文件上传内容。 <code>request.data</code> 是一个 <code>QueryDict</code> （只包含一个存有文件的 <code>&#39;file&#39;</code> key）。</p><p>如果与 <code>FileUploadParser</code> 一起使用的视图是用 <code>filename</code> URL 关键字参数调用的，那么该参数将用作文件名。</p><p>如果在没有 <code>filename</code> URL 关键字参数的情况下调用，则客户端必须在 <code>Content-Disposition</code> HTTP header 中设置文件名。例如 <code>Content-Disposition: attachment; filename=upload.jpg</code>。</p><p><strong>.media_type</strong>： <code>*/*</code></p><p>请注意：</p><ul><li><code>FileUploadParser</code> 用于本地客户端，可以将文件作为原始数据请求上传。对于基于 Web 的上传，或者对于具有分段上传支持的本地客户端，您应该使用 <code>MultiPartParser</code> 解析器。</li><li>由于此解析器的 <code>media_type</code> 与任何 content type 都匹配，因此 <code>FileUploadParser</code> 通常应该是在 API 视图上设置的唯一解析器。</li><li><code>FileUploadParser</code> 遵循 Django 的标准 <code>FILE_UPLOAD_HANDLERS</code> 设置和 <code>request.upload_handlers</code> 属性。有关更多详细信息，请参阅 Django 文档。</li></ul><p>基本用法示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># views.py</span>
<span class="token keyword">class</span> <span class="token class-name">FileUploadView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">[</span>FileUploadParser<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        file_obj <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># ...</span>
        <span class="token comment"># do some stuff with uploaded file</span>
        <span class="token comment"># ...</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">204</span><span class="token punctuation">)</span>

<span class="token comment"># urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># ...</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^upload/(?P&lt;filename&gt;[^/]+)$&#39;</span><span class="token punctuation">,</span> FileUploadView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),J={id:"自定义解析",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#自定义解析","aria-hidden":"true"},"#",-1),I={href:"http://drf.jiuyou.info/#/drf/parsers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90",title:"自定义解析",target:"_blank",rel:"noopener noreferrer"},V=t("<p>要实现自定义解析器，应该继承 <code>BaseParser</code>，设置 <code>.media_type</code> 属性并实现 <code>.parse(self,stream,media_type,parser_context)</code> 方法。</p><p>该方法应该返回将用于填充 <code>request.data</code> 属性的数据。</p><p>传递给 <code>.parse()</code> 的参数是：</p>",3),X={id:"stream",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#stream","aria-hidden":"true"},"#",-1),H={href:"http://drf.jiuyou.info/#/drf/parsers?id=stream",title:"stream",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,"表示请求正文的流式对象。",-1),W={id:"media-type",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#media-type","aria-hidden":"true"},"#",-1),z={href:"http://drf.jiuyou.info/#/drf/parsers?id=media_type",title:"media_type",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,"可选。如果提供，则这是传入请求内容的 media type。",-1),G=n("p",null,[s("根据请求的 "),n("code",null,"Content-Type:"),s(" header，可以比渲染器的 "),n("code",null,"media_type"),s(" 属性更具体，并且可能包含 media type 参数。比如 "),n("code",null,'"text/plain; charset=utf-8"'),s(" 。")],-1),Z={id:"parser-context",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#parser-context","aria-hidden":"true"},"#",-1),sn={href:"http://drf.jiuyou.info/#/drf/parsers?id=parser_context",title:"parser_context",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,"可选。如果提供，则该参数将是一个包含解析请求内容可能需要的任何其他上下文的字典。",-1),en=n("p",null,[s("默认情况下，这将包括以下 key："),n("code",null,"view"),s("，"),n("code",null,"request"),s("，"),n("code",null,"args"),s("，"),n("code",null,"kwargs"),s("。")],-1),tn={id:"举个栗子",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),rn={href:"http://drf.jiuyou.info/#/drf/parsers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},pn=t(`<p>以下是一个示例纯文本解析器，它将使用表示请求正文的字符串填充 <code>request.data</code> 属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextParser</span><span class="token punctuation">(</span>BaseParser<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Plain text parser.
    &quot;&quot;&quot;</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>

    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parser_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Simply return a string representing the body of the request.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三方组件" tabindex="-1"><a class="header-anchor" href="#第三方组件" aria-hidden="true">#</a> 第三方组件</h2><h4 id="yaml-支持" tabindex="-1"><a class="header-anchor" href="#yaml-支持" aria-hidden="true">#</a> YAML 支持</h4><p>REST framework YAML 提供 YAML 解析和渲染支持。它以前直接包含在 REST framework 包中，现在作为第三方包。</p><p>使用pip安装。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span>m pip install djangorestframework<span class="token operator">-</span>yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时数据以 YAML 语法作为支持和返回, 需要你在 <code>settings.py</code> 中做如下配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_yaml.parsers.YAMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_yaml.renderers.YAMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xml-支持" tabindex="-1"><a class="header-anchor" href="#xml-支持" aria-hidden="true">#</a> XML 支持</h4>`,10),cn={href:"https://jpadilla.github.io/django-rest-framework-xml/",title:"REST Framework XML",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p>使用pip安装。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span>m pip install djangorestframework<span class="token operator">-</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时数据以 XML 语法作为支持和返回, 需要你在 <code>settings.py</code> 中做如下配置:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_xml.parsers.XMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework_xml.renderers.XMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),dn={id:"messagepack",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#messagepack","aria-hidden":"true"},"#",-1),kn={href:"https://github.com/juanriaza/django-rest-framework-msgpack",title:"MessagePack",target:"_blank",rel:"noopener noreferrer"},hn={id:"camelcase-json",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#camelcase-json","aria-hidden":"true"},"#",-1),_n={href:"https://github.com/vbabiy/djangorestframework-camel-case",title:"CamelCase JSON",target:"_blank",rel:"noopener noreferrer"};function vn(fn,bn){const a=r("ExternalLinkIcon");return p(),i("div",null,[l,n("blockquote",null,[n("p",null,[n("a",d,[s("官方原文链接"),e(a)])])]),n("h2",u,[k,s(),n("a",h,[s("解析器"),e(a)])]),m,n("h3",_,[v,s(),n("a",f,[s("如何确定使用哪个解析器"),e(a)])]),b,n("h2",E,[g,s(),n("a",y,[s("API 参考"),e(a)])]),n("h3",A,[w,s(),n("a",P,[s("JSONParser"),e(a)])]),x,S,n("h3",q,[R,s(),n("a",L,[s("FormParser"),e(a)])]),F,n("h3",j,[M,s(),n("a",T,[s("MultiPartParser"),e(a)])]),N,n("h3",B,[O,s(),n("a",D,[s("FileUploadParser"),e(a)])]),C,n("h2",J,[U,s(),n("a",I,[s("自定义解析"),e(a)])]),V,n("h3",X,[Y,s(),n("a",H,[s("stream"),e(a)])]),Q,n("h3",W,[K,s(),n("a",z,[s("media_type"),e(a)])]),$,G,n("h3",Z,[nn,s(),n("a",sn,[s("parser_context"),e(a)])]),an,en,n("h3",tn,[on,s(),n("a",rn,[s("举个栗子"),e(a)])]),pn,n("p",null,[n("a",cn,[s("REST Framework XML"),e(a)]),s(" 提供了一种简单的非正式 XML 格式。它以前直接包含在 REST framework 包中，现在作为第三方包。")]),ln,n("h3",dn,[un,s(),n("a",kn,[s("MessagePack"),e(a)])]),n("h3",hn,[mn,s(),n("a",_n,[s("CamelCase JSON"),e(a)])])])}const yn=o(c,[["render",vn],["__file","Rest-framework专栏讲解(九)：Parsers.html.vue"]]);export{yn as default};
