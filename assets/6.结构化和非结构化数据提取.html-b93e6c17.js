import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as o,a as n,b as s,e as l,f as c}from"./app-967d79b2.js";const i="/assets/5.1正则表达式-b33ac220.png",u="/assets/5.2正则表达式规则-3ce337b5.png",r={},d=c('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是海鸽。</p><h2 id="页面解析和数据提取" tabindex="-1"><a class="header-anchor" href="#页面解析和数据提取" aria-hidden="true">#</a> 页面解析和数据提取</h2><p>一般来讲对我们而言，需要抓取的是某个网站或者某个应用的内容，提取有用的价值。内容一般分为两部分，非结构化的数据 和 结构化的数据。</p><ul><li>非结构化数据：先有数据，再有结构，</li><li>结构化数据：先有结构、再有数据</li></ul><p>不同类型的数据，我们需要采用不同的方式来处理。</p><h3 id="非结构化的数据处理" tabindex="-1"><a class="header-anchor" href="#非结构化的数据处理" aria-hidden="true">#</a> 非结构化的数据处理</h3><p>文本、电话号码、邮箱地址</p><ul><li>正则表达式</li></ul><p>HTML 文件</p><ul><li>正则表达式</li><li>XPath</li><li>CSS选择器</li></ul><h3 id="结构化的数据处理" tabindex="-1"><a class="header-anchor" href="#结构化的数据处理" aria-hidden="true">#</a> 结构化的数据处理</h3><p>JSON 文件</p><ul><li>JSON Path</li><li>转化成Python类型进行操作（json类）</li></ul><p>XML 文件</p><ul><li>转化成Python类型（xmltodict）</li><li>XPath</li><li>CSS选择器</li><li>正则表达式</li></ul><h2 id="正则表达式re模块" tabindex="-1"><a class="header-anchor" href="#正则表达式re模块" aria-hidden="true">#</a> 正则表达式re模块</h2><p>实际上爬虫一共就四个主要步骤：</p><ol><li>明确目标 (要知道你准备在哪个范围或者网站去搜索)</li><li>爬 (将所有的网站的内容全部爬下来)</li><li>取 (去掉对我们没用处的数据)</li><li>处理数据（按照我们想要的方式存储和使用）</li></ol><p>我们在昨天的案例里实际上省略了第3步，也就是&quot;取&quot;的步骤。因为我们down下了的数据是全部的网页，这些数据很庞大并且很混乱，大部分的东西使我们不关心的，因此我们需要将之按我们的需要过滤和匹配出来。</p><p>那么对于文本的过滤或者规则的匹配，最强大的就是正则表达式，是Python爬虫世界里必不可少的神兵利器。</p><h3 id="什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#什么是正则表达式" aria-hidden="true">#</a> 什么是正则表达式</h3><blockquote><p>正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个模式(规则)的文本。<br> 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p></blockquote><p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</p><ul><li>给定的字符串是否符合正则表达式的过滤逻辑（“匹配”）；</li><li>通过正则表达式，从文本字符串中获取我们想要的特定部分（“过滤”）。</li></ul><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="正则表达式匹配规则" tabindex="-1"><a class="header-anchor" href="#正则表达式匹配规则" aria-hidden="true">#</a> 正则表达式匹配规则</h3><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="python-的-re-模块" tabindex="-1"><a class="header-anchor" href="#python-的-re-模块" aria-hidden="true">#</a> Python 的 re 模块</h3><p>在 Python 中，我们可以使用内置的 re 模块来使用正则表达式。</p><p>有一点需要特别注意的是，正则表达式使用 对特殊字符进行转义，所以如果我们要使用原始字符串，只需加一个 r 前缀，示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">r&#39;chuanzhiboke\\t\\.\\tpython&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>re 模块的一般使用步骤如下：</strong></p><ol><li><p>使用 compile() 函数将正则表达式的字符串形式编译为一个 Pattern 对象</p></li><li><p>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果，一个 Match 对象。</p></li><li><p>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作</p></li></ol><p><strong>compile 函数</strong></p><p>compile 函数用于编译正则表达式，生成一个 Pattern 对象，它的一般使用形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token comment"># 将正则表达式编译成 Pattern 对象</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面，我们已将一个正则表达式编译成 Pattern 对象，接下来，我们就可以利用 pattern 的一系列方法对文本进行匹配查找了。</p><p>Pattern 对象的一些常用方法主要有：</p><ul><li>match 方法：从起始位置开始查找，一次匹配</li><li>search 方法：从任何位置开始查找，一次匹配</li><li>findall 方法：全部匹配，返回列表</li><li>finditer 方法：全部匹配，返回迭代器</li><li>split 方法：分割字符串，返回列表</li><li>sub 方法：替换</li></ul><p><strong>match 方法</strong></p><p>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。它的一般使用形式如下：</p><p>match(string[, pos[, endpos]])</p><p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。因此，当你不指定 pos 和 endpos 时，match 方法默认匹配字符串的头部。</p><p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 用于匹配至少一个数字</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;one12twothree34four&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查找头部，没有匹配</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token boolean">None</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;one12twothree34four&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 从&#39;e&#39;的位置开始匹配，没有匹配</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token boolean">None</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;one12twothree34four&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 从&#39;1&#39;的位置开始匹配，正好匹配</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> m                                         <span class="token comment"># 返回一个 Match 对象</span>
<span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span> at <span class="token number">0x10a42aac0</span><span class="token operator">&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 可省略 0</span>
<span class="token string">&#39;12&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 可省略 0</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 可省略 0</span>
<span class="token number">5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 可省略 0</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面，当匹配成功时返回一个 Match 对象，其中：</p><ul><li><p>group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；</p></li><li><p>start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</p></li><li><p>end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</p></li><li><p>span([group]) 方法返回 (start(group), end(group))。</p></li></ul><p>再看看一个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;([a-z]+) ([a-z]+)&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>  <span class="token comment"># re.I 表示忽略大小写</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World Wide Web&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>     <span class="token comment"># 匹配成功，返回一个 Match 对象</span>
<span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span> at <span class="token number">0x10bea83e8</span><span class="token operator">&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 返回匹配成功的整个子串</span>
<span class="token string">&#39;Hello World&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 返回匹配成功的整个子串的索引</span>
<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 返回第一个分组匹配成功的子串</span>
<span class="token string">&#39;Hello&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 返回第一个分组匹配成功的子串的索引</span>
<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 返回第二个分组匹配成功的子串</span>
<span class="token string">&#39;World&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 返回第二个分组匹配成功的子串</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等价于 (m.group(1), m.group(2), ...)</span>
<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 不存在第三个分组</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
IndexError<span class="token punctuation">:</span> no such group
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>search 方法</strong></p><p>search 方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：</p><p>search(string[, pos[, endpos]])</p><p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p><p>当匹配成功时，返回一个 Match 对象，如果没有匹配上，则返回 None。</p><p>让我们看看例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;one12twothree34four&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 这里如果使用 match 方法则不匹配</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m
<span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span> at <span class="token number">0x10cc03ac0</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;12&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;one12twothree34four&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># 指定字符串区间</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m
<span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span> at <span class="token number">0x10cc03b28</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;34&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看一个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> re

<span class="token comment"># 将正则表达式编译成 Pattern 对象</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 使用 search() 查找匹配的子串，不存在匹配的子串时将返回 None</span>
<span class="token comment"># 这里使用 match() 无法成功匹配</span>
m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;hello 123456 789&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> m<span class="token punctuation">:</span>
    <span class="token comment"># 使用 Match 获得分组信息</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;matching string:&#39;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 起始位置和结束位置</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;position:&#39;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>matching string<span class="token punctuation">:</span> <span class="token number">123456</span>
position<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>findall 方法</strong></p><p>上面的 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。</p><p>findall 方法的使用形式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>findall<span class="token punctuation">(</span>string<span class="token punctuation">[</span>, pos<span class="token punctuation">[</span>, endpos<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，string 是待匹配的字符串，pos 和 endpos 是可选参数，指定字符串的起始和终点位置，默认值分别是 0 和 len (字符串长度)。</p><blockquote><p>findall 以列表形式返回全部能匹配的子串，如果没有匹配，则返回一个空列表。</p></blockquote><p>看看例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">)</span>   <span class="token comment"># 查找数字</span>

result1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;hello 123456 789&#39;</span><span class="token punctuation">)</span>
result2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;one1two2three3four4&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token string">&#39;123456&#39;</span>, <span class="token string">&#39;789&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span>, <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再先看一个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># re_test.py</span>

<span class="token keyword">import</span> re

<span class="token comment">#re模块提供一个方法叫compile模块，提供我们输入一个匹配的规则</span>
<span class="token comment">#然后返回一个pattern实例，我们根据这个规则去匹配字符串</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+\\.\\d*&#39;</span><span class="token punctuation">)</span>

<span class="token comment">#通过partten.findall()方法就能够全部匹配到我们得到的字符串</span>
result <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;123.141593, &#39;bigcat&#39;, 232312, 3.15&quot;</span><span class="token punctuation">)</span>

<span class="token comment">#findall 以 列表形式 返回全部能匹配的子串给result</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">123.141593</span>
<span class="token number">3.15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>finditer 方法</strong></p><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。</p><p>看看例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> re
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">)</span>

result_iter1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">&#39;hello 123456 789&#39;</span><span class="token punctuation">)</span>
result_iter2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">&#39;one1two2three3four4&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>result_iter1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>result_iter2<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result1...&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> m1 <span class="token keyword">in</span> result_iter1<span class="token punctuation">:</span>   <span class="token comment"># m1 是 Match 对象</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;matching string: {}, position: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m1<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result2...&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> m2 <span class="token keyword">in</span> result_iter2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;matching string: {}, position: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m2<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>class <span class="token string">&#39;callable_iterator&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>class <span class="token string">&#39;callable_iterator&#39;</span><span class="token operator">&gt;</span>
result1<span class="token punctuation">..</span>.
matching string: <span class="token number">123456</span>, position: <span class="token punctuation">(</span><span class="token number">6</span>, <span class="token number">12</span><span class="token punctuation">)</span>
matching string: <span class="token number">789</span>, position: <span class="token punctuation">(</span><span class="token number">13</span>, <span class="token number">16</span><span class="token punctuation">)</span>
result2<span class="token punctuation">..</span>.
matching string: <span class="token number">1</span>, position: <span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">)</span>
matching string: <span class="token number">2</span>, position: <span class="token punctuation">(</span><span class="token number">7</span>, <span class="token number">8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>split 方法</strong></p><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>split<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">,</span> maxsplit<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，maxsplit 用于指定最大分割次数，不指定将全部分割。</p><p>看看例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[\\s,;]+&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;a,b;; c   d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>sub 方法</strong></p><p>sub 方法用于替换。它的使用形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sub<span class="token punctuation">(</span>repl<span class="token punctuation">,</span> string<span class="token punctuation">[</span><span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，repl 可以是字符串也可以是一个函数：</p><ul><li><p>如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 id 的形式来引用分组，但不能使用编号 0；</p></li><li><p>如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</p></li></ul><p>count 用于指定最多替换次数，不指定时全部替换。</p><p>看看例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(\\w+) (\\w+)&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># \\w = [A-Za-z0-9]</span>
s <span class="token operator">=</span> <span class="token string">&#39;hello 123, hello 456&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;hello world&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 &#39;hello world&#39; 替换 &#39;hello 123&#39; 和 &#39;hello 456&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\2 \\1&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 引用分组</span>


<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hi&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>func<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>func<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 最多替换一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hello world, hello world
<span class="token number">123</span> hello, <span class="token number">456</span> hello
hi <span class="token number">123</span>, hi <span class="token number">456</span>
hi <span class="token number">123</span>, hello <span class="token number">456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匹配中文</strong></p><p>在某些情况下，我们想匹配文本中的汉字，有一点需要注意的是，中文的 unicode 编码范围 主要在 [u4e00-u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。</p><p>假设现在想把字符串 title = u&#39;你好，hello，世界&#39; 中的中文提取出来，可以这么做：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

title <span class="token operator">=</span> <span class="token string">u&#39;你好，hello，世界&#39;</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[\\u4e00-\\u9fa5]+&#39;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>title<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token string">&#39;你好&#39;</span>, <span class="token string">&#39;世界&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：贪婪模式与非贪婪模式</strong></p><ul><li>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 ( * )；</li><li>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 ( ? )；</li></ul><blockquote><p>Python里数量词默认是贪婪的。</p></blockquote><hr><p>示例一 ： 源字符串：abbbc</p><ul><li><p>使用贪婪的数量词的正则表达式 ab* ，匹配结果： abbb。</p></li><li><p><code>*</code>决定了尽可能多匹配 b，所以a后面所有的 b 都出现了。</p></li><li><p>使用非贪婪的数量词的正则表达式ab*?，匹配结果： a。</p></li><li><p>即使前面有 *，但是 ? 决定了尽可能少匹配 b，所以没有 b。</p></li></ul><hr><p>示例二 ： 源字符串：<code>aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc</code></p><ul><li><p>使用贪婪的数量词的正则表达式：<code>&lt;div&gt;.*&lt;/div&gt;</code></p></li><li><p>匹配结果：<code>&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;</code></p></li></ul><p>这里采用的是贪婪模式。在匹配到第一个“<code>&lt;/div&gt;</code>”时已经可以使整个表达式匹配成功，但是由于采用的是贪婪模式，所以仍然要向右尝试匹配，查看是否还有更长的可以成功匹配的子串。匹配到第二个“<code>&lt;/div&gt;</code>”后，向右再没有可以成功匹配的子串，匹配结束，匹配结果为“<code>&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;</code>”</p><ul><li><p>使用非贪婪的数量词的正则表达式：<code>&lt;div&gt;.*?&lt;/div&gt;</code></p></li><li><p>匹配结果：<code>&lt;div&gt;test1&lt;/div&gt;</code></p></li></ul><p>正则表达式二采用的是非贪婪模式，在匹配到第一个“<code>&lt;/div&gt;</code>”时使整个表达式匹配成功，由于采用的是非贪婪模式，所以结束匹配，不再向右尝试，匹配结果为“<code>&lt;div&gt;test1&lt;/div&gt;</code>”。</p>`,119),k={href:"https://tool.oschina.net/regex/",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,[s("喜欢这篇文章的话，可以关注一下我的公众号『"),n("strong",null,"海哥python"),s("』")])],-1);function v(b,g){const a=t("ExternalLinkIcon");return e(),o("div",null,[d,n("p",null,[n("a",k,[s("在线正则表达式测试"),l(a)])]),m])}const f=p(r,[["render",v],["__file","6.结构化和非结构化数据提取.html.vue"]]);export{f as default};
