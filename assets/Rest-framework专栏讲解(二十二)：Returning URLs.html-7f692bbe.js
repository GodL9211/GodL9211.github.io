import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,a as e,b as n,e as a,f as r}from"./app-967d79b2.js";const c={},l=r('<h1 id="rest-framework专栏讲解-二十二-returning-urls" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-二十二-returning-urls" aria-hidden="true">#</a> Rest-framework专栏讲解(二十二)：Returning URLs</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E8%BF%94%E5%9B%9E-URL">返回 URL</a><ul><li><a href="#reverse">reverse</a></li><li><a href="#reverse_lazy">reverse_lazy</a></li></ul></li></ul><hr>',4),u={href:"http://www.django-rest-framework.org/api-guide/reverse/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},d={id:"返回-url",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#返回-url","aria-hidden":"true"},"#",-1),_={href:"http://drf.jiuyou.info/#/drf/reverse?id=%E8%BF%94%E5%9B%9E-url",title:"返回 URL",target:"_blank",rel:"noopener noreferrer"},v=r("<p>通常，从 Web API（例如 <code>http://example.com/foobar</code>）返回绝对 URI 可能是更好的做法，而不是返回相对 URI，例如 <code>/foobar</code>。</p><p>这样做的好处有：</p><ul><li>它更明确。</li><li>它为你的 API 客户端留下更少的工作。</li><li>当字符串在诸如 JSON 这样的表示中没有本地 URI 类型时，它的含义是没有歧义的。</li><li>它使得使用超链接标记 HTML 表示等事情变得很容易。</li></ul><p>REST framework 提供了两个实用函数，可以更简单地从 Web API 返回绝对 URI。</p><p>使用它们不是必须的，但是如果你这样做，自描述 API 将能够自动为你输出超链接，这使得浏览 API 变得更容易。</p>",5),h={id:"reverse",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#reverse","aria-hidden":"true"},"#",-1),f={href:"http://drf.jiuyou.info/#/drf/reverse?id=reverse",title:"reverse",target:"_blank",rel:"noopener noreferrer"},g=r(`<p><strong>签名:</strong> <code>reverse(viewname, *args, **kwargs)</code></p><p>具有与 <code>django.urls.reverse</code> 相同的行为，除了它返回一个完全限定的 URL，使用 request 来确定主机和端口。</p><p>你应该将 request 作为关键字参数包含在该函数中，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now

<span class="token keyword">class</span> <span class="token class-name">APIRootView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        year <span class="token operator">=</span> now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token string">&#39;year-summary-url&#39;</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;year-summary&#39;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>year<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={id:"reverse-lazy",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#reverse-lazy","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/reverse?id=reverse_lazy",title:"reverse_lazy",target:"_blank",rel:"noopener noreferrer"},R=r(`<p><strong>签名:</strong> <code>reverse_lazy(viewname, *args, **kwargs)</code></p><p>具有与 <code>django.urls.reverse_lazy</code> 相同的行为，除了它返回一个完全限定的 URL，使用 request 来确定主机和端口。</p><p>与 <code>reverse</code> 函数一样，你应该将 <code>request</code> 作为关键字参数包含在函数中，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>api_root <span class="token operator">=</span> reverse_lazy<span class="token punctuation">(</span><span class="token string">&#39;api-root&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function x(I,U){const s=o("ExternalLinkIcon");return p(),i("div",null,[l,e("blockquote",null,[e("p",null,[e("a",u,[n("官方原文链接"),a(s)])])]),e("h1",d,[k,n(),e("a",_,[n("返回 URL"),a(s)])]),v,e("h2",h,[m,n(),e("a",f,[n("reverse"),a(s)])]),g,e("h2",y,[b,n(),e("a",w,[n("reverse_lazy"),a(s)])]),R])}const q=t(c,[["render",x],["__file","Rest-framework专栏讲解(二十二)：Returning URLs.html.vue"]]);export{q as default};
