import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-6b5c8e46.js";const p="/assets/索引15问-478aea48.png",t="/assets/mysql索引-aae8221c.png",i="/assets/MySQL索引类型-70e923fa.png",o="/assets/idx_age-b8bd7773.png",l="/assets/id主键-b282099c.png",c="/assets/idx_name_age二级索引树-9be10630.png",r="/assets/like命中索引-0e842509.png",d="/assets/MySQL5.6之前回表-939285e4.png",u="/assets/MySQL5.6之后的回表-e8812c5e.png",k="/assets/explain-00638861.png",g={},h=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是<code>海鸽</code></p><p>金三银四很快就要来啦，准备了索引的15连问，相信大家看完肯定会有帮助的。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-索引是什么" tabindex="-1"><a class="header-anchor" href="#_1-索引是什么" aria-hidden="true">#</a> 1. 索引是什么？</h2><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>索引是一种<code>能提高数据库查询效率的数据结构</code>。它可以比作一本字典的目录，可以帮你快速找到对应的记录。</li><li>索引一般存储在磁盘的文件中，它是占用物理空间的。</li><li>正所谓水能载舟，也能覆舟。适当的索引能提高查询效率，过多的索引会影响数据库表的插入和更新功能。</li></ul><h2 id="_2-mysql索引有哪些类型" tabindex="-1"><a class="header-anchor" href="#_2-mysql索引有哪些类型" aria-hidden="true">#</a> 2. MySQL索引有哪些类型？</h2><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="数据结构维度" tabindex="-1"><a class="header-anchor" href="#数据结构维度" aria-hidden="true">#</a> 数据结构维度</h3><ul><li><p>B+树索引：<code>所有数据存储在叶子节点，复杂度为O(logn)，适合范围查询</code>。</p></li><li><p>哈希索引: 适合等值查询，检索效率高，一次到位。</p></li><li><p>全文索引：MyISAM和InnoDB中都支持使用全文索引，一般在文本类型char,text,varchar类型上创建。</p></li><li><p>R-Tree索引: 用来对GIS数据类型创建SPATIAL索引</p></li></ul><h3 id="物理存储维度" tabindex="-1"><a class="header-anchor" href="#物理存储维度" aria-hidden="true">#</a> 物理存储维度</h3><ul><li><p>聚集索引：聚集索引就是以主键创建的索引，在叶子节点存储的是表中的数据。（Innodb存储引擎）</p></li><li><p>非聚集索引：非聚集索引就是以非主键创建的索引，在叶子节点存储的是主键和索引列。（Innodb存储引擎）</p></li></ul><h3 id="逻辑维度" tabindex="-1"><a class="header-anchor" href="#逻辑维度" aria-hidden="true">#</a> 逻辑维度</h3><ul><li><p>主键索引：一种特殊的唯一索引，不允许有空值。</p></li><li><p>普通索引：MySQL中基本索引类型，允许空值和重复值。</p></li><li><p>联合索引：多个字段创建的索引，使用时遵循最左前缀原则。</p></li><li><p>唯一索引：索引列中的值必须是唯一的，但是允许为空值。</p></li><li><p>空间索引：MySQL5.7之后支持空间索引，在空间索引这方面遵循OpenGIS几何数据模型规则。</p></li></ul><h3 id="索引什么时候会失效" tabindex="-1"><a class="header-anchor" href="#索引什么时候会失效" aria-hidden="true">#</a> 索引什么时候会失效？</h3><ul><li><p>查询条件包含<code>or</code>，可能导致索引失效。</p></li><li><p>如果<code>字段类型是字符串，where时一定用引号括起来</code>，否则索引失效。</p></li><li><p>like通配符可能导致索引失效。</p></li><li><p>联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。</p></li><li><p>在索引列上使用 mysql 的内置<code>函数</code>，索引失效。</p></li><li><p>对索引列运算（如，<code>+、-、*、/</code>），索引失效。</p></li><li><p>索引字段上使用（<code>！= 或者 &lt; &gt;，not in</code>）时，可能会导致索引失效。</p></li><li><p>索引字段上使用<code>is null， is not null</code>，可能导致索引失效。</p></li><li><p>左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。</p></li><li><p>mysql 估计使用全表扫描要比使用索引快,则不使用索引。</p></li></ul><h3 id="哪些场景不适合建立索引" tabindex="-1"><a class="header-anchor" href="#哪些场景不适合建立索引" aria-hidden="true">#</a> 哪些场景不适合建立索引？</h3><ul><li><p>数据量少的表，不适合加索引</p></li><li><p>更新比较频繁的也不适合加索引</p></li><li><p>区分度低的字段不适合加索引（如性别）</p></li><li><p><code>where</code>、<code>group by</code>、<code>order by</code>等后面没有使用到的字段，不需要建立索引</p></li><li><p>已经有冗余的索引的情况（比如已经有a,b的联合索引，不需要再单独建立a索引）</p></li></ul><h3 id="为什么使用b-树-为什么不用二叉树" tabindex="-1"><a class="header-anchor" href="#为什么使用b-树-为什么不用二叉树" aria-hidden="true">#</a> 为什么使用B+树，为什么不用二叉树？</h3><blockquote><p>可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少， 以及查找磁盘次数，为什么不是二叉树，为什么不是平衡二叉树，为什么不是 B 树，而偏偏是 B+树呢？</p></blockquote><p><code>为什么不是一般二叉树？</code></p><p>如果二叉树特殊化为一个链表，相当于全表扫描。平衡二叉树相比于二叉查找 树来说，查找效率更稳定，总体的查找速度也更快。</p><p><code>为什么不是平衡二叉树呢？</code></p><p>我们知道，在内存比在磁盘的数据，查询效率快得多。如果树这种数据结构作 为索引，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说 的一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是B树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数 就降下来啦，查询效率就快啦。</p><p><code>那为什么不是 B 树而是 B+树呢？</code></p><ul><li><p><code>减少IO</code>：B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。innodb中页的默认大小是16KB，如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。</p></li><li><p><code>支持范围查询</code>: B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的，链表连着的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。</p></li></ul><h2 id="_6-一次b-树索引树的查找过程" tabindex="-1"><a class="header-anchor" href="#_6-一次b-树索引树的查找过程" aria-hidden="true">#</a> 6. 一次B+树索引树的查找过程</h2><blockquote><p>假设有以下表结构，并且初始化了这几条数据</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employee<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>date<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>sex<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&#39;小伦&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token string">&#39;2021-01-20&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&#39;俊杰&#39;</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">&#39;2021-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">&#39;紫琪&#39;</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token string">&#39;2020-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">&#39;立红&#39;</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">&#39;2020-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">&#39;易迅&#39;</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token string">&#39;2020-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token string">&#39;小军&#39;</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token string">&#39;2021-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token string">&#39;小燕&#39;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">&#39;2021-01-21&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这条查询SQL，需要执行几次的树搜索操作？可以画下对应的索引树结构图~</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Temployee <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实这个，这个大家可以先画出idx_age普通索引的索引结构图，大概如下：</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再画出id主键索引，我们先画出聚族索引结构图，如下：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这条 SQL 查询语句执行大概流程是这样的：</p><ul><li>搜索idx_age 索引树，将磁盘块1加载到内存，由于32&lt;43,搜索左路分支，到磁盘寻址磁盘块2。</li><li>将磁盘块2加载到内存中，由于32&lt;36,搜索左路分支，到磁盘寻址磁盘块4。</li><li>将磁盘块4加载到内存中，在内存继续遍历，找到age=32的记录，取得id = 400.</li><li>拿到id=400后，回到id主键索引树。</li><li>搜索id主键索引树，将磁盘块1加载到内存，因为300&lt;400&lt;500,所以在选择中间分支，到磁盘寻址磁盘块3。</li><li>虽然在磁盘块3，找到了id=400，但是它不是叶子节点，所以会继续往下找。到磁盘寻址磁盘块8。</li><li>将磁盘块8加载内存，在内存遍历，找到id=400的记录，拿到R4这一行的数据，好的，大功告成。</li></ul><h2 id="_7-什么是回表-如何减少回表" tabindex="-1"><a class="header-anchor" href="#_7-什么是回表-如何减少回表" aria-hidden="true">#</a> 7. 什么是回表？如何减少回表？</h2><p>当查询的数据在索引树中，找不到的时候，需要回到主键索引树中去获取，这个过程叫做回表。</p><p>比如在第6小节中，使用的查询SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Temployee <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要查询所有列的数据，idx_age普通索引不能满足，需要拿到主键id的值后，再回到id主键索引查找获取，这个过程就是回表。</p><h2 id="_8-什么是覆盖索引" tabindex="-1"><a class="header-anchor" href="#_8-什么是覆盖索引" aria-hidden="true">#</a> 8. 什么是覆盖索引？</h2><p>如果我们查询SQL的select * 修改为 select id, age的话，其实是不需要回表的。因为id和age的值，都在idx_age索引树的叶子节点上，这就涉及到覆盖索引的知识点了。</p><blockquote><p>覆盖索引是select的数据列只用从索引中就能够取得，不必回表，换句话说，查询列要被所建的索引覆盖。</p></blockquote><h2 id="_9-聊聊索引的最左前缀原则" tabindex="-1"><a class="header-anchor" href="#_9-聊聊索引的最左前缀原则" aria-hidden="true">#</a> 9. 聊聊索引的最左前缀原则</h2><p>索引的最左前缀原则，可以是联合索引的最左N个字段。比如你建立一个组合索引（a,b,c），其实可以相当于建了（a），（a,b）,(a,b,c)三个索引，大大提高了索引复用能力。</p><p>当然，最左前缀也可以是字符串索引的最左M个字符。。比如，你的普通索引树是酱紫：</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个SQL: <code>select * from employee where name like &#39;小%&#39; order by age desc; </code>也是命中索引的。</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_10-索引下推了解过吗-什么是索引下推" tabindex="-1"><a class="header-anchor" href="#_10-索引下推了解过吗-什么是索引下推" aria-hidden="true">#</a> 10. 索引下推了解过吗？什么是索引下推?</h2><p>给你这个SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;小%&#39;</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">28</span> <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，name和age为联合索引（idx_name_age）。</p><p>如果是Mysql5.6之前，在idx_name_age索引树，找出所有名字第一个字是“小”的人，拿到它们的主键id，然后回表找出数据行，再去对比年龄和性别等其他字段。如图：</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有些朋友可能觉得奇怪，idx_name_age（name,age)不是联合索引嘛？为什么选出包含“小”字后，不再顺便看下年龄age再回表呢，不是更高效嘛？所以呀，MySQL 5.6就引入了索引下推优化，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>因此，MySQL5.6版本之后，选出包含“小”字后，顺表过滤age=28</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_11-大表如何添加索引" tabindex="-1"><a class="header-anchor" href="#_11-大表如何添加索引" aria-hidden="true">#</a> 11. 大表如何添加索引?</h2><p>如果一张表数据量级是千万级别以上的，那么，如何给这张表添加索引？</p><p>我们需要知道一点，<code>给表添加索引的时候，是会对表加锁的</code>。如果不谨慎操作，有可能出现生产事故的。可以参考以下方法：</p><ol><li>先创建一张跟原表A数据结构相同的新表B。</li><li>在新表B添加需要加上的新索引。</li><li>把原表A数据导到新表B</li><li>rename新表B为原表的表名A，原表A换别的表名；</li></ol><h2 id="_12-如何知道语句是否走索引查询" tabindex="-1"><a class="header-anchor" href="#_12-如何知道语句是否走索引查询" aria-hidden="true">#</a> 12. 如何知道语句是否走索引查询？</h2><p><code>explain</code>查看SQL的执行计划，这样就知道是否命中索引了。</p><p>当explain与SQL一起使用时，MySQL将显示来自优化器的有关语句执行计划的信息。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一般来说，我们需要重点关注type、rows、filtered、extra、key。</p><p><code>12.1 type</code></p><ul><li><p>type: 表示连接类型，查看索引执行情况的一个重要指标。以下性能从好到坏依次：<code>system &gt; const &gt; eq_ref &gt; ref &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></p></li><li><p>system：这种类型要求数据库表中只有一条数据，是const类型的一个特例，一般情况下是不会出现的。</p></li><li><p>const：通过一次索引就能找到数据，一般用于主键或唯一索引作为条件，这类扫描效率极高，，速度非常快。</p></li><li><p>eq_ref：常用于主键或唯一索引扫描，一般指使用主键的关联查询</p></li><li><p>ref : 常用于非主键和唯一索引扫描。</p></li><li><p>ref_or_null：这种连接类型类似于ref，区别在于MySQL会额外搜索包含NULL值的行</p></li><li><p>index_merge：使用了索引合并优化方法，查询使用了两个以上的索引。</p></li><li><p>unique_subquery：类似于eq_ref，条件用了in子查询</p></li><li><p>index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值。</p></li><li><p>range：常用于范围查询，比如：between ... and 或 In 等操作</p></li><li><p>index：全索引扫描</p></li><li><p>ALL：全表扫描</p></li></ul><p><code>12.2 rows</code></p><p>该列表示MySQL估算要找到我们所需的记录，需要读取的行数。对于InnoDB表，此数字是估计值，并非一定是个准确值。</p><p><code>12.3 filtered</code></p><p>该列是一个百分比的值，表里符合条件的记录数的百分比。简单点说，这个字段表示存储引擎返回的数据在经过过滤后，剩下满足条件的记录数量的比例。</p><p><code>12.4 extra</code><br> 该字段包含有关MySQL如何解析查询的其他信息，它一般会出现这几个值：</p><ul><li>Using filesort：表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现。一般见于order by语句</li><li>Using index ：表示是否用了覆盖索引。</li><li>Using temporary: 表示是否使用了临时表,性能特别差，需要重点优化。一般多见于group by语句，或者union语句。</li><li>Using where : 表示使用了where条件过滤.</li><li>Using index condition：MySQL5.6之后新增的索引下推。在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据。</li><li></li></ul><p><code>12.5 key</code></p><p>该列表示<code>实际用到的索引</code>。一般配合possible_keys列一起看。</p><h2 id="_13-hash-索引和-b-树区别是什么-你在设计索引是怎么抉择的" tabindex="-1"><a class="header-anchor" href="#_13-hash-索引和-b-树区别是什么-你在设计索引是怎么抉择的" aria-hidden="true">#</a> 13. Hash 索引和 B+树区别是什么？你在设计索引是怎么抉择的？</h2><ul><li>B+树可以进行范围查询，Hash 索引不能。</li><li>B+树支持联合索引的最左侧原则，Hash 索引不支持。</li><li>B+树支持 order by 排序，Hash 索引不支持。</li><li>Hash 索引在等值查询上比 B+树效率更高。（但是索引列的重复值很多的话，Hash冲突，效率降低）。</li><li>B+树使用 like 进行模糊查询的时候，like 后面（比如%开头）的话可以起到优化的作用，- Hash 索引根本无法进行模糊查询。</li></ul><h2 id="_14-索引有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#_14-索引有哪些优缺点" aria-hidden="true">#</a> 14. 索引有哪些优缺点？</h2><p><strong>优点：</strong></p><ul><li>索引可以加快数据查询速度，减少查询时间</li><li>唯一索引可以保证数据库表中每一行的数据的唯一性</li></ul><p><strong>缺点：</strong></p><ul><li>创建索引和维护索引要耗费时间</li><li>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间</li><li>对表中的数据进行增、删、改的时候，索引也要动态的维护。</li></ul><h2 id="_15-聚簇索引与非聚簇索引的区别" tabindex="-1"><a class="header-anchor" href="#_15-聚簇索引与非聚簇索引的区别" aria-hidden="true">#</a> 15. 聚簇索引与非聚簇索引的区别？</h2><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。它表示索引结构和数据一起存放的索引。非聚集索引是索引结构和数据分开存放的索引。</p><p>接下来，我们分不同存存储引擎去聊哈~</p><p>在MySQL的InnoDB存储引擎中， 聚簇索引与非聚簇索引最大的区别，在于叶节点是否存放一整行记录。聚簇索引叶子节点存储了一整行记录，而非聚簇索引叶子节点存储的是主键信息，因此，一般非聚簇索引还需要回表查询。</p><ul><li>一个表中只能拥有一个聚集索引（因为一般聚簇索引就是主键索引），而非聚集索引一个表则可以存在多个。</li><li>一般来说，相对于非聚簇索引，聚簇索引查询效率更高，因为不用回表。</li></ul><p>而在MyISM存储引擎中，它的主键索引，普通索引都是非聚簇索引，因为数据和索引是分开的，叶子节点都使用一个地址指向真正的表数据。</p>',93),b=[h];function m(y,_){return s(),a("div",null,b)}const x=n(g,[["render",m],["__file","十五道精选MySQL索引面试题.html.vue"]]);export{x as default};
