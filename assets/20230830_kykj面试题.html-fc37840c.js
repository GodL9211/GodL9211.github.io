import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,e,f as i}from"./app-26ec6d87.js";const l={},u=i(`<h2 id="一、-使用python实现一个单例模式对象。" tabindex="-1"><a class="header-anchor" href="#一、-使用python实现一个单例模式对象。" aria-hidden="true">#</a> 一、 使用python实现一个单例模式对象。</h2><p>在 Python 中，你可以使用多种方法来实现单例模式，其中最常见的方法是使用装饰器或者元类。下面我会为你展示两种常见的实现方式：使用装饰器和使用元类。</p><p><strong>1. 使用装饰器实现单例模式：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>
            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>

    <span class="token keyword">return</span> get_instance

<span class="token decorator annotation punctuation">@singleton</span>
<span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value

<span class="token comment"># 使用</span>
instance1 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 1&quot;</span><span class="token punctuation">)</span>
instance2 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 2&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1 (same as instance1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance1 <span class="token keyword">is</span> instance2<span class="token punctuation">)</span>  <span class="token comment"># Output: True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用元类实现单例模式：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SingletonMeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> cls<span class="token punctuation">.</span>instances<span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>SingletonMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value

<span class="token comment"># 使用</span>
instance1 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 1&quot;</span><span class="token punctuation">)</span>
instance2 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 2&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1 (same as instance1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance1 <span class="token keyword">is</span> instance2<span class="token punctuation">)</span>  <span class="token comment"># Output: True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法都可以实现单例模式，你可以根据自己的喜好选择其中一种。元类的方法在一些高级场景下可能更灵活，但装饰器的方法更为简洁。</p><p>当使用 <code>__new__</code> 函数来实现单例模式时，你可以在 <code>__new__</code> 方法中控制实例的创建和返回。这里我将为你展示如何使用 <code>__new__</code> 函数实现单例模式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">:</span>
    _instance <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
            cls<span class="token punctuation">.</span>_instance<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance

<span class="token comment"># 使用</span>
instance1 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 1&quot;</span><span class="token punctuation">)</span>
instance2 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">&quot;Instance 2&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1 (same as instance1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance1 <span class="token keyword">is</span> instance2<span class="token punctuation">)</span>  <span class="token comment"># Output: True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>__new__</code> 方法首先检查 <code>_instance</code> 属性，如果该属性为 <code>None</code>，则创建一个新的实例并将其赋值给 <code>_instance</code>。如果 <code>_instance</code> 不为 <code>None</code>，则返回现有的实例。这样确保了只有一个实例被创建和使用。</p><p>注意，这种方法不是线程安全的。如果你需要在多线程环境下使用单例模式，你需要考虑线程安全性并可能采取额外的措施来保护 <code>_instance</code> 的访问和修改。</p><p><code>优化</code><br> 实现并发安全的单例模式需要考虑多线程或多进程环境下的竞争条件。以下是使用线程安全的方式来实现并发安全的单例模式的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token keyword">class</span> <span class="token class-name">ThreadSafeSingleton</span><span class="token punctuation">:</span>
    _instance <span class="token operator">=</span> <span class="token boolean">None</span>
    _lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> cls<span class="token punctuation">.</span>_lock<span class="token punctuation">:</span>
                <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance

<span class="token comment"># 使用</span>
<span class="token keyword">def</span> <span class="token function">create_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    instance <span class="token operator">=</span> ThreadSafeSingleton<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>

threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>create_instance<span class="token punctuation">)</span>
    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>
    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
    thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用了一个互斥锁 (<code>_lock</code>) 来确保在创建实例时只有一个线程能够进入临界区。这样可以防止多个线程同时创建实例，从而保证了单例模式的线程安全性。</p><p>请注意，这只是一个线程安全的示例。如果你需要在多进程环境中使用单例模式，你可能需要使用 <code>multiprocessing.Lock</code> 来实现进程间的同步。</p><p>此外，还可以考虑使用更高级的线程安全工具，例如 <code>threading.RLock</code> 或 <code>threading.Condition</code>，以便更好地满足你的并发需求。</p><blockquote><p>这里只是给出一些范例，具体使用及优化请根据实际场景适配。</p></blockquote><h2 id="二、-请使用异步的方式-多进程-线程-协程等-循环交替打印a和b各50次。" tabindex="-1"><a class="header-anchor" href="#二、-请使用异步的方式-多进程-线程-协程等-循环交替打印a和b各50次。" aria-hidden="true">#</a> 二、 请使用异步的方式（多进程/线程/协程等）循环交替打印A和B各50次。</h2><p>输出示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>A
B
A
B
A
B
A
B
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#（总共打印A和B各50次）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>协程版</code><br> 下面是使用异步协程的方式来实现交替打印 A 和 B 各 50 次的示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">print_a_b</span><span class="token punctuation">(</span>turn<span class="token punctuation">,</span> value<span class="token punctuation">,</span> total_count<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">async</span> <span class="token keyword">with</span> turn<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># Allow other tasks to run</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_count <span class="token operator">=</span> <span class="token number">50</span>
    a_turn <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    b_turn <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

    a_task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>print_a_b<span class="token punctuation">(</span>a_turn<span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> total_count<span class="token punctuation">)</span><span class="token punctuation">)</span>
    b_task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>print_a_b<span class="token punctuation">(</span>b_turn<span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> total_count<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>a_task<span class="token punctuation">,</span> b_task<span class="token punctuation">)</span>


asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个异步函数 <code>print_a_b</code> 来循环打印指定的值（&#39;A&#39; 或 &#39;B&#39;）。我们使用 <code>asyncio.Lock</code> 来确保打印操作的互斥，从而避免同时打印 A 和 B。</p><p>通过创建两个异步任务（分别打印 A 和 B），我们使用 <code>asyncio.gather</code> 来等待它们完成。</p><p>运行以上代码，你会得到类似于你描述的交替打印 A 和 B 的输出。注意，由于异步性质，可能会有微小的延迟，但总体上会保持交替打印。</p><p><code>多线程版</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token keyword">class</span> <span class="token class-name">AlternatePrinter</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>condition <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>turn <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> self<span class="token punctuation">.</span>condition<span class="token punctuation">:</span>
                <span class="token keyword">while</span> self<span class="token punctuation">.</span>turn <span class="token operator">!=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>turn <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
                self<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">print_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> self<span class="token punctuation">.</span>condition<span class="token punctuation">:</span>
                <span class="token keyword">while</span> self<span class="token punctuation">.</span>turn <span class="token operator">!=</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>turn <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>
                self<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    printer <span class="token operator">=</span> AlternatePrinter<span class="token punctuation">(</span><span class="token punctuation">)</span>

    thread_a <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>printer<span class="token punctuation">.</span>print_a<span class="token punctuation">)</span>
    thread_b <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>printer<span class="token punctuation">.</span>print_b<span class="token punctuation">)</span>

    thread_a<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    thread_b<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    thread_a<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    thread_b<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个 AlternatePrinter 类，其中包含两个方法 print_a 和 print_b，分别用于打印 A 和 B。我们使用条件变量 threading.Condition 来确保线程的交替执行。在每次打印完后，线程会改变 turn 变量的值，然后通过 condition.notify() 唤醒等待的线程。</p><p>通过创建两个线程分别执行 print_a 和 print_b，线程将会交替打印 A 和 B。</p><p>运行以上代码，你会得到你所期望的交替打印 A 和 B 的输出。</p><h2 id="三、你是产品经理-目前正在带领一个团队开发新的产品。不幸的是-你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的-所以错误的版本之后的所有版本都是错的。" tabindex="-1"><a class="header-anchor" href="#三、你是产品经理-目前正在带领一个团队开发新的产品。不幸的是-你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的-所以错误的版本之后的所有版本都是错的。" aria-hidden="true">#</a> 三、你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>假设你有 n 个版本 <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token punctuation">..</span>., n<span class="token punctuation">]</span>，你想找出导致之后所有版本出错的第一个错误的版本。

你可以通过调用 bool isBadVersion<span class="token punctuation">(</span>version<span class="token punctuation">)</span> 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。

 
示例 <span class="token number">1</span>：

输入：n <span class="token operator">=</span> <span class="token number">5</span>, bad <span class="token operator">=</span> <span class="token number">4</span>
输出：4
解释：
调用 isBadVersion<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token boolean">false</span> 
调用 isBadVersion<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token boolean">true</span> 
调用 isBadVersion<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token boolean">true</span>
所以，4 是第一个错误的版本。
示例 <span class="token number">2</span>：

输入：n <span class="token operator">=</span> <span class="token number">1</span>, bad <span class="token operator">=</span> <span class="token number">1</span>
输出：1
 

提示：

● <span class="token number">1</span> <span class="token operator">&lt;=</span> bad <span class="token operator">&lt;=</span> n <span class="token operator">&lt;=</span> <span class="token number">231</span> - <span class="token number">1</span>
● isBadVersion函数假设已定义好，直接调用即可
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题可以使用二分查找来解决，以减少调用 <code>isBadVersion</code> 函数的次数。由于每个错误的版本之后的版本都是错误的，我们可以将问题转化为在版本列表中寻找第一个满足条件的版本，也就是找到最左边的 <code>True</code> 值。以下是使用二分查找的示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">first_bad_version</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n
    
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> isBadVersion<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    
    <span class="token keyword">return</span> left

<span class="token comment"># 示例 isBadVersion 函数</span>
<span class="token keyword">def</span> <span class="token function">isBadVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 假设该函数已经定义好，直接调用即可</span>
    <span class="token keyword">pass</span>

<span class="token comment"># 使用示例</span>
n <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 假设总共有 5 个版本</span>
bad_version <span class="token operator">=</span> first_bad_version<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;第一个错误的版本：&quot;</span><span class="token punctuation">,</span> bad_version<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用二分查找来找到第一个错误的版本。我们初始化 <code>left</code> 和 <code>right</code> 分别为 1 和 n，然后在每一步中计算 <code>mid</code>，并根据 <code>isBadVersion(mid)</code> 的结果来更新 <code>left</code> 和 <code>right</code>。如果 <code>isBadVersion(mid)</code> 返回 <code>True</code>，说明当前版本是错误的，我们将搜索范围缩小到左半部分；否则，搜索范围缩小到右半部分。</p><p>最终，当 <code>left</code> 和 <code>right</code> 相等时，就找到了第一个错误的版本，返回该版本号即可。</p><p>这种方法有效地减少了对 <code>isBadVersion</code> 函数的调用次数，通过二分查找的方式快速定位到第一个错误的版本。</p><h2 id="四、请简述下python中的-new-和-init-的区别。" tabindex="-1"><a class="header-anchor" href="#四、请简述下python中的-new-和-init-的区别。" aria-hidden="true">#</a> 四、请简述下python中的__new__和__init__的区别。</h2><p>在Python中，<code>__new__</code> 和 <code>__init__</code> 是两个特殊的方法，用于创建和初始化对象。它们在类的实例化过程中起着不同的作用。</p><ol><li><p><code>__new__</code> 方法：</p><ul><li><code>__new__</code> 是一个类级别的方法，负责创建并返回实例对象。它在对象创建之前调用，并且通常是静态方法，接受一个类作为第一个参数，然后传递其他参数来创建实例。</li><li>该方法的主要作用是控制实例对象的创建过程，可以在创建实例之前做一些额外的处理，或者返回一个已有的实例（单例模式）。</li><li>如果重写了 <code>__new__</code> 方法，通常需要确保返回一个有效的实例对象，否则会导致后续的初始化（<code>__init__</code>）等步骤无法进行。</li></ul></li><li><p><code>__init__</code> 方法：</p><ul><li><code>__init__</code> 是一个实例级别的方法，负责初始化实例的属性。它在对象创建之后调用，接受实例对象作为第一个参数，然后可以传递其他参数来初始化实例的属性。</li><li>该方法的主要作用是设置对象的属性，进行一些必要的初始化操作。</li><li><code>__init__</code> 不负责创建实例对象，而是在实例已经创建之后，对其进行属性的初始化。</li></ul></li></ol><p>总结：</p><ul><li><code>__new__</code> 用于创建实例对象，它是类级别的方法，控制对象的创建过程。</li><li><code>__init__</code> 用于初始化实例对象的属性，它是实例级别的方法，对已经创建的对象进行属性的设置。</li></ul><p>通常情况下，当你想要自定义对象的创建过程时，你会重写 <code>__new__</code> 方法；而当你需要设置对象的属性或执行其他初始化操作时，你会重写 <code>__init__</code> 方法。</p><h2 id="五、请描述下python的多线程管理。" tabindex="-1"><a class="header-anchor" href="#五、请描述下python的多线程管理。" aria-hidden="true">#</a> 五、请描述下Python的多线程管理。</h2><p>在 Python 中，多线程管理是通过 <code>threading</code> 模块来实现的。Python 中的多线程是基于操作系统的线程实现的，但由于 Python 全局解释器锁（GIL）的存在，多线程并不能真正实现并行运行。GIL 导致在同一时刻只有一个线程可以执行 Python 字节码，从而限制了多线程在 CPU 密集型任务中的性能表现。</p><p>以下是 Python 多线程管理的一些关键概念和函数：</p><ol><li><p><strong>线程创建：</strong> 使用 <code>threading.Thread</code> 类可以创建一个新的线程。通过传入一个函数作为参数，可以指定线程要执行的操作。</p></li><li><p><strong>线程启动：</strong> 调用线程对象的 <code>start()</code> 方法会启动线程，并开始执行指定的函数。</p></li><li><p><strong>线程同步：</strong> 在多线程环境中，由于共享资源的存在，可能会出现竞争条件。为了确保线程安全，可以使用锁（<code>threading.Lock</code>）等同步原语来协调线程之间的操作。</p></li><li><p><strong>锁机制：</strong> 锁（<code>threading.Lock</code>）用于防止多个线程同时访问共享资源。在一个线程获得锁之后，其他线程必须等待锁被释放后才能获取锁。</p></li><li><p><strong>线程间通信：</strong> 多个线程之间可能需要相互通信和协调，可以使用 <code>threading.Event</code>、<code>threading.Condition</code>、<code>threading.Semaphore</code> 等进行线程间通信。</p></li><li><p><strong>线程状态：</strong> 线程可以处于不同的状态，如就绪、运行、阻塞等。可以使用线程对象的 <code>is_alive()</code> 方法来检查线程是否还在运行。</p></li><li><p><strong>守护线程：</strong> 可以将线程设置为守护线程（<code>thread.daemon = True</code>），这样在主线程退出时，守护线程会随之结束。</p></li><li><p><strong>线程池：</strong> <code>concurrent.futures</code> 模块提供了线程池和进程池的高级接口，用于并行地执行函数。</p></li></ol><p>需要注意的是，由于 GIL 的存在，Python 中的多线程主要适用于 I/O 密集型任务，如网络请求、文件操作等。对于 CPU 密集型任务，多线程并不能充分利用多核 CPU，此时可以考虑使用多进程来实现并行运算。</p><p>总的来说，Python 的多线程管理提供了一些基本的线程操作和同步机制，但由于 GIL 的限制，多线程在并行计算方面可能不如其他语言或多进程方式。</p><h2 id="六、请列出python中可变数据类型和不可变数据类型-cpython是如何实现的" tabindex="-1"><a class="header-anchor" href="#六、请列出python中可变数据类型和不可变数据类型-cpython是如何实现的" aria-hidden="true">#</a> 六、请列出Python中可变数据类型和不可变数据类型，CPython是如何实现的？</h2><p>在 Python 中，数据类型分为可变和不可变两种。可变数据类型是指对象的值可以被修改，而不可变数据类型是指对象的值一旦创建就无法更改。以下是 Python 中常见的可变和不可变数据类型：</p><p>可变数据类型（Mutable）：</p><ol><li>列表（List）</li><li>字典（Dictionary）</li><li>集合（Set）</li></ol><p>不可变数据类型（Immutable）：</p><ol><li>数字（int、float、complex）</li><li>字符串（str）</li><li>元组（tuple）</li><li>冻结集合（frozenset）</li></ol><p>CPython 是 Python 的标准实现，它在内存中的数据存储方式与数据类型的可变性密切相关。下面简要描述了 CPython 如何实现可变和不可变数据类型：</p><p><strong>可变数据类型（如列表、字典、集合）的实现：</strong></p><ol><li>在内存中创建一个对象，对象包含了实际的数据和相关的控制信息，如对象类型、大小等。</li><li>对象中的数据可以被修改，例如对列表进行添加、删除、修改等操作。这些操作可能会引起对象在内存中的位置发生变化，即重新分配内存空间。</li><li>当对象被修改时，CPython 会确保相关的引用仍然指向这个对象，从而保证所有引用该对象的变量都能看到修改后的值。</li></ol><p><strong>不可变数据类型（如数字、字符串、元组）的实现：</strong></p><ol><li>在内存中创建一个对象，对象包含实际的数据和控制信息。</li><li>一旦对象被创建，它的值就无法更改。如果对一个不可变对象进行修改操作，实际上会创建一个新的对象，并将修改后的值赋予新的对象。</li><li>不可变对象的值在内存中是固定的，这使得可以对多个变量共享同一个对象，从而节省内存。</li></ol><p>需要注意的是，不可变对象之所以被设计成不可变的，一方面是为了避免意外修改数据，另一方面是为了在实现中可以进行一些优化，例如缓存常见的不可变对象，以减少内存占用。</p><p>总之，CPython 的数据类型实现方式是基于对象和引用的，根据对象的可变性来决定如何存储和操作数据。这种实现方式使得 Python 的变量和数据类型的使用变得灵活且易于理解。</p><h2 id="七、请简述下python-协程的实现原理-协程一般适用于什么场景" tabindex="-1"><a class="header-anchor" href="#七、请简述下python-协程的实现原理-协程一般适用于什么场景" aria-hidden="true">#</a> 七、请简述下python 协程的实现原理？协程一般适用于什么场景？</h2><p>Python 协程的实现原理基于生成器（Generator）和 <code>yield</code> 关键字，以及使用特定的库（如 <code>asyncio</code>）来实现异步编程。协程通过避免阻塞并允许在单个线程内切换执行，实现了高效的异步操作。</p><p>实现协程的关键点如下：</p><ol><li><p><strong>生成器（Generator）：</strong> 生成器是一种特殊的函数，它使用 <code>yield</code> 关键字来暂停函数的执行并生成一个值，然后在后续调用中恢复执行。生成器在每次调用时会执行到 <code>yield</code> 语句，并将值返回给调用者。</p></li><li><p><strong><code>yield</code> 关键字：</strong> <code>yield</code> 用于将控制权返回给调用者，并且保留函数的状态。调用者可以使用 <code>.send()</code> 方法向生成器发送值，这个值会被 <code>yield</code> 表达式接收。</p></li><li><p><strong>异步库（如 asyncio）：</strong> 在 Python 中，为了实现高效的协程，通常使用异步库，如 <code>asyncio</code>。<code>asyncio</code> 提供了协程和事件循环，允许在单个线程内执行多个协程，根据需要进行切换。</p></li></ol><p>协程适用于以下场景：</p><ol><li><p><strong>异步编程：</strong> 协程在异步编程中起到关键作用。它可以处理大量并发任务，如网络请求、数据库查询等，而不会阻塞整个程序的执行。</p></li><li><p><strong>事件驱动编程：</strong> 协程适用于事件驱动的编程模型。例如，在用户交互、触发事件、消息传递等情况下，协程可以很好地处理异步任务。</p></li><li><p><strong>I/O 密集型任务：</strong> 当任务主要涉及 I/O 操作时，如读写文件、网络通信等，协程能够在 I/O 操作时切换到其他任务，从而提高程序的效率。</p></li><li><p><strong>并发任务管理：</strong> 协程可以方便地管理大量并发任务，而不需要关注线程或进程的开销和同步问题。</p></li></ol><p>总之，协程适用于需要高效处理异步操作和并发任务的场景。通过避免阻塞，协程可以在单线程内实现多个任务的协同执行，提高了程序的并发性能和响应性。</p><h2 id="八、请简述python的垃圾回收机制。" tabindex="-1"><a class="header-anchor" href="#八、请简述python的垃圾回收机制。" aria-hidden="true">#</a> 八、请简述Python的垃圾回收机制。</h2>`,70),d={href:"https://zhuanlan.zhihu.com/p/108683483",target:"_blank",rel:"noopener noreferrer"},r=n("br",null,null,-1),k={href:"https://cloud.tencent.com/developer/article/2045561",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",d,[a("Python语法入门之垃圾回收机制"),e(s)]),r,n("a",k,[a("一文读懂Python垃圾回收机制"),e(s)])])])}const y=t(l,[["render",v],["__file","20230830_kykj面试题.html.vue"]]);export{y as default};
