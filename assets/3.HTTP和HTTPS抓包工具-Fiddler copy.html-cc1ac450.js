import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,f as r}from"./app-967d79b2.js";const t="/assets/fidder_pro-ff51ec32.jpg",a="/assets/01-fidder-8266f06d.png",o="/assets/01-fidder_01忽略证书错误-88c22b06.png",d="/assets/01-fidder_03解决安全警告-c03a6d48.png",s="/assets/01-fidder_02连接-c36edda5.png",n="/assets/switchyomega-ef3a2f95.png",c="/assets/switchyomega_setting-06163d53.png",g="/assets/SwitchyOmega_switch-4ffdbd75.png",f="/assets/fiddler_show-f6c3e20b.png",h={},p=r('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是海鸽。今天我们来学习HTTP代理神器Fiddler。</p><p>Fiddler是一款强大Web调试工具，它能记录所有客户端和服务器的HTTP请求。 Fiddler启动的时候，默认IE的代理设为了127.0.0.1:8888，而其他浏览器是需要手动设置。</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><p>Fiddler 是以代理web服务器的形式工作的，它使用代理地址如：127.0.0.1，端口：8888</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="fiddler抓取https设置" tabindex="-1"><a class="header-anchor" href="#fiddler抓取https设置" aria-hidden="true">#</a> Fiddler抓取HTTPS设置</h2><ol><li>启动Fiddler，打开菜单栏中的 Tools &gt; Telerik Fiddler Options，打开“Fiddler Options”对话框。</li></ol><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>对Fiddler进行设置：</li></ol><ul><li>打开工具栏-&gt;Tools-&gt;Fiddler Options-&gt;HTTPS，</li><li>选中Capture HTTPS CONNECTs (捕捉HTTPS连接)，</li><li>选中Decrypt HTTPS traffic（解密HTTPS通信）</li><li>另外我们要用Fiddler获取本机所有进程的HTTPS请求，所以中间的下拉菜单中选中...from all processes （从所有进程）</li><li>选中下方Ignore server certificate errors（忽略服务器证书错误）</li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>为 Fiddler 配置Windows信任这个根证书解决安全警告：Trust Root Certificate（受信任的根证书）。</li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>Fiddler 主菜单 Tools -&gt; Fiddler Options…-&gt; Connections</li></ol><ul><li>选中Allow remote computers to connect（允许远程连接）</li><li>Act as system proxy on startup（作为系统启动代理）</li></ul><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>重启Fiddler，使配置生效（这一步很重要，必须做）。</li></ol><h2 id="fiddler-如何捕获chrome的会话" tabindex="-1"><a class="header-anchor" href="#fiddler-如何捕获chrome的会话" aria-hidden="true">#</a> Fiddler 如何捕获Chrome的会话</h2><ol><li>安装<code>SwitchyOmega</code>代理管理 Chrome 浏览器插件</li></ol><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>如图所示，设置代理服务器为127.0.0.1:8888</li></ol><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>通过浏览器插件切换为设置好的代理。</li></ol><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="fiddler界面" tabindex="-1"><a class="header-anchor" href="#fiddler界面" aria-hidden="true">#</a> Fiddler界面</h2><p>设置好后，本机HTTP通信都会经过127.0.0.1:8888代理，也就会被Fiddler拦截到。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="请求-request-部分详解" tabindex="-1"><a class="header-anchor" href="#请求-request-部分详解" aria-hidden="true">#</a> 请求 (Request) 部分详解</h3><ul><li>Headers —— 显示客户端发送到服务器的 HTTP 请求的 header，显示为一个分级视图，包含了 Web 客户端信息、Cookie、传输状态等。</li><li>Textview —— 显示 POST 请求的 body 部分为文本。</li><li>WebForms —— 显示请求的 GET 参数 和 POST body 内容。</li><li>HexView —— 用十六进制数据显示请求。</li><li>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息.</li><li>Raw —— 将整个请求显示为纯文本。</li><li>JSON - 显示JSON格式文件。</li><li>XML —— 如果请求的 body 是 XML 格式，就是用分级的 XML 树来显示它。</li></ul><h3 id="响应-response-部分详解" tabindex="-1"><a class="header-anchor" href="#响应-response-部分详解" aria-hidden="true">#</a> 响应 (Response) 部分详解</h3><ul><li>Transformer —— 显示响应的编码信息。</li><li>Headers —— 用分级视图显示响应的 header。</li><li>TextView —— 使用文本显示相应的 body。</li><li>ImageVies —— 如果请求是图片资源，显示响应的图片。</li><li>HexView —— 用十六进制数据显示响应。</li><li>WebView —— 响应在 Web 浏览器中的预览效果。</li><li>Auth —— 显示响应 header 中的 Proxy-Authorization(代理身份验证) 和 Authorization(授权) 信息。</li><li>Caching —— 显示此请求的缓存信息。</li><li>Privacy —— 显示此请求的私密 (P3P) 信息。</li><li>Raw —— 将整个响应显示为纯文本。</li><li>JSON - 显示JSON格式文件。</li><li>XML —— 如果响应的 body 是 XML 格式，就是用分级的 XML 树来显示它 。</li></ul><blockquote><p>喜欢这篇文章的话，可以关注一下我的公众号『<strong>海哥python</strong>』</p></blockquote>',33),u=[p];function _(T,m){return e(),l("div",null,u)}const x=i(h,[["render",_],["__file","3.HTTP和HTTPS抓包工具-Fiddler copy.html.vue"]]);export{x as default};
