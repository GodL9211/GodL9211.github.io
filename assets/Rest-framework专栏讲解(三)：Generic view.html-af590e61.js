import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as n,b as s,e as a,f as t}from"./app-967d79b2.js";const l={},r=t('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-rest-framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li></ul></li><li><a href="#%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE">通用视图</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li><li><a href="#api-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#genericapiview%E6%80%BB%E8%A7%88">GenericAPIView总览</a></li><li><a href="#%E5%B1%9E%E6%80%A7">属性</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE">基本设置</a></li><li><a href="#%E5%88%86%E9%A1%B5">分页</a></li><li><a href="#%E8%BF%87%E6%BB%A4">过滤</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95">方法</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95">基本方法</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E5%92%8C%E5%88%A0%E9%99%A4%E9%92%A9%E5%AD%90hook">保存和删除钩子（hook）</a></li><li><a href="#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95">其他方法</a></li></ul></li></ul></li><li><a href="#mixins">Mixins</a><ul><li><a href="#listmodelmixin">ListModelMixin</a></li><li><a href="#createmodelmixin">CreateModelMixin</a></li><li><a href="#retrievemodelmixin">RetrieveModelMixin</a></li><li><a href="#updatemodelmixin">UpdateModelMixin</a></li><li><a href="#destroymodelmixin">DestroyModelMixin</a></li></ul></li><li><a href="#%E5%86%85%E7%BD%AE%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%88%97%E8%A1%A8">内置视图类列表</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE%E7%B1%BB">自定义通用视图类</a><ul><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-mixins">自定义 mixins</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E7%B1%BB">自定义基类</a></li></ul></li></ul><hr>',3),d={id:"点击跳转到-rest-framework-专栏目录",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#点击跳转到-rest-framework-专栏目录","aria-hidden":"true"},"#",-1),k={href:"https://juejin.cn/post/6844904185163415566",title:"点击跳转到 Rest-Framework 专栏目录",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.django-rest-framework.org/api-guide/generic-views/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},v={id:"通用视图",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#通用视图","aria-hidden":"true"},"#",-1),h={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE",title:"通用视图",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"基于类的视图的一个主要优点是它们允许你编写可重复使用的行为。 REST framework 通过提供大量预构建视图来提供常用模式，从而充分利用了这一点。",-1),b=n("p",null,"REST framework 提供的通用视图允许您快速构建紧密映射到数据库模型的 API 视图。",-1),y=n("p",null,[s("如果通用视图不符合需求，可以使用常规的 "),n("code",null,"APIView"),s(" 类，或者利用 mixin 特性和基类组合出可重用的视图。")],-1),w={id:"举个栗子",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),E={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>通常，在使用通用视图时，您需要继承该视图，并设置几个类属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser

<span class="token keyword">class</span> <span class="token class-name">UserList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于更复杂的情况，您可能还想<code>重写视图类中的各种方法</code>，例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 注意使用\`get_queryset()\`而不是\`self.queryset\`</span>
        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于非常简单的情况，您可能想要使用 <code>.as_view()</code> 方法来传递类属性。例如，您的 URLconf 可能包含类似于以下条目的内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^/users/&#39;</span><span class="token punctuation">,</span> ListCreateAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>queryset<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serializer_class<span class="token operator">=</span>UserSerializer<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;user-list&#39;</span><span class="token punctuation">)</span>直接在 URLconf 中设置相关属性参数，这样连视图类都不用写了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>直接在 URLconf 中设置相关属性参数，这样连视图类都不用写了，不是很推荐。</p></blockquote>`,7),x={id:"api-参考",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),B={href:"http://drf.jiuyou.info/#/drf/genericviews?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},q=t(`<h3 id="genericapiview总览" tabindex="-1"><a class="header-anchor" href="#genericapiview总览" aria-hidden="true">#</a> GenericAPIView总览</h3><p><code>GenericAPIView</code> 类继承于 REST framework 的 <code>APIView</code> 类，为标准列表和详细视图添加了常见的行为。</p><p>内置的每一个具体的通用视图都是通过将 <code>GenericAPIView</code> 类和一个或多个 minxin 类相互结合来构建的。</p><p>了解到 <code>APIView</code> 之后, 你可以尝试看下 <code>GenericAPIView</code> 的源码, 导入路径是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser

<span class="token keyword">from</span> models <span class="token keyword">import</span> User


<span class="token keyword">class</span> <span class="token class-name">MedusaSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然, 可能在 <code>APIView</code> 上拓展了一些方法放我们的 API 撰写变得简单, 并且富有规范性, 但是相比较而言, 他的存在更加推荐和 <code>mixins</code> 一起使用,</p><ul><li><code>perform_create(self, serializer)</code> - CreateModelMixin 保存新对象实例时调用</li><li><code>perform_update(self, serializer)</code> - UpdateModelMixin 保存现有对象实例时调用</li><li><code>perform_destroy(self, instance)</code> - DestroyModelMixin 删除对象实例时调用</li></ul><p>例如你在新建实例对象进行保存处理的时候还需要做其他的处理, 你就可以在 <code>perform_create(self, serializer)</code> 中对它进行重写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instance <span class="token operator">=</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 你需要做的其他处理的函数, 或者代码块</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以对更新的数据进行再次验证, 引发 ValidationError() 异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">perform_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;我不管，我就是不让你更新。&#39;</span><span class="token punctuation">)</span>
    serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>user<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然啦, 还有 ListModelMixin 来获取数据集合的, RetrieveModelMixin 来获取某一数据详情的, 大多数的请求方式和请求内容都已经概括了。</p>`,13),I={id:"属性",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#",-1),U={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E5%B1%9E%E6%80%A7",title:"属性",target:"_blank",rel:"noopener noreferrer"},V={id:"基本设置",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#基本设置","aria-hidden":"true"},"#",-1),j={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE",title:"基本设置",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>在源码中可以看到他是在 <code>APIView</code> 的一种拓展, 当你继承这个视图类撰写自定义视图的时候, 你可以获取以下几个属性：</p><ul><li><code>queryset</code> - 用于从此视图返回对象的查询集。通常，您必须设置此属性，或覆盖 <code>get_queryset()</code>方法。如果你重写了一个视图方法，在视图方法中，你应该调用 <code>get_queryset()</code> 而不是直接访问这个属性，这一点很重要！因为 REST 会在内部对 <code>queryset</code> 的结果进行缓存用于后续所有请求。</li><li><code>serializer_class</code> - 用于验证和反序列化输入以及序列化输出的序列化类。通常，您必须设置此属性，或覆盖 <code>get_serializer_class()</code> 方法。</li><li><code>lookup_field</code> - 用于执行各个模型实例的对象查找的模型字段。默认为 <code>&#39;pk&#39;</code>。请注意，使用 hyperlinked API 时，如果需要使用自定义值，则需要确保 API 视图和序列化类设置了 lookup field。</li><li><code>lookup_url_kwarg</code> - 用于对象查找的 URL 关键字参数。URL conf 应该包含与此值相对应的关键字参数。如果未设置，则默认使用与 <code>lookup_field</code> 相同的值。</li></ul><p>关于后两个参数，我这里附上对象查询的源码大家就应该了解了。<br> 省略部分代码，方便理解</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 先获取数据集</span>
    queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 拿到查询参数的 key</span>
    lookup_url_kwarg <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup_url_kwarg <span class="token keyword">or</span> self<span class="token punctuation">.</span>lookup_field
    <span class="token comment"># 组装成 {key:value} 的形式</span>
    filter_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>self<span class="token punctuation">.</span>lookup_field<span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span>lookup_url_kwarg<span class="token punctuation">]</span><span class="token punctuation">}</span>
    <span class="token comment"># 查询</span>
    obj <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> <span class="token operator">**</span>filter_kwargs<span class="token punctuation">)</span>
    <span class="token comment"># 最后返回</span>
    <span class="token keyword">return</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),F={id:"分页",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#分页","aria-hidden":"true"},"#",-1),C={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E5%88%86%E9%A1%B5",title:"分页",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"与列表视图一起使用时，以下属性用于控制分页。",-1),L=n("ul",null,[n("li",null,[n("code",null,"pagination_class"),s(" - 对列表进行分页时使用的分页类。默认值与 "),n("code",null,"DEFAULT_PAGINATION_CLASS"),s(" 设置相同，即 "),n("code",null,"rest_framework.pagination.PageNumberPagination"),s("。设置 "),n("code",null,"pagination_class = None"),s(" 将禁用此视图的分页。")])],-1),D={id:"过滤",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#过滤","aria-hidden":"true"},"#",-1),N={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E8%BF%87%E6%BB%A4",title:"过滤",target:"_blank",rel:"noopener noreferrer"},H=n("ul",null,[n("li",null,[n("code",null,"filter_backends"),s(" - 用于过滤查询集的过滤器类的列表。默认值与 "),n("code",null,"DEFAULT_FILTER_BACKENDS"),s(" 设置的值相同。")])],-1),O={id:"方法",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#方法","aria-hidden":"true"},"#",-1),Y={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E6%96%B9%E6%B3%95",title:"方法",target:"_blank",rel:"noopener noreferrer"},J={id:"基本方法",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#基本方法","aria-hidden":"true"},"#",-1),W={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95",title:"基本方法",target:"_blank",rel:"noopener noreferrer"},X=t(`<p><code>get_queryset(self)</code></p><p>应该返回列表视图的查询集，并应该将其用作查看详细视图的基础。默认返回由 <code>queryset</code> 属性指定的查询集。</p><p>应该始终使用此方法， 而不是直接访问 <code>self.queryset</code>，因为 REST 会在内部对 <code>self.queryset</code> 的结果进行缓存用于后续所有请求。</p><p>可以覆盖以提供动态行为，例如针对不同用户的请求返回不同的数据。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
    <span class="token keyword">return</span> user<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get_object(self)</code></p><p>应该返回详细视图的对象实例。默认使用 <code>lookup_field</code> 参数来过滤基本查询集。</p><p>可以覆盖以提供更复杂的行为，例如基于多个 URL kwarg 的对象查找。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">filter</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> field <span class="token keyword">in</span> self<span class="token punctuation">.</span>multiple_lookup_fields<span class="token punctuation">:</span>
        <span class="token builtin">filter</span><span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span>field<span class="token punctuation">]</span>

    obj <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> <span class="token operator">**</span><span class="token builtin">filter</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>check_object_permissions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
    <span class="token keyword">return</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果您的 API 不包含任何对象级权限，您可以选择排除 <code>self.check_object_permissions</code>，并简单地从 <code>get_object_or_404</code> 中查找返回对象。</p><p><code>filter_queryset(self, queryset)</code></p><p>给定一个查询集，使用过滤器进行过滤，返回一个新的查询集。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>CategoryFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token string">&#39;geo_route&#39;</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">:</span>
        filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>GeoRouteFilter<span class="token punctuation">,</span> CategoryFilter<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token string">&#39;geo_point&#39;</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">:</span>
        filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>GeoPointFilter<span class="token punctuation">,</span> CategoryFilter<span class="token punctuation">)</span>

    <span class="token keyword">for</span> backend <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token operator">=</span>self<span class="token punctuation">)</span>

    <span class="token keyword">return</span> queryset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get_serializer_class(self)</code></p><p>返回用于序列化的类。默认返回 <code>serializer_class</code> 属性。</p><p>可以被覆盖以提供动态行为，例如使用不同的序列化器进行读写操作，或为不同类型的用户提供不同的序列化器。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_staff<span class="token punctuation">:</span>
        <span class="token keyword">return</span> FullAccountSerializer
    <span class="token keyword">return</span> BasicAccountSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),Z={id:"保存和删除钩子-hook",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#保存和删除钩子-hook","aria-hidden":"true"},"#",-1),nn={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E4%BF%9D%E5%AD%98%E5%92%8C%E5%88%A0%E9%99%A4%E9%92%A9%E5%AD%90%EF%BC%88hook%EF%BC%89",title:"保存和删除钩子（hook）",target:"_blank",rel:"noopener noreferrer"},sn=t(`<p>以下方法由 mixin 类提供，可以很轻松的重写对象的保存和删除行为。</p><ul><li><code>perform_create(self, serializer)</code> - 保存新对象实例时由 <code>CreateModelMixin</code> 调用。</li><li><code>perform_update(self, serializer)</code> - 在保存现有对象实例时由 <code>UpdateModelMixin</code> 调用。</li><li><code>perform_destroy(self, instance)</code> - 删除对象实例时由 <code>DestroyModelMixin</code> 调用。</li></ul><p>这些钩子（hook）对设置请求中隐含的但不属于请求数据的属性特别有用。例如，您可以根据请求用户或基于 URL 关键字参数在对象上设置属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>user<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些覆盖点对于添加保存对象之前或之后发生的行为（如发送确认电子邮件或记录更新）也特别有用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> SignupRequest<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>user<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
    <span class="token keyword">if</span> queryset<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;You have already signed up&#39;</span><span class="token punctuation">)</span>
    serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>user<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这些方法替代旧式版本2.x <code>pre_save</code>，<code>post_save</code>，<code>pre_delete</code> 和 <code>post_delete</code> 方法，这些方法不再可用。</p>`,7),en={id:"其他方法",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#其他方法","aria-hidden":"true"},"#",-1),tn={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95",title:"其他方法",target:"_blank",rel:"noopener noreferrer"},on=t("<p>通常不需要重写以下方法，但如果使用 <code>GenericAPIView</code> 编写自定义视图，则可能需要调用它们。</p><ul><li><code>get_serializer_context(self)</code> - 返回包含应该提供给序列化的任何额外上下文的字典。默认包括 <code>&#39;request&#39;</code>, <code>&#39;view&#39;</code> 和 <code>&#39;format&#39;</code> 键。</li><li><code>get_serializer(self, instance=None, data=None, many=False, partial=False)</code> - 返回一个序列化器实例。</li><li><code>get_paginated_response(self, data)</code> - 返回分页样式的 <code>Response</code> 对象。</li><li><code>paginate_queryset(self, queryset)</code> - 根据需要为查询集分页，或者返回一个页面对象；如果没有为该视图配置分页，则为 <code>None</code>。</li><li><code>filter_queryset(self, queryset)</code> - 给定一个查询集，使用过滤器进行过滤，返回一个新的查询集。</li></ul>",2),pn={id:"mixins",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#mixins","aria-hidden":"true"},"#",-1),ln={href:"http://drf.jiuyou.info/#/drf/genericviews?id=mixins",title:"Mixins",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>mixin 类用于提供基本视图行为的操作。请注意，mixin 类提供了操作方法，而不是直接定义处理方法，如 <code>.get()</code> 和 <code>.post()</code>。这允许更灵活的行为组合。</p><p>mixin 类可以从 <code>rest_framework.mixins</code> 中导入。</p><h3 id="listmodelmixin" tabindex="-1"><a class="header-anchor" href="#listmodelmixin" aria-hidden="true">#</a> ListModelMixin</h3><p>提供了 <code>.list(request, *args, **kwargs)</code> 方法, 用于查询对象集合, 你也可以重写他的 <code>list</code> 方法实现你自己的返回体, 你也可以对他进行数据分页(<strong>分页</strong> 将会在以后讲解到), 当你查询成功了, 将会返回 <code>200 OK</code> 的状态码给你：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> ListModelMixin
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">,</span> ListModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createmodelmixin" tabindex="-1"><a class="header-anchor" href="#createmodelmixin" aria-hidden="true">#</a> CreateModelMixin</h3><p>提供 <code>.create(request, *args, **kwargs)</code> 方法, 该方法实现创建并保存模型的新实例对象, 如果成功创建对象则返回一个 <code>201 Created</code> 响应, 如果提供的用于创建对象的请求数据无效, 则会返回一个 <code>400 Bad Request</code> 响应, 并将错误详细信息作为响应的正文。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> CreateModelMixin
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="retrievemodelmixin" tabindex="-1"><a class="header-anchor" href="#retrievemodelmixin" aria-hidden="true">#</a> RetrieveModelMixin</h3><p>提供 <code>.retrieve(request, *args, **kwargs)</code> 方法, 该方法实现在响应中返回现有模型实例的详情数据, 如果可以检索到对象, 则返回一个 <code>200 OK</code> 响应, 否则将返回 <code>404 Not Found</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> RetrieveModelMixin
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">,</span> RetrieveModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updatemodelmixin" tabindex="-1"><a class="header-anchor" href="#updatemodelmixin" aria-hidden="true">#</a> UpdateModelMixin</h3><p>提供 <code>.update(request, *args, **kwargs)</code> 方法, 该方法实现更新并保存现有模型的实例， 还提供了一种 <code>.partial_update(request, *args, **kwargs)</code> 方法, 该方法与该 <code>update</code> 方法类似, 但是用于更新的所有字段都是可选的, 这样可以支持 <code>HTTP PATCH</code> 请求(作者在实际开发中, 会对 <code>UpdateModelsMixin</code> 重新定义, 删除对 <code>HTTP PATCH</code> 请求方式的支持), 如果对象被更新, 它将返回一个 <code>200 OK</code> 响应, 如果提供的用于更新对象的请求数据无效, 则会返回 <code>400 Bad Request</code> 响应, 并将错误详细信息作为响应的主体。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> UpdateModelMixin
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">,</span> UpdateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="destroymodelmixin" tabindex="-1"><a class="header-anchor" href="#destroymodelmixin" aria-hidden="true">#</a> DestroyModelMixin</h3><p>提供 <code>.destroy(request, *args, **kwargs)</code> 方法, 该方法实现删除现有模型实例, 如果删除对象成功则返回 <code>204 No Content</code> 响应, 否则将返回 <code>404 Not Found</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>generics <span class="token keyword">import</span> GenericAPIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> DestroyModelMixin
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">,</span> DestroyModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> MedusaSerializer
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置视图类列表" tabindex="-1"><a class="header-anchor" href="#内置视图类列表" aria-hidden="true">#</a> 内置视图类列表</h2><p>以下类是具体的通用视图。通常情况下，你应该都是使用的它们，除非需要高度的自定义行为。</p><p>这些视图类可以从 <code>rest_framework.generics</code> 中导入。</p><ul><li><p><code>CreateAPIView</code></p><p>用于仅创建新模型实例对象的视图 </p><p>提供 <code>POST</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>CreateModelMixin</code></p></li><li><p><code>ListAPIView</code></p><p>用于仅只读模型实例对象集合数据的视图 </p><p>提供 <code>GET</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>ListModelMixin</code></p></li><li><p><code>RetrieveAPIView</code></p><p>用于仅只读单个模型实例对象的视图 </p><p>提供 <code>GET</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>RetrieveModelMixin</code></p></li><li><p><code>DestroyAPIView</code></p><p>用于仅删除单个模型实例对象的视图 </p><p>提供 <code>DELETE</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>DestroyModelMixin</code></p></li><li><p><code>UpdateAPIView</code></p><p>用于仅对已有模型实例进行修改的视图 </p><p>提供 <code>PUT</code> 和 <code>PATCH</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>UpdateModelMixin</code></p></li><li><p><code>ListCreateAPIView</code></p><p>用于对模型实例对象集读取和写入的视图 </p><p>提供 <code>GET</code> 和 <code>POST</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>ListModelMixin</code>, <code>CreateModelMixin</code></p></li><li><p><code>RetrieveUpdateAPIView</code></p><p>用于对单个模型实例的读取和更新的视图 </p><p>提供 <code>GET</code>、 <code>PUT</code> 和 <code>PATCH</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code></p></li><li><p><code>RetrieveDestroyAPIView</code></p><p>用于对单个模型实例的读取和删除的视图 </p><p>提供 <code>GET</code> 和 <code>DELETE</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>RetrieveModelMixin</code>, <code>DestroyModelMixin</code></p></li><li><p><code>RetrieveUpdateDestroyAPIView</code></p><p>用于对单个模型实例的读取、更新和删除的视图 </p><p>提供 <code>GET</code>、<code>PUT</code>、<code>PATCH</code> 和 <code>DELETE</code> 请求方式 </p><p>依赖：<code>GenericAPIView</code>, <code>RetrieveModelMixin</code>, <code>UpdateModelMixin</code>, <code>DestroyModelMixin</code></p></li></ul>`,21),dn={id:"自定义通用视图类",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#自定义通用视图类","aria-hidden":"true"},"#",-1),kn={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE%E7%B1%BB",title:"自定义通用视图类",target:"_blank",rel:"noopener noreferrer"},mn=n("p",null,"通常你会想使用现有的通用视图，然后稍微定制一下行为。如果您发现自己在多个地方重复使用了一些自定义行为，则可能需要将行为重构为普通类，然后根据需要将其应用于任何视图或视图集。",-1),vn={id:"自定义-mixins",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#自定义-mixins","aria-hidden":"true"},"#",-1),hn={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E8%87%AA%E5%AE%9A%E4%B9%89-mixins",title:"自定义 mixins",target:"_blank",rel:"noopener noreferrer"},fn=t(`<p>例如，如果您需要根据 URL conf 中的多个字段查找对象，则可以创建一个 mixin 类。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MultipleFieldLookupMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    将此 mixin 应用于任何视图或视图集以获取多个字段过滤
    基于\`lookup_fields\`属性，而不是默认的单个字段过滤。
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment"># 获取基本的查询集</span>
        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>queryset<span class="token punctuation">)</span>  <span class="token comment"># 使用过滤器</span>
        <span class="token builtin">filter</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> field <span class="token keyword">in</span> self<span class="token punctuation">.</span>lookup_fields<span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 忽略空字段</span>
                <span class="token builtin">filter</span><span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span>field<span class="token punctuation">]</span>
        obj <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> <span class="token operator">**</span><span class="token builtin">filter</span><span class="token punctuation">)</span>  <span class="token comment"># 查找对象</span>
        self<span class="token punctuation">.</span>check_object_permissions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
        <span class="token keyword">return</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后可以在需要应用自定义行为的任​​何时候，将该 mixin 应用于视图或视图集。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">RetrieveUserView</span><span class="token punctuation">(</span>MultipleFieldLookupMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>RetrieveAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    lookup_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;account&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您需要使用自定义行为，那么使用自定义 mixins 是一个不错的选择。</p>`,6),bn={id:"自定义基类",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#自定义基类","aria-hidden":"true"},"#",-1),wn={href:"http://drf.jiuyou.info/#/drf/genericviews?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E7%B1%BB",title:"自定义基类",target:"_blank",rel:"noopener noreferrer"},gn=t(`<p>如果您在多个视图中使用 mixin，您可以进一步创建自己的一组基本视图，然后在整个项目中使用它们。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BaseRetrieveView</span><span class="token punctuation">(</span>MultipleFieldLookupMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>RetrieveAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">BaseRetrieveUpdateDestroyView</span><span class="token punctuation">(</span>MultipleFieldLookupMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果自定义行为始终需要在整个项目中的大量视图中重复使用，那么使用自定义基类是一个不错的选择。</p>`,3);function En(An,xn){const e=i("ExternalLinkIcon");return p(),c("div",null,[r,n("h4",d,[u,s(),n("a",k,[s("点击跳转到 Rest-Framework 专栏目录"),a(e)])]),n("blockquote",null,[n("p",null,[n("a",m,[s("官方原文链接"),a(e)])])]),n("h2",v,[_,s(),n("a",h,[s("通用视图"),a(e)])]),f,b,y,n("h3",w,[g,s(),n("a",E,[s("举个栗子"),a(e)])]),A,n("h2",x,[M,s(),n("a",B,[s("API 参考"),a(e)])]),q,n("h3",I,[P,s(),n("a",U,[s("属性"),a(e)])]),n("h4",V,[z,s(),n("a",j,[s("基本设置"),a(e)])]),R,n("h4",F,[T,s(),n("a",C,[s("分页"),a(e)])]),G,L,n("h4",D,[S,s(),n("a",N,[s("过滤"),a(e)])]),H,n("h3",O,[K,s(),n("a",Y,[s("方法"),a(e)])]),n("h4",J,[Q,s(),n("a",W,[s("基本方法"),a(e)])]),X,n("h4",Z,[$,s(),n("a",nn,[s("保存和删除钩子（hook）"),a(e)])]),sn,n("h4",en,[an,s(),n("a",tn,[s("其他方法"),a(e)])]),on,n("h2",pn,[cn,s(),n("a",ln,[s("Mixins"),a(e)])]),rn,n("h2",dn,[un,s(),n("a",kn,[s("自定义通用视图类"),a(e)])]),mn,n("h3",vn,[_n,s(),n("a",hn,[s("自定义 mixins"),a(e)])]),fn,n("h3",bn,[yn,s(),n("a",wn,[s("自定义基类"),a(e)])]),gn])}const qn=o(l,[["render",En],["__file","Rest-framework专栏讲解(三)：Generic view.html.vue"]]);export{qn as default};
