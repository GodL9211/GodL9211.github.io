import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as s,e,f as t}from"./app-9976b6d0.js";const l="/assets/tesseracttest-839ccafb.jpg",r="/assets/tesseract_test-19f24762.png",u="/assets/tess2-d3884428.jpg",d="/assets/tesseracttesst-8323db09.png",k="/assets/tess2clean-9f050a58.png",m="/assets/tesseracttest3-24931233.png",v="/assets/6.9-d61bd809.png",b={},h=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),g=n("p",null,"大家好，我是海鸽。",-1),_=n("p",null,"从 Google 的无人驾驶汽车到可以识别假钞的自动售卖机，机器视觉一直都是一个应用广 泛且具有深远的影响和雄伟的愿景的领域。",-1),f=n("p",null,"我们将重点介绍机器视觉的一个分支：文字识别，介绍如何用一些 Python库来识别和使用在线图片中的文字。",-1),x=n("p",null,"我们可以很轻松的阅读图片里的文字，但是机器阅读这些图片就会非常困难，利用这种人类用户可以正常读取但是大多数机器人都没法读取的图片，验证码 (CAPTCHA)就出现了。验证码读取的难易程度也大不相同，有些验证码比其他的更加难读。",-1),w=n("p",null,"将图像翻译成文字一般被称为光学文字识别(Optical Character Recognition, OCR)。可以实现OCR的底层库并不多,目前很多库都是使用共同的几个底层 OCR 库,或者是在上面 进行定制。",-1),y=n("h2",{id:"orc库概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#orc库概述","aria-hidden":"true"},"#"),s(" ORC库概述")],-1),q={href:"https://pypi.python.org/pypi/pytesseract",target:"_blank",rel:"noopener noreferrer"},T=t('<h3 id="tesseract" tabindex="-1"><a class="header-anchor" href="#tesseract" aria-hidden="true">#</a> Tesseract</h3><p>Tesseract 是一个 OCR 库,目前由 Google 赞助(Google 也是一家以 OCR 和机器学习技术闻名于世的公司)。Tesseract 是目前公认最优秀、最精确的开源 OCR 系统。 除了极高的精确度,Tesseract 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何 Unicode 字符。</p><h2 id="安装tesseract" tabindex="-1"><a class="header-anchor" href="#安装tesseract" aria-hidden="true">#</a> 安装Tesseract</h2><h3 id="windows-系统" tabindex="-1"><a class="header-anchor" href="#windows-系统" aria-hidden="true">#</a> Windows 系统</h3>',4),P={href:"https://code.google.com/p/tesseract-ocr/downloads/list%E5%AE%89%E8%A3%85%E3%80%82",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"linux-系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#linux-系统","aria-hidden":"true"},"#"),s(" Linux 系统")],-1),R=n("p",null,[s("可以通过 apt-get 安装: "),n("code",null,"$sudo apt-get tesseract-ocr")],-1),I=n("h3",{id:"mac-os-x系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mac-os-x系统","aria-hidden":"true"},"#"),s(" Mac OS X系统")],-1),E={href:"http://brew.sh/",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"brew install tesseract",-1),A=t(`<h5 id="要使用-tesseract-的功能-比如后面的示例中训练程序识别字母-要先在系统中设置一-个新的环境变量-tessdata-prefix-让-tesseract-知道训练的数据文件存储在哪里-然后搞一份tessdata数据文件-放到tesseract目录下。" tabindex="-1"><a class="header-anchor" href="#要使用-tesseract-的功能-比如后面的示例中训练程序识别字母-要先在系统中设置一-个新的环境变量-tessdata-prefix-让-tesseract-知道训练的数据文件存储在哪里-然后搞一份tessdata数据文件-放到tesseract目录下。" aria-hidden="true">#</a> 要使用 Tesseract 的功能，比如后面的示例中训练程序识别字母，要先在系统中设置一 个新的环境变量 <code>$TESSDATA_PREFIX</code>，让 Tesseract 知道训练的数据文件存储在哪里，然后搞一份tessdata数据文件，放到Tesseract目录下。</h5><ul><li>在大多数 Linux 系统和 Mac OS X 系统上,你可以这么设置: <code>$export TESSDATA_PREFIX=/usr/local/share/Tesseract</code></li><li>在 Windows 系统上也类似,你可以通过下面这行命令设置环境变量: <code>#setx TESSDATA_PREFIX C:\\Program Files\\Tesseract OCR\\Tesseract</code></li></ul><h2 id="安装pytesseract" tabindex="-1"><a class="header-anchor" href="#安装pytesseract" aria-hidden="true">#</a> 安装pytesseract</h2><p>Tesseract 是一个 Python 的命令行工具，不是通过 import 语句导入的库。安装之后,要用 tesseract 命令在 Python 的外面运行，但我们可以通过 pip 安装支持Python 版本的 Tesseract库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install pytesseract
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="处理给规范的文字" tabindex="-1"><a class="header-anchor" href="#处理给规范的文字" aria-hidden="true">#</a> 处理给规范的文字</h2><p>你要处理的大多数文字都是比较干净、格式规范的。格式规范的文字通常可以满足一些需求,不过究竟什么是“格式混乱”,什么算“格式规范”,确实因人而异。 通常,格式规范的文字具有以下特点:</p><ul><li>使用一个标准字体(不包含手写体、草书,或者十分“花哨的”字体) • 虽然被复印或拍照,字体还是很清晰,没有多余的痕迹或污点</li><li>排列整齐,没有歪歪斜斜的字</li><li>没有超出图片范围,也没有残缺不全,或紧紧贴在图片的边缘</li></ul><p>文字的一些格式问题在图片预处理时可以进行解决。例如,可以把图片转换成灰度图,调 整亮度和对比度,还可以根据需要进行裁剪和旋转（详情请关注图像与信号处理），但是,这些做法在进行更具扩展性的 训练时会遇到一些限制。</p><h3 id="格式规范文字的理想示例" tabindex="-1"><a class="header-anchor" href="#格式规范文字的理想示例" aria-hidden="true">#</a> 格式规范文字的理想示例</h3><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过下面的命令运行 Tesseract，读取文件并把结果写到一个文本文件中: <code>tesseract test.jpg text</code></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>cat text.txt</code>即可显示结果。</p><p>识别结果很准确,不过符号^和*分别被表示成了双引号和单引号。大体上可以让你很舒服地阅读。</p><p>通过Python代码实现<br> import pytesseract<br> from PIL import Image</p><p>image = Image.open(&#39;test.jpg&#39;)<br> text = pytesseract.image_to_string(image)<br> print text<br> 运行结果：</p><p>This is some text, written in Arial, that will be read by<br> Tesseract. Here are some symbols: !@#$%&quot;&amp;*()<br> 对图片进行阈值过滤和降噪处理（了解即可）</p><p>很多时候我们在网上会看到这样的图片：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Tesseract 不能完整处理这个图片,主要是因为图片背景色是渐变的,最终结果是这样:</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>随着背景色从左到右不断加深,文字变得越来越难以识别,Tesseract 识别出的 每一行的最后几个字符都是错的。</p><p>遇到这类问题,可以先用 Python 脚本对图片进行清理。利用 Pillow 库,我们可以创建一个 阈值过滤器来去掉渐变的背景色,只把文字留下来,从而让图片更加清晰,便于 Tesseract 读取:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image 
<span class="token keyword">import</span> subprocess

<span class="token keyword">def</span> <span class="token function">cleanFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> newFilePath<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>

    <span class="token comment"># 对图片进行阈值过滤,然后保存</span>
    image <span class="token operator">=</span> image<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">143</span> <span class="token keyword">else</span> <span class="token number">255</span><span class="token punctuation">)</span>     
    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>newFilePath<span class="token punctuation">)</span>

    <span class="token comment"># 调用系统的tesseract命令对图片进行OCR识别     </span>
    subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;tesseract&quot;</span><span class="token punctuation">,</span> newFilePath<span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 打开文件读取结果</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>     
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

cleanFile<span class="token punctuation">(</span><span class="token string">&quot;text2.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text2clean.png&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过一个阈值对前面的“模糊”图片进行过滤的结果</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了一些标点符号不太清晰或丢失了,大部分文字都被读出来了。Tesseract 给出了最好的 结果:</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="从网站图片中抓取文字" tabindex="-1"><a class="header-anchor" href="#从网站图片中抓取文字" aria-hidden="true">#</a> 从网站图片中抓取文字</h2><p>用 Tesseract 读取硬盘里图片上的文字,可能不怎么令人兴奋,但当我们把它和网络爬虫组合使用时,就能成为一个强大的工具。</p><p>网站上的图片可能并不是故意把文字做得很花哨 (就像餐馆菜单的 JPG 图片上的艺术字),但它们上面的文字对网络爬虫来说就是隐藏起来 了，举个例子：</p><ul><li>虽然亚马逊的 robots.txt 文件允许抓取网站的产品页面,但是图书的预览页通常不让网络机 器人采集。</li><li>图书的预览页是通过用户触发 Ajax 脚本进行加载的,预览图片隐藏在 div 节点 下面;其实,普通的访问者会觉得它们看起来更像是一个 Flash 动画,而不是一个图片文 件。当然,即使我们能获得图片,要把它们读成文字也没那么简单。</li><li>下面的程序就解决了这个问题:首先导航到托尔斯泰的《战争与和平》的大字号印刷版 1, 打开阅读器,收集图片的 URL 链接,然后下载图片,识别图片,最后打印每个图片的文 字。因为这个程序很复杂,利用了前面几章的多个程序片段,所以我增加了一些注释以让 每段代码的目的更加清晰:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlretrieve 
<span class="token keyword">import</span> subprocess
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token comment">#创建新的Selenium driver</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 用Selenium试试Firefox浏览器:</span>
<span class="token comment"># driver = webdriver.Firefox()</span>

driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.amazon.com/War-Peace-Leo-Nikolayevich-Tolstoy/dp/1427030200&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 单击图书预览按钮 driver.find_element_by_id(&quot;sitbLogoImg&quot;).click() imageList = set()</span>
<span class="token comment"># 等待页面加载完成</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 当向右箭头可以点击时,开始翻页</span>
<span class="token keyword">while</span> <span class="token string">&quot;pointer&quot;</span> <span class="token keyword">in</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;sitbReaderRightPageTurner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;sitbReaderRightPageTurner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment"># 获取已加载的新页面(一次可以加载多个页面,但是重复的页面不能加载到集合中) </span>
    pages <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">&quot;//div[@class=&#39;pageImage&#39;]/div/img&quot;</span><span class="token punctuation">)</span> 
    <span class="token keyword">for</span> page <span class="token keyword">in</span> pages<span class="token punctuation">:</span>
        image <span class="token operator">=</span> page<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span>
        imageList<span class="token punctuation">.</span>add<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 用Tesseract处理我们收集的图片URL链接 </span>
<span class="token keyword">for</span> image <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>imageList<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 保存图片</span>
    urlretrieve<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">&quot;page.jpg&quot;</span><span class="token punctuation">)</span>
    p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;tesseract&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;page.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;page&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;page.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和我们前面使用 Tesseract 读取的效果一样,这个程序也会完美地打印书中很多长长的段 落,第六页的预览如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6
     &quot;A word of friendly advice, mon
     cher. Be off as soon as you can,
     that&#39;s all I have to tell you. Happy
     he who has ears to hear. Good-by,
     my dear fellow. Oh, by the by!&quot; he
     shouted through the doorway after
     Pierre, &quot;is it true that the countess
     has fallen into the clutches of the
     holy fathers of the Society of je-
     sus?&quot;

     Pierre did not answer and left Ros-
     topchin&#39;s room more sullen and an-
     gry than he had ever before shown
     himself.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是,当文字出现在彩色封面上时,结果就不那么完美了:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>   WEI&#39; nrrd Peace
   Len Nlkelayevldu Iolfluy
   Readmg shmdd be ax
   wlnvame asnossxble Wenfler
   an mm m our cram: Llhvary
    - Leo Tmsloy was a Russian rwovelwst
    I and moval phflmopher med lur
    A ms Ideas 01 nonviolenx reswslance m 5 We range     0, &quot;and&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想把文字加工成普通人可以看懂的 效果,还需要花很多时间去处理。</p><p>下一节将介绍另一种方法来解决文字混乱的问题,尤其是当你愿意花一点儿时间训练 Tesseract 的时候。</p><p>通过给 Tesseract 提供大量已知的文字与图片映射集,经过训练 Tesseract 就可以“学会”识别同一种字体,而且可以达到极高的精确率和准确率,甚至可以忽略图 片中文字的背景色和相对位置等问题。</p><h2 id="尝试对知乎网验证码进行处理" tabindex="-1"><a class="header-anchor" href="#尝试对知乎网验证码进行处理" aria-hidden="true">#</a> 尝试对知乎网验证码进行处理</h2><p>许多流行的内容管理系统即使加了验证码模块，其众所周知的注册页面也经常会遭到网络 机器人的垃圾注册。</p><p>那么，这些网络机器人究，竟是怎么做的呢?既然我们已经，可以成功地识别出保存在电脑上 的验证码了，那么如何才能实现一个全能的网络机器人呢?</p><p>大多数网站生成的验证码图片都具有以下属性。</p><ul><li>它们是服务器端的程序动态生成的图片。验证码图片的 src 属性可能和普通图片不太一 样，比如 \`\`，但是可以和其他图片一样进行 下载和处理。</li><li>图片的答案存储在服务器端的数据库里。</li><li>很多验证码都有时间限制，如果你太长时间没解决就会失效。</li><li>常用的处理方法就是，首先把验证码图片下载到硬盘里，清理干净，然后用 Tesseract 处理 图片，最后返回符合网站要求的识别结果。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding:utf-8 -*-</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
<span class="token keyword">import</span> pytesseract
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

<span class="token keyword">def</span> <span class="token function">captcha</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;captcha.jpg&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;captcha.jpg&quot;</span><span class="token punctuation">)</span>
    text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">&quot;机器识别后的验证码为：&quot;</span> <span class="token operator">+</span> text
    command <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入Y表示同意使用，按其他键自行重新输入：&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token string">&quot;Y&quot;</span> <span class="token keyword">or</span> command <span class="token operator">==</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> text
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&#39;输入验证码：&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">zhihuLogin</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment"># 构建一个保存Cookie值的session对象</span>
    sessiona <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&#39;</span><span class="token punctuation">}</span>

    <span class="token comment"># 先获取页面信息，找到需要POST的数据（并且已记录当前页面的Cookie）</span>
    html <span class="token operator">=</span> sessiona<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.zhihu.com/#signin&#39;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content

    <span class="token comment"># 找到 name 属性值为 _xsrf 的input标签，取出value里的值</span>
    _xsrf <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html <span class="token punctuation">,</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;_xsrf&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 取出验证码，r后面的值是Unix时间戳,time.time()</span>
    captcha_url <span class="token operator">=</span> <span class="token string">&#39;https://www.zhihu.com/captcha.gif?r=%d&amp;type=login&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> sessiona<span class="token punctuation">.</span>get<span class="token punctuation">(</span>captcha_url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>


    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;_xsrf&quot;</span><span class="token punctuation">:</span>_xsrf<span class="token punctuation">,</span>
        <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span>username<span class="token punctuation">,</span>
        <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span>password<span class="token punctuation">,</span>
        <span class="token string">&quot;remember_me&quot;</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        <span class="token string">&quot;captcha&quot;</span><span class="token punctuation">:</span> captcha<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    response <span class="token operator">=</span> sessiona<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;https://www.zhihu.com/login/email&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=</span> data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">print</span> response<span class="token punctuation">.</span>text

    response <span class="token operator">=</span> sessiona<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.zhihu.com/people/maozhaojun/activities&#39;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">print</span> response<span class="token punctuation">.</span>text


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment">#username = raw_input(&quot;username&quot;)</span>
    <span class="token comment">#password = raw_input(&quot;password&quot;)</span>
    zhihuLogin<span class="token punctuation">(</span><span class="token string">&#39;xxxx@qq.com&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ALAxxxxIME&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，有两种异常情况会导致这个程序运行失败。第一种情况是，如果 Tesseract 从验证码图片中识别的结果不是四个字符(因为训练样本中验证码的所有有效答案都必须 是四个字符)，结果不会被提交，程序失败。第二种情况是虽然识别的结果是四个字符， 被提交到了表单，但是服务器对结果不认可，程序仍然失败。</p><p>在实际运行过程中，第一种 情况发生的可能性大约为 50%，发生时程序不会向表单提交，程序直接结束并提示验证码 识别错误。第二种异常情况发生的概率约为 20%，四个字符都对的概率约是 30%(每个字 母的识别正确率大约是 80%，如果是五个字符都识别，正确的总概率是 32.8%)。</p><h2 id="训练tesseract" tabindex="-1"><a class="header-anchor" href="#训练tesseract" aria-hidden="true">#</a> 训练Tesseract</h2>`,50),O={href:"https://www.drupal.org/project/captcha",target:"_blank",rel:"noopener noreferrer"},z=t('<figure><img src="'+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么与其他验证码相比，究竟是什么让这个验证码更容易被人类和机器读懂呢?</p><ul><li>字母没有相互叠加在一起，在水平方向上也没有彼此交叉。也就是说，可以在每一个字 母外面画一个方框，而不会重叠在一起。</li><li>图片没有背景色、线条或其他对 OCR 程序产生干扰的噪点。</li><li>虽然不能因一个图片下定论，但是这个验证码用的字体种类很少，而且用的是 sans-serif 字体(像“4”和“M”)和一种手写形式的字体(像“m”“C”和“3”)。</li><li>白色背景色与深色字母之间的对比度很高。</li></ul><p>这个验证码只做了一点点改变，就让 OCR 程序很难识别。</p><ul><li>字母和数据都使用了，这会增加待搜索字符的数量。</li><li>字母随机的倾斜程度会迷惑 OCR 软件，但是人类还是很容易识别的。</li><li>那个比较陌生的手写字体很有挑战性，在“C”和“3”里面还有额外的线条。另外这 个非常小的小写“m”，计算机需要进行额外的训练才能识别。 用下面的代码运行 Tesseract 识别图片:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tesseract captchaExample.png output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们得到的结果 output.txt 是: 4N\\，，，C&lt;3</p><h2 id="训练tesseract-1" tabindex="-1"><a class="header-anchor" href="#训练tesseract-1" aria-hidden="true">#</a> 训练Tesseract</h2><p>要训练 Tesseract 识别一种文字，无论是晦涩难懂的字体还是验证码，你都需要向 Tesseract 提供每个字符不同形式的样本。</p><p>做这个枯燥的工作可能要花好几个小时的时间，你可能更想用这点儿时间找个好看的视频 或电影看看。首先要把大量的验证码样本下载到一个文件夹里。</p><p>下载的样本数量由验证码 的复杂程度决定;我在训练集里一共放了 100 个样本(一共 500 个字符，平均每个字符 8 个样本;a~z 大小写字母加 0~9 数字，一共 62 个字符)，应该足够训练的了。</p><p>提示:建议使用验证码的真实结果给每个样本文件命名(即4MmC3.jpg)。 这样可以帮你 一次性对大量的文件进行快速检查——你可以先把图片调成缩略图模式，然后通过文件名 对比不同的图片。这样在后面的步骤中进行训练效果的检查也会很方便。</p><p>第二步是准确地告诉 Tesseract 一张图片中的每个字符是什么，以及每个字符的具体位置。 这里需要创建一些矩形定位文件(box file)，一个验证码图片生成一个矩形定位文件。一 个图片的矩形定位文件如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>      4 15 26 33 55 0
      M 38 13 67 45 0
      m 79 15 101 26 0
      C 111 33 136 60 0
      3 147 17 176 45 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一列符号是图片中的每个字符，后面的 4 个数字分别是包围这个字符的最小矩形的坐标 (图片左下角是原点 (0，0)，4 个数字分别对应每个字符的左下角 x 坐标、左下角 y 坐标、右上角 x 坐标和右上角 y 坐标)，最后一个数字“0”表示图片样本的编号。</p>`,15),S={href:"http://pp19dd.com/tesseract-ocr-chopper/",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"矩形定位文件必须保存在一个 .box 后缀的文本文件中。和图片文件一样，文本文件也是用 验证码的实际结果命名(例如，4MmC3.box)。另外，这样便于检查 .box 文件的内容和文件的名称，而且按文件名对目录中的文件排序之后，就可以让 .box 文件与对应的图片文件 的实际结果进行对比。",-1),F=n("p",null,"你还需要创建大约 100 个 .box 文件来保证你有足够的训练数据。因为 Tesseract 会忽略那 些不能读取的文件，所以建议你尽量多做一些矩形定位文件，以保证训练足够充分。如果 你觉得训练的 OCR 结果没有达到你的目标，或者 Tesseract 识别某些字符时总是出错，多 创建一些训练数据然后重新训练将是一个不错的改进方法。",-1),B=n("p",null,"创建完满载 .box 文件和图片文件的数据文件夹之后，在做进一步分析之前最好备份一下这 个文件夹。虽然在数据上运行训练程序不太可能删除任何数据，但是创建 .box 文件用了你 好几个小时的时间，来之不易，稳妥一点儿总没错。此外，能够抓取一个满是编译数据的 混乱目录，然后再尝试一次，总是好的。",-1),M={href:"https://github.com/tesseract-ocr/tesseract/wiki%EF%BC%8C%E5%8A%A0%E6%B2%B9%EF%BC%81",target:"_blank",rel:"noopener noreferrer"},N=n("blockquote",null,[n("p",null,[s("喜欢这篇文章的话，可以关注一下我的公众号『"),n("strong",null,"海哥python"),s("』")])],-1);function W(G,H){const a=o("ExternalLinkIcon");return i(),c("div",null,[h,g,_,f,x,w,y,n("p",null,[s("在读取和处理图像、图像相关的机器学习以及创建图像等任务中，Python 一直都是非常出色的语言。虽然有很多库可以进行图像处理，但在这里我们只重点介绍："),n("a",q,[s("Tesseract"),e(a)])]),T,n("p",null,[s("下载可执行安装文件"),n("a",P,[s("https://code.google.com/p/tesseract-ocr/downloads/list安装。"),e(a)])]),C,R,I,n("p",null,[s("用 Homebrew("),n("a",E,[s("http://brew.sh/"),e(a)]),s(")等第三方库可以很方便地安装 "),L]),A,n("p",null,[s("大多数其他的验证码都是比较简单的。例如，流行的 PHP 内容管理系统 Drupal 有一个著 名的验证码模块("),n("a",O,[s("https://www.drupal.org/project/captcha"),e(a)]),s(")，可以生成不同难度的验证码。")]),z,n("p",null,[s("显然，手工创建这些图片矩形定位文件很无聊，不过有一些工具可以帮你完成。我很喜欢 在线工具 Tesseract OCR Chopper("),n("a",S,[s("http://pp19dd.com/tesseract-ocr-chopper/"),e(a)]),s(")，因为它不需要 安装，也没有其他依赖，只要有浏览器就可以运行，而且用法很简单:上传图片，如果要 增加新矩形就单击“add”按钮，还可以根据需要调整矩形的尺寸，最后把新生成的矩形 定位文件复制到一个新文件里就可以了。")]),j,F,B,n("p",null,[s("前面的内容只是对 Tesseract 库强大的字体训练和识别能力的一个简略概述。如果你对 Tesseract 的其他训练方法感兴趣，甚至打算建立自己的验证码训练文件库，或者想和全世 界的 Tesseract 爱好者分享自己对一种新字体的识别成果，推荐阅读 Tesseract 的文档："),n("a",M,[s("https://github.com/tesseract-ocr/tesseract/wiki，加油！"),e(a)])]),N])}const D=p(b,[["render",W],["__file","15.机器视觉与Tesseract介绍.html.vue"]]);export{D as default};
