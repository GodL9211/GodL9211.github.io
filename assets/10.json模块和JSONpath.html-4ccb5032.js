import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,a as n,b as s,e as t,f as c}from"./app-9976b6d0.js";const l={},u=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d=n("p",null,"大家好，我是海鸽。",-1),r=n("h2",{id:"json模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json模块","aria-hidden":"true"},"#"),s(" json模块")],-1),k={href:"http://docs.python.org/library/json.html",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.json.cn/#",target:"_blank",rel:"noopener noreferrer"},h=c(`<p>Python 的 <code>json</code> 模块提供了编码和解码 JSON 数据的方法。JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。</p><p>以下是 <code>json</code> 模块的一些基本用法：</p><h3 id="导入模块" tabindex="-1"><a class="header-anchor" href="#导入模块" aria-hidden="true">#</a> 导入模块</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="编码-json" tabindex="-1"><a class="header-anchor" href="#编码-json" aria-hidden="true">#</a> 编码 json</h3><p>将 Python 对象（如字典或列表）转换成 JSON 格式的字符串。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Python 字典</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;New York&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 将 Python 对象编码成 JSON 字符串</span>
json_string <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解码-json" tabindex="-1"><a class="header-anchor" href="#解码-json" aria-hidden="true">#</a> 解码 json</h3><p>将 JSON 格式的字符串解码成 Python 对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># JSON 字符串</span>
json_string <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;}&#39;</span>

<span class="token comment"># 将 JSON 字符串解码成 Python 对象</span>
data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编码为文件" tabindex="-1"><a class="header-anchor" href="#编码为文件" aria-hidden="true">#</a> 编码为文件</h3><p>将 Python 对象编码并写入文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 写入 JSON 数据到文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;data.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从文件解码" tabindex="-1"><a class="header-anchor" href="#从文件解码" aria-hidden="true">#</a> 从文件解码</h3><p>从文件读取 JSON 字符串并解码成 Python 对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 从文件读取 JSON 数据并解码</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;data.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编码时使用自定义的序列化函数" tabindex="-1"><a class="header-anchor" href="#编码时使用自定义的序列化函数" aria-hidden="true">#</a> 编码时使用自定义的序列化函数</h3><p>你可以定义一个函数来自定义序列化行为，例如，处理日期类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">def</span> <span class="token function">datetime_serializer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> o<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&quot;Type not serializable&quot;</span><span class="token punctuation">)</span>

data_with_date <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;date&quot;</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

json_string <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data_with_date<span class="token punctuation">,</span> default<span class="token operator">=</span>datetime_serializer<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解码时处理复杂的json结构" tabindex="-1"><a class="header-anchor" href="#解码时处理复杂的json结构" aria-hidden="true">#</a> 解码时处理复杂的JSON结构</h3><p>对于包含复杂数据类型（如二进制数据）的 JSON，你可能需要特殊的解析器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 假设 json_string 包含一些特殊的数据格式</span>
json_string <span class="token operator">=</span> <span class="token string">&#39;{&quot;binary_data&quot;: &quot;YW55&quot;}&#39;</span>  <span class="token comment"># Base64 编码的二进制数据</span>

<span class="token keyword">def</span> <span class="token function">custom_decoder</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">&#39;binary_data&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> value

data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_string<span class="token punctuation">,</span> object_hook<span class="token operator">=</span>custom_decoder<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>json</code> 模块是处理 JSON 数据的基础工具，它支持多种编码和解码选项，以适应不同的使用场景。</p><hr><h2 id="jsonpath模块" tabindex="-1"><a class="header-anchor" href="#jsonpath模块" aria-hidden="true">#</a> jsonpath模块</h2><p><code>jsonpath</code> 是一个 Python 库，用于解析和查询 JSON 数据，类似于 XPath 用于 XML 的方式。下面是一个基本的使用示例，以及一些常见的操作。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>首先，你需要安装 <code>jsonpath-ng</code>，这是 <code>jsonpath</code> 的一个实现。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> jsonpath-ng
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p>以下是一个简单的示例，展示如何使用 <code>jsonpath-ng</code> 来解析和查询 JSON 数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token keyword">from</span> jsonpath_ng <span class="token keyword">import</span> jsonpath<span class="token punctuation">,</span> parse

<span class="token comment"># 示例 JSON 数据</span>
json_data <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
{
    &quot;store&quot;: {
        &quot;book&quot;: [
            { &quot;category&quot;: &quot;reference&quot;, &quot;author&quot;: &quot;Nigel Rees&quot;, &quot;title&quot;: &quot;Sayings of the Century&quot;, &quot;price&quot;: 8.95 },
            { &quot;category&quot;: &quot;fiction&quot;, &quot;author&quot;: &quot;Evelyn Waugh&quot;, &quot;title&quot;: &quot;Sword of Honour&quot;, &quot;price&quot;: 12.99 },
            { &quot;category&quot;: &quot;fiction&quot;, &quot;author&quot;: &quot;Herman Melville&quot;, &quot;title&quot;: &quot;Moby Dick&quot;, &quot;isbn&quot;: &quot;0-553-21311-3&quot;, &quot;price&quot;: 8.99 },
            { &quot;category&quot;: &quot;fiction&quot;, &quot;author&quot;: &quot;J. R. R. Tolkien&quot;, &quot;title&quot;: &quot;The Lord of the Rings&quot;, &quot;isbn&quot;: &quot;0-395-19395-8&quot;, &quot;price&quot;: 22.99 }
        ],
        &quot;bicycle&quot;: {
            &quot;color&quot;: &quot;red&quot;,
            &quot;price&quot;: 19.95
        }
    }
}
&#39;&#39;&#39;</span>

<span class="token comment"># 将 JSON 数据解析成 Python 对象</span>
data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>

<span class="token comment"># 示例 1: 查找所有书籍的作者</span>
jsonpath_expr <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;$.store.book[*].author&#39;</span><span class="token punctuation">)</span>
authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">match</span><span class="token punctuation">.</span>value <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> jsonpath_expr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;所有书籍的作者:&quot;</span><span class="token punctuation">,</span> authors<span class="token punctuation">)</span>

<span class="token comment"># 示例 2: 查找所有价格高于10的书籍</span>
jsonpath_expr <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;$.store.book[?(@.price &gt; 10)]&#39;</span><span class="token punctuation">)</span>
expensive_books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">match</span><span class="token punctuation">.</span>value <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> jsonpath_expr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;价格高于10的书籍:&quot;</span><span class="token punctuation">,</span> expensive_books<span class="token punctuation">)</span>

<span class="token comment"># 示例 3: 查找有 ISBN 的书籍</span>
jsonpath_expr <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;$.store.book[?(@.isbn)]&#39;</span><span class="token punctuation">)</span>
books_with_isbn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">match</span><span class="token punctuation">.</span>value <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> jsonpath_expr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;有 ISBN 的书籍:&quot;</span><span class="token punctuation">,</span> books_with_isbn<span class="token punctuation">)</span>

<span class="token comment"># 示例 4: 查找商店中所有商品的价格</span>
jsonpath_expr <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;$.store..price&#39;</span><span class="token punctuation">)</span>
prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">match</span><span class="token punctuation">.</span>value <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> jsonpath_expr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;商店中所有商品的价格:&quot;</span><span class="token punctuation">,</span> prices<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见的-jsonpath-表达式" tabindex="-1"><a class="header-anchor" href="#常见的-jsonpath-表达式" aria-hidden="true">#</a> 常见的 JSONPath 表达式</h3><ul><li><code>$</code>：根对象</li><li><code>@</code>：当前对象</li><li><code>.</code> 或 <code>[]</code>：子元素</li><li><code>..</code>：递归下降，匹配所有子孙元素</li><li><code>*</code>：通配符，匹配所有元素</li><li><code>[]</code>：子脚本操作符，筛选数组元素或对象属性</li><li><code>[?()]</code>：过滤表达式，使用逻辑表达式筛选数组元素</li><li><code>[start:end:step]</code>：数组切片操作符</li></ul><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明" aria-hidden="true">#</a> 示例说明</h3><ol><li><strong>查找所有书籍的作者</strong>：使用 <code>$.store.book[*].author</code> 查找所有书籍的作者。</li><li><strong>查找所有价格高于10的书籍</strong>：使用 <code>$.store.book[?(@.price &gt; 10)]</code> 查找所有价格高于10的书籍。</li><li><strong>查找有 ISBN 的书籍</strong>：使用 <code>$.store.book[?(@.isbn)]</code> 查找有 ISBN 的书籍。</li><li><strong>查找商店中所有商品的价格</strong>：使用 <code>$.store..price</code> 查找商店中所有商品的价格，包括书籍和自行车。</li></ol><p>这些示例展示了如何使用 <code>jsonpath-ng</code> 查询和提取 JSON 数据中的特定信息。根据你的具体需求，可以编写不同的 JSONPath 表达式来实现相应的查询功能。</p><blockquote><p>喜欢这篇文章的话，可以关注一下我的公众号『<strong>海哥python</strong>』</p></blockquote>`,38);function m(b,q){const a=o("ExternalLinkIcon");return p(),i("div",null,[u,d,r,n("blockquote",null,[n("p",null,[s("官方文档："),n("a",k,[s("http://docs.python.org/library/json.html"),t(a)])]),n("p",null,[s("Json在线解析网站："),n("a",v,[s("http://www.json.cn/#"),t(a)])])]),h])}const _=e(l,[["render",m],["__file","10.json模块和JSONpath.html.vue"]]);export{_ as default};
