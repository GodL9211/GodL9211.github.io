const e=JSON.parse('{"key":"v-746cffde","path":"/docs/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"策略模式","lang":"zh-CN","frontmatter":{"title":"策略模式","icon":"book","index":true,"article":false,"description":"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。\\r 工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是策略的定义、创建、使用这三部分。 策略的定义 策...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"策略模式"}],["meta",{"property":"og:description","content":"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。\\r 工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是策略的定义、创建、使用这三部分。 策略的定义 策..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-28T09:45:26.000Z"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["meta",{"property":"article:modified_time","content":"2023-09-28T09:45:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"策略模式\\",\\"description\\":\\"前言 在实际的项目开发中，策略模式(Strategy Design Pattern)也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。\\\\r 工厂模式是解耦对象的创建和使用，观察者模式是解耦观察者和被观察者。策略模式跟两者类似，也能起到解耦的作用，不过，它解耦的是策略的定义、创建、使用这三部分。 策略的定义 策...\\"}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"策略的定义","slug":"策略的定义","link":"#策略的定义","children":[]},{"level":2,"title":"策略的创建","slug":"策略的创建","link":"#策略的创建","children":[]},{"level":2,"title":"策略的使用","slug":"策略的使用","link":"#策略的使用","children":[]}],"git":{"createdTime":1695120233000,"updatedTime":1695894326000,"contributors":[{"name":"lianhaifeng","email":"lianhaifeng@rongannetworks.com","commits":2}]},"readingTime":{"minutes":0.79,"words":238},"filePathRelative":"docs/python/设计模式/策略模式.md","localizedDate":"2023年9月19日","excerpt":"","autoDesc":true}');export{e as data};
