import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as s,a as t,b as e,e as o,f as n}from"./app-9976b6d0.js";const c="/assets/02_01-cf6b8e80.png",l="/assets/02_02-b7f44ce8.png",h="/assets/02_03-2fce24ad.png",p="/assets/02_04-3bf9f220.png",u={},m=n(`<h2 id="第02课-第一个python程序" tabindex="-1"><a class="header-anchor" href="#第02课-第一个python程序" aria-hidden="true">#</a> 第02课：第一个Python程序</h2><p>在上一课中，我们已经了解了Python语言并安装了运行Python程序所需的环境，相信大家已经迫不及待的想开始自己的Python编程之旅了。首先我们来看看应该在哪里编写我们的Python程序。</p><h3 id="编写代码的工具" tabindex="-1"><a class="header-anchor" href="#编写代码的工具" aria-hidden="true">#</a> 编写代码的工具</h3><h4 id="交互式环境" tabindex="-1"><a class="header-anchor" href="#交互式环境" aria-hidden="true">#</a> 交互式环境</h4><p>我们打开Windows的“命令提示符”工具，输入命令<code>python</code>然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>Python 3.7.6
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; 2 * 3
6
&gt;&gt;&gt; 2 + 3
5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：使用macOS系统的用户需要打开“终端”工具，输入<code>python3</code>进入交互式环境。</p></blockquote><p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>&gt;&gt;&gt; quit()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="更好的交互式环境-ipython" tabindex="-1"><a class="header-anchor" href="#更好的交互式环境-ipython" aria-hidden="true">#</a> 更好的交互式环境 - IPython</h4><p>Python默认的交互式环境用户体验并不怎么好，我们可以用IPython来替换掉它，因为IPython提供了更为强大的编辑和交互功能。我们可以使用Python的包管理工具<code>pip</code>来安装IPython，如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> ipython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>温馨提示</strong>：在使用上面的命令安装IPython之前，可以先通过<code>pip config set global.index-url https://pypi.doubanio.com/simple</code>命令将<code>pip</code>的下载源修改为国内的豆瓣网，否则下载安装的过程可能会非常的缓慢。</p></blockquote><p>可以使用下面的命令启动IPython，进入交互式环境。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ipython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="文本编辑器-visual-studio-code" tabindex="-1"><a class="header-anchor" href="#文本编辑器-visual-studio-code" aria-hidden="true">#</a> 文本编辑器 - Visual Studio Code</h4>`,16),g={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zhuanlan.zhihu.com/p/106357123",target:"_blank",rel:"noopener noreferrer"},v=t("h4",{id:"集成开发环境-pycharm",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#集成开发环境-pycharm","aria-hidden":"true"},"#"),e(" 集成开发环境 - PyCharm")],-1),y={href:"https://www.jetbrains.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.jetbrains.com/pycharm/download",target:"_blank",rel:"noopener noreferrer"},f=n('<p>运行PyCharm，可以看到如下图所示的欢迎界面，可以选择“New Project”来创建一个新的项目。</p><img src="'+c+'" width="100%"><p>创建项目的时候需要指定项目的路径并创建运行项目的”虚拟环境“，如下图所示。</p><img src="'+l+'" width="100%"><p>项目创建好以后会出现如下图所示的画面，我们可以通过在项目文件夹上点击鼠标右键，选择“New”菜单下的“Python File”来创建一个Python文件，创建好的Python文件会自动打开进入可编辑的状态。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>写好代码后，可以在编辑代码的窗口点击鼠标右键，选择“Run”菜单项来运行代码，下面的“Run”窗口会显示代码的执行结果，如下图所示。</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>PyCharm常用的快捷键如下表所示，我们也可以在“File”菜单的“Settings”中定制PyCharm的快捷键（macOS系统是在“PyCharm”菜单的“Preferences”中对快捷键进行设置）。</p><p>表1. PyCharm常用快捷键。</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><code>ctrl + j</code></td><td>显示可用的代码模板</td></tr><tr><td><code>ctrl + b</code></td><td>查看函数、类、方法的定义</td></tr><tr><td><code>ctrl + alt + l</code></td><td>格式化代码</td></tr><tr><td><code>alt + enter</code></td><td>万能代码修复快捷键</td></tr><tr><td><code>ctrl + /</code></td><td>注释/反注释代码</td></tr><tr><td><code>shift + shift</code></td><td>万能搜索快捷键</td></tr><tr><td><code>ctrl + d</code> / <code>ctrl + y</code></td><td>复制/删除一行代码</td></tr><tr><td><code>ctrl + shift + -</code> / <code>ctrl + shift + +</code></td><td>折叠/展开所有代码</td></tr><tr><td><code>F2</code></td><td>快速定位到错误代码</td></tr><tr><td><code>ctrl + alt + F7</code></td><td>查看哪些地方用到了指定的函数、类、方法</td></tr></tbody></table><blockquote><p><strong>说明</strong>：使用macOS系统，可以将上面的<code>ctrl</code>键换成<code>command</code>键，在macOS系统上，可以使用<code>ctrl + space</code>组合键来获得万能提示，在Windows系统上不能使用该快捷键，因为它跟Windows默认的切换输入法的快捷键是冲突的，需要重新设置。</p></blockquote><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> hello, world</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作<em>The C Programming Language</em>中写的第一段代码。</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>print(&#39;hello, world&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序" aria-hidden="true">#</a> 运行程序</h3><p>如果不使用PyCharm这样的集成开发环境，我们可以将上面的代码命名为<code>hello.py</code>，对于Windows操作系统，可以在你保存代码的目录下先按住键盘上的<code>shift</code>键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令提示符”选项，点击该选项就可以打开“命令提示符”工具，我们输入下面的命令。</p><div class="language-Shell line-numbers-mode" data-ext="Shell"><pre class="language-Shell"><code>python hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>提醒</strong>：我们也可以在任意位置打开“命令提示符”，然后将需要执行的Python代码通过拖拽的方式拖入到“命令提示符”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过<code>python3</code>命令来运行该程序。</p></blockquote><p>你可以尝试将上面程序单引号中的<code>hello, world</code>换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的<code>print(&#39;hello, world&#39;)</code>就是一条完整的语句，我们用Python写程序，最好每一行代码中只有一条语句。虽然使用<code>;</code>分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。</p><h3 id="注释你的代码" tabindex="-1"><a class="header-anchor" href="#注释你的代码" aria-hidden="true">#</a> 注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p><p>Python中有两种形式的注释：</p><ol><li>单行注释：以<code>#</code>和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li><li>多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。</li></ol><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>&quot;&quot;&quot;
第一个Python程序 - hello, world

Version: 0.1
Author: 骆昊
&quot;&quot;&quot;
# print(&#39;hello, world&#39;)
print(&quot;你好，世界！&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>到这里，我们已经把第一个Python程序运行起来了，是不是很有成就感？只要你坚持学习下去，再过一段时间，我们就可以用Python制作小游戏、编写爬虫程序、完成办公自动化操作等。<strong>写程序本身就是一件很酷的事情</strong>，在未来编程就像英语一样，<strong>对很多人来说或都是必须要掌握的技能</strong>。</p>`,27);function P(x,q){const d=r("ExternalLinkIcon");return i(),s("div",null,[m,t("p",null,[e("Visual Studio Code（通常简称为VSCode）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。如果大家要选择一款高级文本编辑工具，强烈建议使用VSCode。关于VSCode的"),t("a",g,[e("下载"),o(d)]),e("、安装和使用，推荐大家阅读一篇名为"),t("a",b,[e("《VScode安装使用》"),o(d)]),e("的文章。")]),v,t("p",null,[e("如果用Python开发商业项目，我们推荐大家使用更为专业的工具PyCharm。PyCharm是由捷克一家名为"),t("a",y,[e("JetBrains"),o(d)]),e("的公司开发的用于Python项目开发的集成开发环境（IDE)。所谓集成开发环境，通常是指工具中提供了编写代码、运行代码、调试代码、分析代码、版本控制等一系列功能，因此特别适合商业项目的开发。在JetBrains的官方网站上提供了PyCharm的"),t("a",_,[e("下载链接"),o(d)]),e("，其中社区版（Community）是免费的但功能相对弱小（其实已经足够强大了），专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。")]),f])}const k=a(u,[["render",P],["__file","第02课：第一个Python程序.html.vue"]]);export{k as default};
