import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,e,f as t}from"./app-86c4e386.js";const l="/assets/agent.proto-795de962.png",u="/assets/service.go-5b09a8f3.png",r="/assets/http.go-00b34b7e.png",d="/assets/grpc.go-ab6700a9.png",k="/assets/wire.go-3c7b9797.png",v={},m=n("p",null,[n("strong",null,"推荐语"),s(),n("code",null,"CIT中国"),s("的Kratos教程")],-1),b=n("br",null,null,-1),g=n("strong",null,"原文地址：",-1),h={href:"https://mp.weixin.qq.com/s/Nek9jwY-rFaN8TNw1tMhLA",target:"_blank",rel:"noopener noreferrer"},f=t('<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><p>在上一节，我们初始化了一个helloword项目并成功访问 <em>localhost:8000/helloworld/{name}</em> 接口，这章我们来学习下如何自己<code>写一个接口并且访问数据库</code>。</p><h2 id="定义-api-生成文档、代码" tabindex="-1"><a class="header-anchor" href="#定义-api-生成文档、代码" aria-hidden="true">#</a> 定义 API ，生成文档、代码</h2><p>API 与用户的通信协议，通常是 REST API 和 RPC API 作为传输层协议，而 Kratos 主要参考 Google API 指南，实现了对应通信协议支持，并且遵守了 gRPC API 使用 HTTP 映射功能进行 JSON/HTTP 的支持。也就是通过定义 proto 即可使用 REST API 和 RPC API，通过类似 Google API 的仓库方式进行 API Schema 的管理。</p><p>我们打开 api 目录 ，打开 <code>api/agent/v1/agent.proto </code>文件。</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面使用了 proto 来定义 api ，如果你没接触过 proto 语法也没事，我来讲解一下。</p><p>图片上 <code>agent.proto</code> 文件是我们用来定义接口的，我们看下 <code>CreateAgent</code> 这个 rpc 函数，该函数接收 <code>CreateAgentRequest</code> 结构体，返回 <code>CreateAgentReply</code> 结构体。</p><p>我们引用了*<code>google/api/annotations.proto</code>*<code></code>这个 grpc 插件，<code>它能够通过写注释的方式来生成 http 相关的代码</code>，比如帮我们把前端传过来的参数解析到结构体 <code>CreateAgentRequest</code> 上，帮我们注册路由等。</p><p>我们来看下 gprc 插件 <code>google.api.http</code> 中我们能定义的成员：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>MethodOptions <span class="token punctuation">{</span>
  <span class="token comment">// See \`HttpRule\`.</span>
  <span class="token positional-class-name class-name">HttpRule</span> http <span class="token operator">=</span> <span class="token number">72295728</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">HttpRule</span> <span class="token punctuation">{</span>

  <span class="token comment">// Determines the URL pattern is matched by this rules. This pattern can be</span>
  <span class="token comment">// used with any of the {get|put|post|delete|patch} methods. A custom method</span>
  <span class="token comment">// can be defined using the &#39;custom&#39; field.</span>
  <span class="token keyword">oneof</span> pattern <span class="token punctuation">{</span>
    <span class="token comment">// Maps to HTTP GET. Used for listing and getting information about</span>
    <span class="token comment">// resources.</span>
    <span class="token builtin">string</span> get <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment">// Maps to HTTP PUT. Used for replacing a resource.</span>
    <span class="token builtin">string</span> put <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token comment">// Maps to HTTP POST. Used for creating a resource or performing an action.</span>
    <span class="token builtin">string</span> post <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token comment">// Maps to HTTP DELETE. Used for deleting a resource.</span>
    <span class="token builtin">string</span> delete <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token comment">// Maps to HTTP PATCH. Used for updating a resource.</span>
    <span class="token builtin">string</span> patch <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The name of the request field whose value is mapped to the HTTP request</span>
  <span class="token comment">// body, or \`*\` for mapping all request fields not captured by the path</span>
  <span class="token comment">// pattern to the HTTP body, or omitted for not having any HTTP request body.</span>
  <span class="token comment">//</span>
  <span class="token comment">// NOTE: the referred field must be present at the top-level of the request</span>
  <span class="token comment">// message type.</span>
  <span class="token builtin">string</span> body <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以定义 http 方法，url，如果我们需要使用 post 方法并绑定参数，我们可以这样写：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">rpc</span> <span class="token function">Login</span> <span class="token punctuation">(</span><span class="token class-name">LoginRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">LoginResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">option</span> <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            post<span class="token punctuation">:</span> <span class="token string">&quot;/account/login&quot;</span>
            body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成openapi【接口文档】" tabindex="-1"><a class="header-anchor" href="#生成openapi【接口文档】" aria-hidden="true">#</a> 生成OpenAPi【接口文档】</h3><p>OpenAPI 文档是一份可交付的技术内容，其中包含了如何使用和集成 API 的说明，OpenAPI 文档中，包含了集成 OpenAPI 所需的完整信息，如请求参数，返回参数等。在实际的项目开发过程中，对于程序员来说，OpenAPI 文档是再熟悉不过的东西，大多数开发团队中，只要涉及到前后端交互，OpenAPI 文档就会作为沟通前后端开发的桥梁，所以需要一个简单，高效，便捷的 OpenAPI 文档生成工具。</p><p>kratos 已经帮我们安装好了OpenAPI插件，我们只需要在根目录执行在根目录运行 <code>make api</code></p><p>成功执行上述命令后，会生成 openapi.yaml 文件。您可以将其导入到支持 OpenAPI 规范以供浏览的任何平台中，例如 apifox</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Generated with protoc-gen-openapi</span>
<span class="token comment"># https://github.com/google/gnostic/tree/master/apps/protoc-gen-openapi</span>

<span class="token key atrule">openapi</span><span class="token punctuation">:</span> 3.0.3
<span class="token key atrule">info</span><span class="token punctuation">:</span>
    <span class="token key atrule">title</span><span class="token punctuation">:</span> Greeter
    <span class="token key atrule">description</span><span class="token punctuation">:</span> The greeting service definition.
    <span class="token key atrule">version</span><span class="token punctuation">:</span> 0.0.1
<span class="token key atrule">paths</span><span class="token punctuation">:</span>
    /helloworld/<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">:</span>
        <span class="token key atrule">get</span><span class="token punctuation">:</span>
            <span class="token key atrule">summary</span><span class="token punctuation">:</span> Sends a greeting
            <span class="token key atrule">operationId</span><span class="token punctuation">:</span> Greeter_SayHello
            <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> name
                  <span class="token key atrule">in</span><span class="token punctuation">:</span> query
                  <span class="token key atrule">schema</span><span class="token punctuation">:</span>
                    <span class="token key atrule">type</span><span class="token punctuation">:</span> string
            <span class="token key atrule">responses</span><span class="token punctuation">:</span>
                <span class="token key atrule">&quot;200&quot;</span><span class="token punctuation">:</span>
                    <span class="token key atrule">description</span><span class="token punctuation">:</span> OK
                    <span class="token key atrule">content</span><span class="token punctuation">:</span>
                        <span class="token key atrule">application/json</span><span class="token punctuation">:</span>
                            <span class="token key atrule">schema</span><span class="token punctuation">:</span>
                                <span class="token key atrule">$ref</span><span class="token punctuation">:</span> <span class="token string">&#39;#/components/schemas/HelloReply&#39;</span>
<span class="token key atrule">components</span><span class="token punctuation">:</span>
    <span class="token key atrule">schemas</span><span class="token punctuation">:</span>
        <span class="token key atrule">HelloReply</span><span class="token punctuation">:</span>
            <span class="token key atrule">properties</span><span class="token punctuation">:</span>
                <span class="token key atrule">message</span><span class="token punctuation">:</span>
                    <span class="token key atrule">type</span><span class="token punctuation">:</span> string
            <span class="token key atrule">description</span><span class="token punctuation">:</span> The response message containing the greetings
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成go代码【-】" tabindex="-1"><a class="header-anchor" href="#生成go代码【-】" aria-hidden="true">#</a> 生成go代码【*】</h3><p>使用生成代码的方式来统一团队代码风格以及提高开发效率，执行上述命令，命令执行完后就能看到目录生成了多个 go 源文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成 proto 模板</span>
kratos proto <span class="token function">add</span> api/agent/v1/agent.proto
<span class="token comment"># 生成 client 源码</span>
kratos proto client api/agent/v1/agent.proto
<span class="token comment"># 生成 server 源码</span>
kratos proto server  api/agent/v1/agent.proto <span class="token parameter variable">-t</span> internal/service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除示例代码" tabindex="-1"><a class="header-anchor" href="#删除示例代码" aria-hidden="true">#</a> 删除示例代码</h3><p>由于我们是使用 wire 来自动生成构造函数，因此我们想要将原来的 helloword api service 替换成 agent 需要修改点代码。</p><ol><li>service 目录下 service.go</li></ol><p>修改 internal/service/service.go 里依赖注入部分:</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>在 internal/server 目录下，修改 http.go, grpc.go</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>执行 <code>make all</code> , 有地方报错的话再修改下细节，如果你还不清楚的话，可以看下代码仓库中的提交历史记录。</li></ol><h2 id="接入-orm" tabindex="-1"><a class="header-anchor" href="#接入-orm" aria-hidden="true">#</a> 接入 ORM</h2><h3 id="什么是-orm" tabindex="-1"><a class="header-anchor" href="#什么是-orm" aria-hidden="true">#</a> 什么是 ORM？</h3><p>面向对象编程和关系型数据库，都是目前最流行的技术，但是它们的模型是不一样的。</p><p>面向对象编程把所有实体看成对象（object），关系型数据库则是采用实体之间的关系（relation）连接数据。很早就有人提出，关系也可以用对象表达，这样的话，就能使用面向对象编程，来操作关系型数据库。</p><p>简单说，ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是&quot;对象-关系映射&quot;（Object/Relational Mapping） 的缩写。</p><p>ORM 把数据库映射成对象。</p><ul><li>数据库的表（table） --&gt; 类（class）</li><li>记录（record，行数据）--&gt; 对象（object）</li><li>字段（field）--&gt; 对象的属性（attribute） 举例来说，下面是一行 SQL 语句。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> birth_date<span class="token punctuation">,</span> sex
<span class="token keyword">FROM</span> persons
<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序直接运行 SQL，操作数据库的写法如下。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> birth_date<span class="token punctuation">,</span> sex
<span class="token keyword">FROM</span> persons
<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改成 ORM 的写法如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
name <span class="token operator">=</span> p<span class="token punctuation">.</span>first_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一比较就可以发现，ORM 使用对象，封装了数据库操作，因此可以不碰 SQL 语言。开发者只使用面向对象编程，与数据对象直接交互，不用关心底层数据库。</p><p>ORM 有下面这些优点:</p><ul><li>数据模型都在一个地方定义，更容易更新和维护，也利于重用代码。</li><li>ORM 有现成的工具，很多功能都可以自动完成，比如数据消毒、预处理、事务等等。</li><li>它迫使你使用 MVC 架构，ORM 就是天然的 Model，最终使代码更清晰。</li><li>基于 ORM 的业务代码比较简单，代码量少，语义性好，容易理解。</li><li>你不必编写性能不佳的 SQL。</li></ul><p>ORM 也有很突出的缺点：</p><ul><li>ORM 库不是轻量级工具，需要花很多精力学习和设置。</li><li>对于复杂的查询，ORM 要么是无法表达，要么是性能不如原生的 SQL。</li><li>ORM 抽象掉了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊的 SQL。</li></ul><h3 id="什么是-ent" tabindex="-1"><a class="header-anchor" href="#什么是-ent" aria-hidden="true">#</a> 什么是 ent</h3><p>ent 是 Facebook 开源的一个 ORM 框架，其结合 Facebook 的业务风格而诞生，比较新颖地使用节点和线条构建出数据流图来表示数据库中字段、表、之间的关系，现在已经被 Facebook 用在了生产环境(虽然 GitHub 上说该项目是 experimental 的),概括来说具有以下特色：</p><ul><li><code>图就是代码</code> - 将任何数据库表建模为 Go 对象。 轻松地遍历任何图形 - 可以轻松地运行查询、聚合和遍历任何图形结构。 静态类型和显式 API - 使用代码生成静态类型和显式 API，查询数据更加便捷。 多存储驱动程序 - 支持 MySQL、PostgreSQL、SQLite 和 Gremlin。</li><li><code>可扩展</code>- 简单地扩展和使用 Go 模板自定义。</li></ul><h3 id="安装脚手架工具entc" tabindex="-1"><a class="header-anchor" href="#安装脚手架工具entc" aria-hidden="true">#</a> 安装脚手架工具<code>entc</code></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> entgo.io/ent/cmd/ent@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建实体" tabindex="-1"><a class="header-anchor" href="#创建实体" aria-hidden="true">#</a> 创建实体</h3><p>schema 相当于数据库的表，有两种方法可以实现：</p><h3 id="使用-ent-init-生成" tabindex="-1"><a class="header-anchor" href="#使用-ent-init-生成" aria-hidden="true">#</a> 使用 ent init 生成</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ent init User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会在 {当前目录}/ent/schema/ 下生成一个user.go文件:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> schema

<span class="token keyword">import</span> <span class="token string">&quot;entgo.io/ent&quot;</span>

<span class="token comment">// User holds the schema definition for the User entity.</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ent<span class="token punctuation">.</span>Schema
<span class="token punctuation">}</span>

<span class="token comment">// Fields of the User.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ent<span class="token punctuation">.</span>Field <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Edges of the User.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">Edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ent<span class="token punctuation">.</span>Edge <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql-转换工具" tabindex="-1"><a class="header-anchor" href="#sql-转换工具" aria-hidden="true">#</a> sql 转换工具</h3><p>网上有人好心的制作了一个工具，可以将 SQL 转换成 schema 代码，非常方便！</p>`,60),y={href:"https://printlove.cn/tools/sql2ent",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>比如我们有一个创建表的 SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>  <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>created_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>updated_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_unicode_ci ROW_FORMAT <span class="token operator">=</span> DYNAMIC<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换之后，生成如下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> schema

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">&quot;entgo.io/ent&quot;</span>
 <span class="token string">&quot;entgo.io/ent/dialect&quot;</span>
 <span class="token string">&quot;entgo.io/ent/schema/field&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// User holds the schema definition for the User entity.</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 ent<span class="token punctuation">.</span>Schema
<span class="token punctuation">}</span>

<span class="token comment">// Fields of the User.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ent<span class="token punctuation">.</span>Field <span class="token punctuation">{</span>

 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ent<span class="token punctuation">.</span>Field<span class="token punctuation">{</span>

  field<span class="token punctuation">.</span><span class="token function">Int32</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SchemaType</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
   dialect<span class="token punctuation">.</span>MySQL<span class="token punctuation">:</span> <span class="token string">&quot;int(10)UNSIGNED&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Override MySQL.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NonNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  field<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SchemaType</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
   dialect<span class="token punctuation">.</span>MySQL<span class="token punctuation">:</span> <span class="token string">&quot;varchar(50)&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Override MySQL.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  field<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SchemaType</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
   dialect<span class="token punctuation">.</span>MySQL<span class="token punctuation">:</span> <span class="token string">&quot;varchar(20)&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Override MySQL.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  field<span class="token punctuation">.</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token string">&quot;created_at&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SchemaType</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
   dialect<span class="token punctuation">.</span>MySQL<span class="token punctuation">:</span> <span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Override MySQL.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  field<span class="token punctuation">.</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token string">&quot;updated_at&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SchemaType</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
   dialect<span class="token punctuation">.</span>MySQL<span class="token punctuation">:</span> <span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Override MySQL.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// Edges of the User.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">Edges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ent<span class="token punctuation">.</span>Edge <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成代码" tabindex="-1"><a class="header-anchor" href="#生成代码" aria-hidden="true">#</a> 生成代码</h3><p>有了以上的 Schema，我们就可以生成代码了。</p><p>我们命令行进入 ent 的上一层文件夹，然后执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ent generate ./ent/schema
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是用命令行的方式其实是很不方便的，主要是有时候需要带一些特殊的参数，比如：--feature sql/modifier，这就很麻烦了。但好在 go 有一个很赞的特性go:generate，我们可以在 ent 文件夹下面创建一个generate.go文件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> ent

<span class="token comment">//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature privacy --feature sql/modifier --feature entql --feature sql/upsert ./schema</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们可以在项目的根目录下运行命令执行整个项目的go:generate：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go generate ./<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者指定执行这一个generate.go文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go generate ./ent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自此所有的预备工作就做好了。</p><h3 id="ent-的一些数据库基本操作" tabindex="-1"><a class="header-anchor" href="#ent-的一些数据库基本操作" aria-hidden="true">#</a> ent 的一些数据库基本操作</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 增</span>
pedro <span class="token operator">:=</span> client<span class="token punctuation">.</span>Pet<span class="token punctuation">.</span>    <span class="token comment">// PetClient.</span>
    <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>           <span class="token comment">// Pet create builder.</span>
    <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">&quot;pedro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token comment">// Set field value.</span>
    <span class="token function">SetOwner</span><span class="token punctuation">(</span>a8m<span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token comment">// Set owner (unique edge).</span>
    <span class="token function">SaveX</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>          <span class="token comment">// Create and return.</span>

<span class="token comment">// 删</span>
err <span class="token operator">:=</span> client<span class="token punctuation">.</span>User<span class="token punctuation">.</span>
    <span class="token function">DeleteOneID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

<span class="token comment">// 查</span>
names<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span>Pet<span class="token punctuation">.</span>
    <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Select</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span>FieldName<span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Strings</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整合进-kratos" tabindex="-1"><a class="header-anchor" href="#整合进-kratos" aria-hidden="true">#</a> 整合进 kratos</h2><p>官方推荐的包结构是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>- data
<span class="token operator">|</span>- biz
<span class="token operator">|</span>- <span class="token function">service</span>
<span class="token operator">|</span>- server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，我们可以把 ent 放进 data 文件夹下面去：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>- data
<span class="token operator">|</span> <span class="token operator">|</span>- ent
<span class="token operator">|</span>- biz
<span class="token operator">|</span>- <span class="token function">service</span>
<span class="token operator">|</span>- server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建数据库客户端" tabindex="-1"><a class="header-anchor" href="#创建数据库客户端" aria-hidden="true">#</a> 创建数据库客户端</h3><p>接着在 data.go 文件中添加创建数据库客户端的代码，使用 <strong>wire</strong> 将之注入到ProviderSet：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ProviderSet is data providers.</span>
<span class="token keyword">var</span> ProviderSet <span class="token operator">=</span> wire<span class="token punctuation">.</span><span class="token function">NewSet</span><span class="token punctuation">(</span>
    NewEntClient<span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">)</span>

<span class="token comment">// Data .</span>
<span class="token keyword">type</span> Data <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    db  <span class="token operator">*</span>ent<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token comment">// NewEntClient 创建数据库客户端</span>
<span class="token keyword">func</span> <span class="token function">NewEntClient</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>conf<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> logger log<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> <span class="token operator">*</span>ent<span class="token punctuation">.</span>Client <span class="token punctuation">{</span>
 l <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">NewHelper</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ent/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

 client<span class="token punctuation">,</span> err <span class="token operator">:=</span> ent<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>
  conf<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Driver<span class="token punctuation">,</span>
  conf<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Source<span class="token punctuation">,</span>
 <span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  l<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed opening connection to db: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// 运行数据库迁移工具</span>
 <span class="token keyword">if</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> migrate<span class="token punctuation">.</span><span class="token function">WithForeignKeys</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   l<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed creating schema resources: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是数据库迁移工具，如果数据库中不存在表，迁移工具会创建一个；如果字段存在改变，迁移工具会对字段进行修改。</p><h3 id="创建-usecase" tabindex="-1"><a class="header-anchor" href="#创建-usecase" aria-hidden="true">#</a> 创建 UseCase</h3><p>在 biz 文件夹下创建user.go：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> biz

<span class="token keyword">type</span> UserRepo <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 <span class="token function">List</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>pagination<span class="token punctuation">.</span>PagingRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>ListUserResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
 <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>GetUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
 <span class="token function">Create</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>CreateUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
 <span class="token function">Update</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>UpdateUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
 <span class="token function">Delete</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>DeleteUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> UserUseCase <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 repo UserRepo
 log  <span class="token operator">*</span>log<span class="token punctuation">.</span>Helper
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewUserUseCase</span><span class="token punctuation">(</span>repo UserRepo<span class="token punctuation">,</span> logger log<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> <span class="token operator">*</span>UserUseCase <span class="token punctuation">{</span>
 l <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">NewHelper</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user/usecase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>UserUseCase<span class="token punctuation">{</span>repo<span class="token punctuation">:</span> repo<span class="token punctuation">,</span> log<span class="token punctuation">:</span> l<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>uc <span class="token operator">*</span>UserUseCase<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>pagination<span class="token punctuation">.</span>PagingRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>ListUserResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> uc<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">ListUser</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>uc <span class="token operator">*</span>UserUseCase<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>GetUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> uc<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>uc <span class="token operator">*</span>UserUseCase<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>CreateUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> uc<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>uc <span class="token operator">*</span>UserUseCase<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>UpdateUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> uc<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">UpdateUser</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>uc <span class="token operator">*</span>UserUseCase<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>DeleteUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> uc<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">DeleteUser</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入到biz.ProviderSet</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ProviderSet is biz providers.</span>
<span class="token keyword">var</span> ProviderSet <span class="token operator">=</span> wire<span class="token punctuation">.</span><span class="token function">NewSet</span><span class="token punctuation">(</span>
    NewUserUseCase<span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-repo" tabindex="-1"><a class="header-anchor" href="#创建-repo" aria-hidden="true">#</a> 创建 repo</h3><p>在 data 文件夹下创建user.go文件，实际操作数据库客户端的操作都在此做。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> data

<span class="token keyword">var</span> <span class="token boolean">_</span> biz<span class="token punctuation">.</span>UserRepo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>UserRepo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> UserRepo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 data <span class="token operator">*</span>Data
 log  <span class="token operator">*</span>log<span class="token punctuation">.</span>Helper
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewUserRepo</span><span class="token punctuation">(</span>data <span class="token operator">*</span>Data<span class="token punctuation">,</span> logger log<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> biz<span class="token punctuation">.</span>UserRepo <span class="token punctuation">{</span>
 l <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">NewHelper</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;User/repo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>UserRepo<span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>
  log<span class="token punctuation">:</span>  l<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>userRepo<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>v1<span class="token punctuation">.</span>DeleteUserRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 err <span class="token operator">:=</span> r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>db<span class="token punctuation">.</span>User<span class="token punctuation">.</span>
  <span class="token function">DeleteOneID</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
  <span class="token function">Exec</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
 <span class="token keyword">return</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入到data.ProviderSet</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// ProviderSet is data providers.</span>
<span class="token keyword">var</span> ProviderSet <span class="token operator">=</span> wire<span class="token punctuation">.</span><span class="token function">NewSet</span><span class="token punctuation">(</span>
    NewUserRepo<span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h3><p>修改 configs/config.yaml ，保障mysql能连接上。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">addr</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">8000</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1s
  <span class="token key atrule">grpc</span><span class="token punctuation">:</span>
    <span class="token key atrule">addr</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">9000</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1s
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">source</span><span class="token punctuation">:</span> root<span class="token punctuation">:</span>root@tcp(127.0.0.1<span class="token punctuation">:</span>3306)/shop_user<span class="token punctuation">?</span>charset=utf8mb4<span class="token important">&amp;parseTime=True&amp;loc=Local</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">6379</span>
    <span class="token key atrule">dial_timeout</span><span class="token punctuation">:</span> 1s
    <span class="token key atrule">read_timeout</span><span class="token punctuation">:</span> 0.2s
    <span class="token key atrule">write_timeout</span><span class="token punctuation">:</span> 0.2s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wire" tabindex="-1"><a class="header-anchor" href="#wire" aria-hidden="true">#</a> wire</h3><p>Wire 是一个灵活的依赖注入工具，通过自动生成代码的方式在编译期完成依赖注入。</p><p>在各个组件之间的依赖关系中，通常鼓励显式初始化，而不是全局变量传递。</p><p>所以通过 Wire 进行初始化代码，可以很好地解决组件之间的耦合，以及提高代码维护性。</p><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><p>Wire 具有两个基本概念：Provider 和 Injector。</p><p>Provider 是一个普通的 Go Func ，这个方法也可以接收其它 Provider 的返回值，从而形成了依赖注入；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 提供一个配置文件（也可能是配置文件）</span>
<span class="token keyword">func</span> <span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>conf<span class="token punctuation">.</span>Data <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// 提供数据组件，依赖了数据配置（初始化 Database、Cache 等）</span>
<span class="token keyword">func</span> <span class="token function">NewData</span><span class="token punctuation">(</span>c <span class="token operator">*</span>conf<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// 提供持久化组件，依赖数据组件（实现 CURD 持久化层）</span>
<span class="token keyword">func</span> <span class="token function">NewUserRepo</span><span class="token punctuation">(</span>d <span class="token operator">*</span>data<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UserRepo<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><p>在 Kratos 中，主要分为 server、service、biz、data 服务模块，会通过 Wire 进行模块顺序的初始化；</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在每个模块中，只需要一个 ProviderSet 提供者集合，就可以在 wire 中进行依赖注入；</p><p>并且我们在每个组件提供入口即可，不需要其它依赖，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-data</span>
<span class="token parameter variable">--data.go</span>    // var ProviderSet <span class="token operator">=</span> wire.NewSet<span class="token punctuation">(</span>NewData, NewGreeterRepo<span class="token punctuation">)</span>
<span class="token parameter variable">--greeter.go</span> // func NewGreeterRepo<span class="token punctuation">(</span>data *Data, logger log.Logger<span class="token punctuation">)</span> biz.GreeterRepo <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过 wire.go 中定义所有 ProviderSet 可以完成依赖注入配置。</p><h4 id="初始化组件" tabindex="-1"><a class="header-anchor" href="#初始化组件" aria-hidden="true">#</a> 初始化组件</h4><p>通过 wire 初始化组件，需要定义对应的 wire.go，以及 kratos application 用于启动管理。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 应用程序入口</span>
cmd
<span class="token operator">-</span>main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token operator">-</span>wire<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token operator">-</span>wire_gen<span class="token punctuation">.</span><span class="token keyword">go</span>

<span class="token comment">// main.go 创建 kratos 应用生命周期管理</span>
<span class="token keyword">func</span> <span class="token function">newApp</span><span class="token punctuation">(</span>logger log<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span> hs <span class="token operator">*</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">,</span> gs <span class="token operator">*</span>grpc<span class="token punctuation">.</span>Server<span class="token punctuation">,</span> greeter <span class="token operator">*</span>service<span class="token punctuation">.</span>GreeterService<span class="token punctuation">)</span> <span class="token operator">*</span>kratos<span class="token punctuation">.</span>App <span class="token punctuation">{</span>
    pb<span class="token punctuation">.</span><span class="token function">RegisterGreeterServer</span><span class="token punctuation">(</span>gs<span class="token punctuation">,</span> greeter<span class="token punctuation">)</span>
    pb<span class="token punctuation">.</span><span class="token function">RegisterGreeterHTTPServer</span><span class="token punctuation">(</span>hs<span class="token punctuation">,</span> greeter<span class="token punctuation">)</span>
    <span class="token keyword">return</span> kratos<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>
        kratos<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        kratos<span class="token punctuation">.</span><span class="token function">Version</span><span class="token punctuation">(</span>Version<span class="token punctuation">)</span><span class="token punctuation">,</span>
        kratos<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">,</span>
        kratos<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span>
            hs<span class="token punctuation">,</span>
            gs<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// wire.go 初始化模块</span>
<span class="token keyword">func</span> <span class="token function">initApp</span><span class="token punctuation">(</span><span class="token operator">*</span>conf<span class="token punctuation">.</span>Server<span class="token punctuation">,</span> <span class="token operator">*</span>conf<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> log<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>kratos<span class="token punctuation">.</span>App<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构建所有模块中的 ProviderSet，用于生成 wire_gen.go 自动依赖注入文件</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>wire<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>ProviderSet<span class="token punctuation">,</span> data<span class="token punctuation">.</span>ProviderSet<span class="token punctuation">,</span> biz<span class="token punctuation">.</span>ProviderSet<span class="token punctuation">,</span> service<span class="token punctuation">.</span>ProviderSet<span class="token punctuation">,</span> newApp<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目的 main 目录中，运行 <code>make all</code> 进行生成编译期依赖注入代码：</p><h2 id="课后实践" tabindex="-1"><a class="header-anchor" href="#课后实践" aria-hidden="true">#</a> 课后实践</h2><ul><li>下载示例代码切换到对应 commit</li><li>运行 <code>make all</code></li><li>运行 <code>kratos run</code></li><li>访问接口</li><li>查看数据库是否变更</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,61),q={href:"https://github.com/mouuii/kratos-tutorial",target:"_blank",rel:"noopener noreferrer"},x={href:"https://go.dev/blog/wire",target:"_blank",rel:"noopener noreferrer"},U={href:"https://entgo.io/docs/getting-started/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://mp.weixin.qq.com/s/73uUa65GBEokYcEk-5aO4Q",target:"_blank",rel:"noopener noreferrer"},R={href:"https://cloud.google.com/apis/design",target:"_blank",rel:"noopener noreferrer"},T={href:"https://go-kratos.dev/docs/guide/api-protobuf/",target:"_blank",rel:"noopener noreferrer"};function L(P,C){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("blockquote",null,[m,b,n("p",null,[g,s(),n("a",h,[s("https://mp.weixin.qq.com/s/Nek9jwY-rFaN8TNw1tMhLA"),e(a)])])]),f,n("p",null,[s("SQL 转 Schema 工具： "),n("a",y,[s("https://printlove.cn/tools/sql2ent"),e(a)])]),w,n("ul",null,[n("li",null,[s("示例代码： "),n("a",q,[s("https://github.com/mouuii/kratos-tutorial"),e(a)]),s("  (commit: ae3560)")]),n("li",null,[s("wire："),n("a",x,[s("https://go.dev/blog/wire"),e(a)])]),n("li",null,[s("ent："),n("a",U,[s("https://entgo.io/docs/getting-started/"),e(a)])]),n("li",null,[s("grpc、proto: "),n("a",_,[s("https://grpc.io/"),e(a)])]),n("li",null,[s("公众号："),n("a",S,[s("https://mp.weixin.qq.com/s/73uUa65GBEokYcEk-5aO4Q"),e(a)])]),n("li",null,[s("api定义："),n("a",R,[s("https://cloud.google.com/apis/design"),e(a)])]),n("li",null,[s("proto规范："),n("a",T,[s("https://go-kratos.dev/docs/guide/api-protobuf/"),e(a)])])])])}const O=p(v,[["render",L],["__file","2.Kratos之api接口入门.html.vue"]]);export{O as default};
