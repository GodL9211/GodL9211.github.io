import{_ as n}from"./海哥python-6b198e2b.js";import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as t}from"./app-35175fd5.js";const o={},p=t(`<p>在Go语言中，<code>defer</code>是一个非常有用的关键字，用于在函数执行完毕后延迟（或推迟）执行某个函数调用。<code>defer</code>通常用于确保一些清理操作或资源释放在函数退出之前得以执行，无论函数是正常返回还是由于发生错误而退出。以下是有关<code>defer</code>的详细信息：</p><ol><li><p><strong><code>defer</code>的基本用法</strong>：你可以使用<code>defer</code>关键字来推迟函数的执行，将函数调用放在<code>defer</code>后面的代码块中。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出将会是 &quot;Hello&quot; 和 &quot;World&quot;，尽管<code>defer</code>语句在前面。</p></li><li><p><strong>多个<code>defer</code>语句</strong>：你可以在同一个函数中使用多个<code>defer</code>语句，它们会按照后进先出（LIFO）的顺序执行。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出将会是 &quot;Hello&quot; 和 &quot;World&quot;，因为&quot;World&quot;在&quot;Hello&quot;之后被推迟执行。</p></li><li><p><strong><code>defer</code>与资源释放</strong>：<code>defer</code>经常用于释放资源，比如关闭文件或网络连接。这确保了在函数结束时资源得以释放，而不会发生资源泄漏。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在函数退出前关闭文件</span>

    <span class="token comment">// 读取文件内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>file.Close()</code>会在函数返回之前被推迟执行，无论函数是正常返回还是在错误处理中返回。</p></li><li><p><code>defer处理错误</code>: <code>defer语句</code>可以与panic和recover函数一起使用来处理异常（错误）。panic用于引发异常，而recover用于恢复从panic引发的异常。当这两者与defer一起使用时，可以有效地处理和捕获异常，以确保程序不会因为异常而崩溃。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

 <span class="token keyword">import</span> <span class="token punctuation">(</span>
     <span class="token string">&quot;fmt&quot;</span>
 <span class="token punctuation">)</span>

 <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered:&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Start of main&quot;</span><span class="token punctuation">)</span>
     <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;End of main&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">func</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Start of doSomething&quot;</span><span class="token punctuation">)</span>
     <span class="token comment">// 模拟出现异常</span>
     <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span>
     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;End of doSomething&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 这行不会被执行</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>defer</code>参数的求值时机</strong>：<code>defer</code>语句中的参数在<code>defer</code>语句执行时被求值，而不是在函数退出时。这可能会导致一些意外行为，特别是在循环中使用<code>defer</code>时。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出将会是 &quot;4 3 2 1 0&quot;，而不是 &quot;0 1 2 3 4&quot;。因为<code>i</code>在<code>defer</code>语句执行时已经变成了5。</p></li></ol><p>总之，<code>defer</code>是Go语言中用于延迟执行函数调用的强大工具，通常用于确保资源的释放和清理操作的执行。它使得代码更加清晰、健壮，并减少了资源泄漏的风险。但要小心<code>defer</code>语句中参数的求值时机，以避免意外行为。</p><hr><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),c=[p];function i(l,u){return a(),e("div",null,c)}const v=s(o,[["render",i],["__file","12.defer.html.vue"]]);export{v as default};
