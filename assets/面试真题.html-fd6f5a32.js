import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,f as n}from"./app-44adde98.js";const o={},c=n(`<h2 id="_1-select-a-from-table-where-b-and-c-or-d-怎么建立索引" tabindex="-1"><a class="header-anchor" href="#_1-select-a-from-table-where-b-and-c-or-d-怎么建立索引" aria-hidden="true">#</a> 1. select a from table where b=? and (c=? or d=?)；怎么建立索引？</h2><p><code>出自快手</code><br> 在这种情况下，你可以考虑创建一个复合索引来优化查询性能。复合索引是基于多个列的索引，可以加速在这些列上进行的过滤和匹配操作。对于你的查询语句 SELECT a FROM table WHERE b=? AND (c=? OR d=?)，你可以考虑创建一个包含列 b、c 和 d 的复合索引。</p><p>以下是如何创建这个复合索引的示例 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_table_b_c_d <span class="token keyword">ON</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在表 table 上创建一个名为 idx_table_b_c_d 的索引，包括列 b、c 和 d。</p><p><code>但是</code>，对于这个查询语句 <code>SELECT a FROM table WHERE b=? AND (c=? OR d=?)</code>，由于存在 <code>OR</code> 条件，实际上索引 <code>idx_table_b_c_d</code> 中的 <code>c</code> 和 <code>d</code> 部分将不会同时用于加速查询。</p><p>在这个查询中，<code>OR</code> 条件的性质会导致优化器在查询时选择一个条件进行过滤，然后再针对结果集进行额外的筛选。因此，只有 <code>b</code> 部分会被用于索引的加速，而 <code>c</code> 和 <code>d</code> 部分不会被直接用于索引加速。</p><p>所以，如果你的查询重点在于优化这个特定的查询语句，一个更好的索引策略可能是考虑单独为列 <code>b</code> 建立索引，而不需要包含 <code>c</code> 和 <code>d</code> 列。这样可以最大程度地利用索引来加速 <code>WHERE b=?</code> 的条件筛选。</p><blockquote><p>如果就是要建立b、c、d的联合索引，查询语句可以怎么优化？</p></blockquote><p>如果你决定要继续建立联合索引包含列 <code>b</code>、<code>c</code> 和 <code>d</code>，并且你希望优化查询语句 <code>SELECT a FROM table WHERE b=? AND (c=? OR d=?)</code>，以下是一些建议来优化这个查询：</p><ol><li><p><strong>重写查询条件：</strong> 考虑重写查询条件，以避免 <code>OR</code> 条件。例如，你可以分成两个查询，一个查询处理 <code>c=?</code> 的条件，另一个查询处理 <code>d=?</code> 的条件，然后将结果合并。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询条件 c=?</span>
<span class="token keyword">SELECT</span> a <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> b<span class="token operator">=</span>? <span class="token operator">AND</span> c<span class="token operator">=</span>?<span class="token punctuation">;</span>

<span class="token comment">-- 查询条件 d=?</span>
<span class="token keyword">SELECT</span> a <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> b<span class="token operator">=</span>? <span class="token operator">AND</span> d<span class="token operator">=</span>?<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种重写可以允许数据库优化器更充分地利用索引。</p></li><li><p><strong>拆分 <code>OR</code> 条件：</strong> 如果你不能避免使用 <code>OR</code> 条件，你可以尝试拆分查询成两个部分，然后使用 <code>UNION</code> 运算符将结果合并。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询条件 c=? 和 b=?</span>
<span class="token keyword">SELECT</span> a <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> b<span class="token operator">=</span>? <span class="token operator">AND</span> c<span class="token operator">=</span>?
<span class="token keyword">UNION</span>
<span class="token comment">-- 查询条件 d=? 和 b=?</span>
<span class="token keyword">SELECT</span> a <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> b<span class="token operator">=</span>? <span class="token operator">AND</span> d<span class="token operator">=</span>?<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可以使数据库优化器更好地使用索引，因为每个查询都只包含一个条件。</p></li><li><p><strong>使用适当的索引提示：</strong> 根据数据库系统的支持，你可能可以使用索引提示（Index Hint）来指导优化器使用特定的索引。但这样做通常是在极端情况下考虑的。</p></li><li><p><strong>性能测试和分析：</strong> 无论使用哪种方法，都建议使用数据库系统提供的性能分析工具（如 <code>EXPLAIN</code> 命令）来查看查询的执行计划，以及索引是否被充分利用。这将帮助你了解查询是如何执行的，以及是否需要进一步调整和优化。</p></li></ol>`,11),d=[c];function p(l,t){return e(),a("div",null,d)}const k=s(o,[["render",p],["__file","面试真题.html.vue"]]);export{k as default};
