import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-86c4e386.js";const t={},e=p(`<h2 id="递归知道吗-简单说说吧" tabindex="-1"><a class="header-anchor" href="#递归知道吗-简单说说吧" aria-hidden="true">#</a> 递归知道吗？简单说说吧</h2><p>递归是一种算法或编程技术，它是指在解决问题时使用函数自身的调用。简单来说，递归是将一个问题分解成一个或多个与原问题类似但规模较小的子问题来解决的方法。这些子问题会不断地缩小，直到它们变得足够简单，可以直接求解。</p><p>递归的关键在于分解和基本情况（也称为递归基）：</p><ol><li><p><strong>分解（Divide）：</strong> 在解决问题时，将问题分解成更小的子问题。每次递归调用时，问题的规模会减小，直到达到基本情况。</p></li><li><p><strong>基本情况（Base Case）：</strong> 这是递归的终止条件。当问题变得足够小，可以直接求解时，递归不再继续，而是返回一个确定的值。</p></li></ol><p>在使用递归时，确保每次递归调用都朝着基本情况靠近，以避免无限递归。如果每次递归调用都足够接近基本情况，递归最终会收敛到基本情况并停止。</p><p>一个经典的递归例子是计算阶乘。阶乘 n! 的定义是 n! = n * (n-1)!，其中基本情况是 0! = 1 和 1! = 1。</p><p>递归在编程中非常有用，但需要小心使用，因为不正确的递归调用可能导致无限循环和性能问题。理解问题如何被分解成更小的子问题以及何时达到基本情况是掌握递归的关键。</p><h2 id="快排会吗-写一下" tabindex="-1"><a class="header-anchor" href="#快排会吗-写一下" aria-hidden="true">#</a> 快排会吗？写一下?</h2><p>当然，我可以帮你写一个快速排序算法的示例代码。快速排序是一种常用的排序算法，它的基本思想是通过选择一个基准元素，将数组分成左右两部分，使得左边的元素都小于基准，右边的元素都大于基准，然后递归地对左右两部分进行排序。</p><p>以下是一个用 Python 实现的快速排序示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> arr
    
    pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 选择基准元素</span>
    left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>
    middle <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">==</span> pivot<span class="token punctuation">]</span>
    right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">&gt;</span> pivot<span class="token punctuation">]</span>
    
    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span>

<span class="token comment"># 测试代码</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
sorted_arr <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sorted_arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>quick_sort</code> 函数接受一个列表 <code>arr</code> 作为输入，然后递归地对左右两部分进行排序，并将排好序的左、中、右三个部分合并起来，最终得到完整的有序数组。这个例子中的基准元素选择方法是取数组中间的元素，实际上也可以选择其他的方法。</p><p>请注意，虽然这个示例代码演示了快速排序的基本思想，但在实际应用中，为了避免在最坏情况下的性能问题，可能需要考虑一些优化措施，比如随机选择基准元素，使用三路快排等。</p><h2 id="s-sdsdscdffgdfcsdsdsd-计算字符串s中c出现的位置和次数" tabindex="-1"><a class="header-anchor" href="#s-sdsdscdffgdfcsdsdsd-计算字符串s中c出现的位置和次数" aria-hidden="true">#</a> s = &quot;sdsdscdffgdfcsdsdsd&quot;, 计算字符串s中c出现的位置和次数</h2><p>要计算字符串中字符 &quot;c&quot; 出现的位置和次数，你可以使用以下 Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;sdsdscdffgdfcsdsdsd&quot;</span>
c <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span>

positions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
count <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">:</span>
        positions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Character &#39;c&#39; appeared at positions:&quot;</span><span class="token punctuation">,</span> positions<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Total occurrences:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会遍历字符串 <code>s</code> 中的每个字符，如果字符等于目标字符 <code>c</code>，就将其位置添加到 <code>positions</code> 列表中，并增加计数器 <code>count</code> 的值。最后，打印出字符 &quot;c&quot; 的出现位置和总次数。</p>`,17),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","20230829_深圳千巡科技面试题.html.vue"]]);export{d as default};
