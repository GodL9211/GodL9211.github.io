import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as p,a as n,b as a,e,f as o}from"./app-967d79b2.js";const c={},d=o('<h1 id="rest-framework专栏讲解-十二-serializer-fields" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十二-serializer-fields" aria-hidden="true">#</a> Rest-framework专栏讲解(十二)：Serializer fields</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#Serializer-%E5%AD%97%E6%AE%B5">Serializer 字段</a><ul><li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a><ul><li><a href="#read_only">read_only</a></li><li><a href="#write_only">write_only</a></li><li><a href="#required">required</a></li><li><a href="#allow_null">allow_null</a></li><li><a href="#default">default</a></li><li><a href="#source">source</a></li><li><a href="#validators">validators</a></li><li><a href="#error_messages">error_messages</a></li><li><a href="#label">label</a></li><li><a href="#help_text">help_text</a></li><li><a href="#initial">initial</a></li><li><a href="#style">style</a></li></ul></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">序列化字段类型</a><ul><li><a href="#BooleanField">BooleanField</a></li><li><a href="#NullBooleanField">NullBooleanField</a></li><li><a href="#CharField">CharField</a></li><li><a href="#EmailField">EmailField</a></li><li><a href="#RegexField">RegexField</a></li><li><a href="#SlugField">SlugField</a></li><li><a href="#URLField">URLField</a></li><li><a href="#UUIDField">UUIDField</a></li><li><a href="#FilePathField">FilePathField</a></li><li><a href="#IPAddressField">IPAddressField</a></li><li><a href="#IntegerField">IntegerField</a></li><li><a href="#FloatField">FloatField</a></li><li><a href="#DecimalField">DecimalField</a><ul><li><a href="#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B">用法示例</a></li></ul></li><li><a href="#DateTimeField">DateTimeField</a><ul><li><a href="#DateTimeField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">DateTimeField 格式化字符串。</a></li><li><a href="#auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5">auto_now 和 auto_now_add 模型字段。</a></li></ul></li><li><a href="#DateField">DateField</a><ul><li><a href="#DateField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">DateField 格式化字符串</a></li></ul></li><li><a href="#TimeField">TimeField</a><ul><li><a href="#TimeField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">TimeField 格式化字符串</a></li></ul></li><li><a href="#DurationField">DurationField</a></li><li><a href="#ChoiceField">ChoiceField</a></li><li><a href="#MultipleChoiceField">MultipleChoiceField</a></li><li><a href="#FileField">FileField</a></li><li><a href="#ImageField">ImageField</a></li><li><a href="#ListField">ListField</a></li><li><a href="#DictField">DictField</a></li><li><a href="#HStoreField">HStoreField</a></li><li><a href="#JSONField">JSONField</a></li><li><a href="#ReadOnlyField">ReadOnlyField</a></li><li><a href="#HiddenField">HiddenField</a></li><li><a href="#ModelField">ModelField</a></li><li><a href="#SerializerMethodField">SerializerMethodField</a></li></ul></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5">自定义字段</a><ul><li><a href="#%E7%9C%8B%E5%87%A0%E4%B8%AA%E6%A0%97%E5%AD%90">看几个栗子</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5">基本的自定义字段</a></li><li><a href="#%E6%8A%9B%E5%87%BA%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF">抛出验证错误</a></li><li><a href="#%E4%BD%BF%E7%94%A8-source">使用 source=&#39; *&#39;</a></li></ul></li></ul></li></ul><hr>',4),r={href:"http://www.django-rest-framework.org/api-guide/fields/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},u={id:"serializer-字段",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#serializer-字段","aria-hidden":"true"},"#",-1),h={href:"http://drf.jiuyou.info/#/drf/fields?id=serializer-%E5%AD%97%E6%AE%B5",title:"Serializer 字段",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),m={href:"https://docs.djangoproject.com/en/stable/ref/forms/api/#django.forms.Form.cleaned_data",title:"Django 文档",target:"_blank",rel:"noopener noreferrer"},f=o("<p>序列化字段<code>处理基本数据类型和其他数据类型（比如自定义的类）之间的转换</code>。它们还可以<code>对数据进行验证</code>，以及<code>从其父对象中检索</code>和<code>设置值</code>。</p><hr><p><strong>注意：</strong> 序列化字段都声明在 <code>fields.py</code> 中，但按照惯例，应该使用 <code>from rest_framework import serializers</code> ，并用 <code>serializers.&lt;FieldName&gt;</code> 的方式引用。</p><p>对于框架而言, 序列化器不仅仅是对需要参数的声明, 更是参数校验和标准化输出的策略, 所以对此, 你需要严格按照你的开发实际情况声明好你的字段约束。</p>",4),v={id:"核心参数",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#核心参数","aria-hidden":"true"},"#",-1),b={href:"http://drf.jiuyou.info/#/drf/fields?id=%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0",title:"核心参数",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,"每个序列化字段类的构造函数都需要一些参数。某些字段类需要附加特定于该字段的参数，但应始终接受以下参数：",-1),y={id:"read-only",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#read-only","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/fields?id=read_only",title:"read_only",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"只读字段包含于输出 API 中，不应该包含在需要创建或更新操作的输入 API 中。在序列化类输入中错误的包含 'read_only' 会被忽略。",-1),A=n("p",null,[a("将其设置为 "),n("code",null,"True"),a(" 可确保在序列化表示时使用该字段，但在反序列化期间创建或更新实例时不使用该字段。")],-1),D=n("p",null,[a("默认为 "),n("code",null,"False")],-1),B={id:"write-only",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#write-only","aria-hidden":"true"},"#",-1),j={href:"http://drf.jiuyou.info/#/drf/fields?id=write_only",title:"write_only",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,[a("将其设置为 "),n("code",null,"True"),a(" 以确保在更新或创建实例时可以使用该字段，但在序列化表示时不包括该字段。")],-1),C=n("p",null,[a("默认为 "),n("code",null,"False")],-1),q={id:"required",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#required","aria-hidden":"true"},"#",-1),I={href:"http://drf.jiuyou.info/#/drf/fields?id=required",title:"required",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"如果在反序列化过程中没有该提供字段，通常会出现错误。如果在反序列化过程中不需要此字段，则应该设置为 false。",-1),M=n("p",null,[a("将此设置为 "),n("code",null,"False"),a(" 还允许在序列化实例时从输出中省略对象属性或字典密钥。如果密钥不存在，它将不会包含在输出表示中。")],-1),P=n("p",null,[a("默认为 "),n("code",null,"True")],-1),R={id:"allow-null",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#allow-null","aria-hidden":"true"},"#",-1),U={href:"http://drf.jiuyou.info/#/drf/fields?id=allow_null",title:"allow_null",target:"_blank",rel:"noopener noreferrer"},O=o("<p>如果把 <code>None</code> 传递给序列化字段，通常会引发错误。如果 <code>None</code> 应被视为有效值，则将此关键字参数设置为 <code>True</code> 。</p><p>请注意，将此参数设置为 <code>True</code> 将意味着序列化输出的缺省值为 <code>null</code>，但并不意味着输入反序列化的缺省值。</p><p>默认为 <code>False</code></p>",3),H={id:"default",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#default","aria-hidden":"true"},"#",-1),J={href:"http://drf.jiuyou.info/#/drf/fields?id=default",title:"default",target:"_blank",rel:"noopener noreferrer"},G=o("<p>如果设置，则会给出默认值，在没有提供输入值时，将使用该默认值。如果未设置，则默认行为是不填充该属性。</p><p>部分更新操作时不应该使用 <code>default</code>。因为有些情况下，只有传入数据中提供的字段才会返回验证值。</p><p>可以设置为函数或其他可调用的对象，在这种情况下，每次使用该值时都会对其进行调用。被调用时，它将不会收到任何参数。如果可调用对象具有 <code>set_context</code> 方法，那么在每次将字段实例作为参数获取值之前都会调用该方法。这与验证器的工作方式相同。</p><p>在序列化实例时，如果对象属性或字典关键字不存在于实例中，将使用缺省值。</p><p>请注意，设置默认值意味着该字段不是必需的。同时包括 <code>default</code> 和 <code>required</code> 的关键字参数都是无效的，会引发错误。</p>",5),Z={id:"source",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#",-1),$={href:"http://drf.jiuyou.info/#/drf/fields?id=source",title:"source",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,[a("将用于填充字段的属性的名称。可以是一个只接受 "),n("code",null,"self"),a(" 参数的方法，如 "),n("code",null,"URLField(source='get_absolute_url')"),a("，或者使用点符号来遍历属性，如 "),n("code",null,"EmailField(source='user.email')"),a("。在使用点符号时，如果在属性遍历期间任何对象不存在或为空，则可能需要提供缺省值。")],-1),Q=n("p",null,[n("code",null,"source ='*'"),a(" 具有特殊含义，用于表示整个对象应该传递到该字段。这对创建嵌套表示或对于需要访问完整对象以确定输出表示的字段非常有用。")],-1),X=n("p",null,"默认为该字段的名称。",-1),Y={id:"validators",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#validators","aria-hidden":"true"},"#",-1),an={href:"http://drf.jiuyou.info/#/drf/fields?id=validators",title:"validators",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,[a("应该应用于传入字段输入的验证函数列表，该列表中的函数应该引发验证错误或仅返回。验证器函数通常应该引发 "),n("code",null,"serializers.ValidationError"),a(" ，但 Django 的内置 "),n("code",null,"ValidationError"),a(" 也支持与 Django 代码库或第三方 Django 包中定义的验证器兼容。")],-1),en={id:"error-messages",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#error-messages","aria-hidden":"true"},"#",-1),tn={href:"http://drf.jiuyou.info/#/drf/fields?id=error_messages",title:"error_messages",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,"一个字典，key 是错误代码， value 是对应的错误信息。",-1),pn={id:"label",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#label","aria-hidden":"true"},"#",-1),dn={href:"http://drf.jiuyou.info/#/drf/fields?id=label",title:"label",target:"_blank",rel:"noopener noreferrer"},rn=n("p",null,"一个简短的文本字符串，可用作 HTML 表单字段或其他描述性元素中字段的名称。",-1),un={id:"help-text",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#help-text","aria-hidden":"true"},"#",-1),hn={href:"http://drf.jiuyou.info/#/drf/fields?id=help_text",title:"help_text",target:"_blank",rel:"noopener noreferrer"},_n=n("p",null,"一个文本字符串，可用作 HTML 表单字段或其他描述性元素中字段的描述。",-1),mn={id:"initial",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#initial","aria-hidden":"true"},"#",-1),vn={href:"http://drf.jiuyou.info/#/drf/fields?id=initial",title:"initial",target:"_blank",rel:"noopener noreferrer"},gn=o(`<p>应该用于预填充 HTML 表单字段的值。你可能会传递一个可调用对象，就像你对任何常规 Django <code>Field</code> 所做的一样：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">class</span> <span class="token class-name">ExampleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    day <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>initial<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),bn={id:"style",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#style","aria-hidden":"true"},"#",-1),yn={href:"http://drf.jiuyou.info/#/drf/fields?id=style",title:"style",target:"_blank",rel:"noopener noreferrer"},En=o(`<p>可用于控制渲染器渲染字段的键值对的字典。</p><p>这里有两个例子是 <code>&#39;input_type&#39;</code> 和 <code>&#39;base_template&#39;</code> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Use &lt;input type=&quot;password&quot;&gt; for the input.</span>
password <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;input_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment"># Use a radio input instead of a select input.</span>
color_channel <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>
    choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;radio.html&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="序列化字段类型" tabindex="-1"><a class="header-anchor" href="#序列化字段类型" aria-hidden="true">#</a> 序列化字段类型</h2><h3 id="booleanfield" tabindex="-1"><a class="header-anchor" href="#booleanfield" aria-hidden="true">#</a> BooleanField</h3><p>表示一个 boolean 值。</p><p>使用 HTML 编码表单时需要注意，省略一个 boolean 值被视为将字段设置为 <code>False</code>，即使它指定了 <code>default=True</code> 选项。这是因为 HTML 复选框通过省略该值来表示未选中的状态，所以 REST framework 将省略看作是空的复选框。</p><p>请注意，将使用 <code>required=False</code> 选项生成默认的 <code>BooleanField</code> 实例（因为 Django <code>models.BooleanField</code> 始终为 <code>blank=True</code>）。如果想要更改此行为，请在序列化类上显式声明 <code>BooleanField</code>。</p><p>对应与 <code>django.db.models.fields.BooleanField</code>.</p><p><strong>签名：</strong> <code>BooleanField()</code></p><h3 id="nullbooleanfield" tabindex="-1"><a class="header-anchor" href="#nullbooleanfield" aria-hidden="true">#</a> NullBooleanField</h3><p>表示一个布尔值，它也接受 <code>None</code> 作为有效值。</p><p>对应与 <code>django.db.models.fields.NullBooleanField</code>.</p><p><strong>签名：</strong> <code>NullBooleanField()</code></p><h3 id="charfield" tabindex="-1"><a class="header-anchor" href="#charfield" aria-hidden="true">#</a> CharField</h3><p>表示文本。可以使用 <code>max_length</code> ， <code>min_length</code> 验证（或限定）文本的长短。</p><p>对应与 <code>django.db.models.fields.CharField</code> 或 <code>django.db.models.fields.TextField</code>.</p><p><strong>签名：</strong> <code>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</code></p><ul><li><code>max_length</code> - 验证输入所包含的字符数不超过这个数目。</li><li><code>min_length</code> - 验证输入所包含的字符数不少于这个数目。</li><li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认为 <code>False</code>。</li><li><code>trim_whitespace</code> - 如果设置为 <code>True</code>，则前后空白将被删除。默认为 <code>True</code>。</li></ul><p><code>allow_null</code> 选项也可用于字符串字段，尽管它相对于 <code>allow_blank</code> 来说不被推荐。同时设置 <code>allow_blank=True</code> 和 <code>allow_null=True</code> 是有效的，但这样做意味着字符串表示允许有两种不同类型的空值，这可能导致数据不一致和微妙的应用程序错误。</p><h3 id="emailfield" tabindex="-1"><a class="header-anchor" href="#emailfield" aria-hidden="true">#</a> EmailField</h3><p>表示文本，将文本验证为有效的电子邮件地址。</p><p>对应与 django.db.models.fields.EmailField</p><p>签名： EmailField(max_length=None, min_length=None, allow_blank=False)</p><h3 id="regexfield" tabindex="-1"><a class="header-anchor" href="#regexfield" aria-hidden="true">#</a> RegexField</h3><p>表示文本，用于验证给定的值是否与某个正则表达式匹配。</p><p>对应与 <code>django.forms.fields.RegexField</code>.</p><p><strong>签名：</strong> <code>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</code></p><p>强制的 <code>regex</code> 参数可以是一个字符串，也可以是一个编译好的 Python 正则表达式对象。</p><p>使用 Django 的 <code>django.core.validators.RegexValidator</code> 进行验证。</p><h3 id="slugfield" tabindex="-1"><a class="header-anchor" href="#slugfield" aria-hidden="true">#</a> SlugField</h3><p>一个根据模式 <code>[a-zA-Z0-9_-]+</code> 验证输入的 <code>RegexField</code> 。</p><p>对应与 <code>django.db.models.fields.SlugField</code>.</p><p><strong>签名：</strong> <code>SlugField(max_length=50, min_length=None, allow_blank=False)</code></p><h3 id="urlfield" tabindex="-1"><a class="header-anchor" href="#urlfield" aria-hidden="true">#</a> URLField</h3><p>一个根据 URL 匹配模式验证输入的 <code>RegexField</code>。完全合格的 URL 格式为 <code>http://&lt;host&gt;/&lt;path&gt;</code>。</p><p>对应与 <code>django.db.models.fields.URLField</code>. 使用 Django 的 <code>django.core.validators.URLValidator</code> 进行验证。</p><p><strong>签名：</strong> <code>URLField(max_length=200, min_length=None, allow_blank=False)</code></p><h3 id="uuidfield" tabindex="-1"><a class="header-anchor" href="#uuidfield" aria-hidden="true">#</a> UUIDField</h3><p>确保输入的字段是有效的 UUID 字符串。<code>to_internal_value</code> 方法将返回一个 <code>uuid.UUID</code> 实例。在输出时，字段将以规范的连字符格式返回一个字符串，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;de305d54-75b4-431b-adb2-eb6b9e546013&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>签名：</strong> <code>UUIDField(format=&#39;hex_verbose&#39;)</code></p><ul><li><code>format</code>：指定 UUID 的表示类型 <ul><li><code>hex_verbose</code>：规范的十六进制形式, 包括连字符：<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></li><li><code>hex</code>：紧凑的十六进制形式, 不包括连字符： <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code></li><li><code>int</code>：128位整数表示：<code>&quot;123456789012312313134124512351145145114&quot;</code></li><li><code>urn</code>：RFC 4122 URN表示形式：<code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></li></ul></li></ul><h3 id="filepathfield" tabindex="-1"><a class="header-anchor" href="#filepathfield" aria-hidden="true">#</a> FilePathField</h3><p>一个其选项仅限于文件系统上某个目录中的文件名的字段。</p><p>对应于 <code>django.forms.fields.FilePathField</code>.</p><p><strong>签名：</strong> <code>FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)</code></p><ul><li><code>path</code> - FilePathField 应该从中选择的目录的绝对文件系统路径。</li><li><code>match</code> - 用来过滤文件名的正则表达式，string 类型。</li><li><code>recursive</code> - 指定是否应该包含路径的所有子目录。默认值是 <code>False</code>。</li><li><code>allow_files</code> - 是否应该包含指定位置的文件。默认值为 <code>True</code>。这个参数或 <code>allow_folders</code> 必须是 <code>True</code>。（两个属性必须有一个为 <code>true</code>）</li><li><code>allow_folders</code> - 是否应该包含指定位置的文件夹。默认值是 <code>False</code>。这个参数或 <code>allow_files</code> 必须是 <code>True</code>。（两个属性必须有一个为 <code>true</code>）</li></ul><h3 id="ipaddressfield" tabindex="-1"><a class="header-anchor" href="#ipaddressfield" aria-hidden="true">#</a> IPAddressField</h3><p>确保输入是有效的 IPv4 或 IPv6 字符串。</p><p>对应于 <code>django.forms.fields.IPAddressField</code> 和 <code>django.forms.fields.GenericIPAddressField</code>.</p><p><strong>签名：</strong> <code>IPAddressField(protocol=&#39;both&#39;, unpack_ipv4=False, **options)</code></p><ul><li><code>protocol</code> 将有效输入限制为指定的协议。接受的值是 <code>&#39;both&#39;</code> （默认），<code>&#39;IPv4&#39;</code> 或 <code>&#39;IPv6&#39;</code> 。匹配不区分大小写。</li><li><code>unpack_ipv4</code> 解压 IPv4 映射的地址，如 <code>::ffff:192.0.2.1</code>。如果启用此选项，则该地址将解压到 192.0.2.1。 默认是禁用的。只能在 <code>protocol</code> 设置为 <code>&#39;both&#39;</code> 时使用。</li></ul>`,53),wn={id:"integerfield",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#integerfield","aria-hidden":"true"},"#",-1),An={href:"http://drf.jiuyou.info/#/drf/fields?id=integerfield",title:"IntegerField",target:"_blank",rel:"noopener noreferrer"},Dn=o('<p>表示整数。</p><p>对应于 <code>django.db.models.fields.IntegerField</code>, <code>django.db.models.fields.SmallIntegerField</code>, <code>django.db.models.fields.PositiveIntegerField</code> 和 <code>django.db.models.fields.PositiveSmallIntegerField</code>。</p><p><strong>签名：</strong> <code>IntegerField(max_value=None, min_value=None)</code></p><ul><li><code>max_value</code> 验证所提供的数字不大于这个值。</li><li><code>min_value</code> 验证所提供的数字不小于这个值。</li></ul><h3 id="floatfield" tabindex="-1"><a class="header-anchor" href="#floatfield" aria-hidden="true">#</a> FloatField</h3><p>表示浮点数。</p><p>对应于 <code>django.db.models.fields.FloatField</code>.</p><p><strong>签名：</strong> <code>FloatField(max_value=None, min_value=None)</code></p><ul><li><code>max_value</code> 验证所提供的数字不大于这个值。</li><li><code>min_value</code> 验证所提供的数字不小于这个值。</li></ul><h3 id="decimalfield" tabindex="-1"><a class="header-anchor" href="#decimalfield" aria-hidden="true">#</a> DecimalField</h3><p>表示十进制，由 Python 用 <code>Decimal</code> 实例表示。</p><p>对应于 <code>django.db.models.fields.DecimalField</code>.</p><p><strong>签名：</strong> <code>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)</code></p>',13),Bn=o("<li><code>max_digits</code> 允许的最大位数。它必须是 <code>None</code> 或大于等于 <code>decimal_places</code> 的整数。</li><li><code>decimal_places</code> 小数位数。</li><li><code>coerce_to_string</code> 如果应返回字符串值，则设置为 <code>True</code> ;如果应返回 <code>Decimal</code> 对象，则设置为 <code>False</code> 。默认值与 <code>COERCE_DECIMAL_TO_STRING</code> settings key 的值相同，除非被覆盖，否则该值将为 <code>True</code>。如果序列化对象返回 <code>Decimal</code> 对象，则最终的输出格式将由渲染器决定。请注意，设置 <code>localize</code> 将强制该值为 <code>True</code>。</li><li><code>max_value</code> 验证所提供的数字不大于这个值。</li><li><code>min_value</code> 验证所提供的数字不小于这个值。</li><li><code>localize</code> 设置为 <code>True</code> 以启用基于当前语言环境的输入和输出本地化。这也会迫使 <code>coerce_to_string</code> 为 <code>True</code> 。默认为 <code>False</code> 。请注意，如果你在 settings 文件中设置了 <code>USE_L10N=True</code>，则会启用数据格式化。</li>",6),Tn=n("code",null,"rounding",-1),jn=n("code",null,"decimal",-1),zn=n("code",null,"None",-1),Cn={id:"用法示例",tabindex:"-1"},qn=n("a",{class:"header-anchor",href:"#用法示例","aria-hidden":"true"},"#",-1),Sn={href:"http://drf.jiuyou.info/#/drf/fields?id=%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B",title:"用法示例",target:"_blank",rel:"noopener noreferrer"},In=o(`<p>若要验证数字到999，精确到 2 位小数，应该使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializers<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用10位小数来验证数字不超过10亿：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializers<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个字段还接受一个可选参数，<code>coerce_to_string</code>。如果设置为 <code>True</code>，则表示将以字符串形式输出。如果设置为 <code>False</code>，则表示将保留为 <code>Decimal</code> 实例，最终表示形式将由渲染器确定。</p><p>如果未设置，则默认设置为与 <code>COERCE_DECIMAL_TO_STRING</code> setting 相同的值，除非另行设置，否则该值为 <code>True</code>。</p><h3 id="datetimefield" tabindex="-1"><a class="header-anchor" href="#datetimefield" aria-hidden="true">#</a> DateTimeField</h3><p>表示日期和时间。</p><p>对应于 <code>django.db.models.fields.DateTimeField</code>.</p><p><strong>签名：</strong> <code>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>DATETIME_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>&#39;iso-8601&#39;</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>datetime</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>DATETIME_INPUT_FORMATS</code> 设置，该设置默认为 <code>[&#39;iso-8601&#39;]</code>。</li></ul>`,11),Nn={id:"datetimefield-格式化字符串。",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#datetimefield-格式化字符串。","aria-hidden":"true"},"#",-1),Pn={href:"http://drf.jiuyou.info/#/drf/fields?id=datetimefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82",title:"DateTimeField",target:"_blank",rel:"noopener noreferrer"},Rn={href:"http://drf.jiuyou.info/#/drf/fields?id=datetimefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82",title:" 格式化字符串。",target:"_blank",rel:"noopener noreferrer"},Ln=n("p",null,[a("格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 datetime 的特殊字符串 "),n("code",null,"iso-8601"),a(" 。（例如 "),n("code",null,"'2013-01-29T12:34:56.000000Z'"),a("）")],-1),Un=n("p",null,[a("当一个 "),n("code",null,"None"),a(" 值被用于格式化 "),n("code",null,"datetime"),a(" 对象时，"),n("code",null,"to_representation"),a(" 将返回，最终的输出表示将由渲染器类决定。")],-1),On={id:"auto-now-和-auto-now-add-模型字段。",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#auto-now-和-auto-now-add-模型字段。","aria-hidden":"true"},"#",-1),Vn={href:"http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82",title:"auto_now",target:"_blank",rel:"noopener noreferrer"},Jn={href:"http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82",title:" 和 ",target:"_blank",rel:"noopener noreferrer"},Gn={href:"http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82",title:"auto_now_add",target:"_blank",rel:"noopener noreferrer"},Zn={href:"http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82",title:" 模型字段。",target:"_blank",rel:"noopener noreferrer"},Wn=o(`<p>使用 <code>ModelSerializer</code> 或 <code>HyperlinkedModelSerializer</code> 时，请注意，<code>auto_now=True</code>或 <code>auto_now_add=True</code> 的模型字段默认情况下将使用 <code>read_only=True</code> 。</p><p>如果想覆盖此行为，则需要在序列化类中明确声明 <code>DateTimeField</code>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Comment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datefield" tabindex="-1"><a class="header-anchor" href="#datefield" aria-hidden="true">#</a> DateField</h3><p>表示日期。</p><p>对应于 <code>django.db.models.fields.DateField</code></p><p><strong>签名：</strong> <code>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>DATE_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>&#39;iso-8601&#39;</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>date</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>DATE_INPUT_FORMATS</code> 设置，该设置默认为 <code>[&#39;iso-8601&#39;]</code>。</li></ul>`,8),$n={id:"datefield-格式化字符串",tabindex:"-1"},Kn=n("a",{class:"header-anchor",href:"#datefield-格式化字符串","aria-hidden":"true"},"#",-1),Qn={href:"http://drf.jiuyou.info/#/drf/fields?id=datefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2",title:"DateField",target:"_blank",rel:"noopener noreferrer"},Xn={href:"http://drf.jiuyou.info/#/drf/fields?id=datefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2",title:" 格式化字符串",target:"_blank",rel:"noopener noreferrer"},Yn=o('<p>格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 date 的特殊字符串 <code>iso-8601</code> 。（例如 <code>&#39;2013-01-29&#39;</code>）</p><h3 id="timefield" tabindex="-1"><a class="header-anchor" href="#timefield" aria-hidden="true">#</a> TimeField</h3><p>表示时间。</p><p>对应于 <code>django.db.models.fields.TimeField</code></p><p><strong>签名：</strong> <code>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>TIME_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>&#39;iso-8601&#39;</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>time</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>TIME_INPUT_FORMATS</code> 设置，该设置默认为 <code>[&#39;iso-8601&#39;]</code>。</li><li><code>default_timezone</code> - 时区, 如果未指定并且 USE_TZ 设置已启用, 则默认为当前时区</li></ul>',6),na={id:"timefield-格式化字符串",tabindex:"-1"},aa=n("a",{class:"header-anchor",href:"#timefield-格式化字符串","aria-hidden":"true"},"#",-1),sa={href:"http://drf.jiuyou.info/#/drf/fields?id=timefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2",title:"TimeField",target:"_blank",rel:"noopener noreferrer"},ea={href:"http://drf.jiuyou.info/#/drf/fields?id=timefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2",title:" 格式化字符串",target:"_blank",rel:"noopener noreferrer"},oa=o(`<p>格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 time 的特殊字符串 <code>iso-8601</code> 。（例如 <code>&#39;12:34:56.000000&#39;</code>）</p><h3 id="durationfield" tabindex="-1"><a class="header-anchor" href="#durationfield" aria-hidden="true">#</a> DurationField</h3><p>表示持续时间。 对应于 <code>django.db.models.fields.DurationField</code></p><p>这些字段的 <code>validated_data</code> 将包含一个 <code>datetime.timedelta</code> 实例。该表示形式是遵循格式 <code>&#39;[DD] [HH:[MM:]]ss[.uuuuuu]&#39;</code> 的字符串。</p><p><strong>签名：</strong> <code>DurationField()</code></p><h3 id="choicefield" tabindex="-1"><a class="header-anchor" href="#choicefield" aria-hidden="true">#</a> ChoiceField</h3><p>可以从一个有限的选择中接受值的字段。</p><p>如果相应的模型字段包含 <code>choices=…</code> 参数，则由 <code>ModelSerializer</code> 自动生成字段。</p><p><strong>签名：</strong> <code>ChoiceField(choices)</code></p><ul><li><code>choices</code> - 有效值列表，或 <code>(key, display_name)</code> 元组列表。</li><li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认是 <code>False</code>。</li><li><code>html_cutoff</code> - 如果设置，这将是 HTML 选择下拉菜单中显示的选项的最大数量。可用于确保自动生成具有非常大可以选择的 ChoiceField，而不会阻止模板的渲染。默认是 <code>None</code>.</li><li><code>html_cutoff_text</code> - 指定一个文本指示器，在截断列表时显示，比如在 HTML 选择下拉菜单中已经截断了最大数量的项目。默认就会显示 <code>&quot;More than {count} items…&quot;</code></li></ul><p><code>Allow_blank</code> 和 <code>allow_null</code> 都是 <code>ChoiceField</code> 上的有效选项，但强烈建议只使用一个而不是两个都用。对于文本选择，<code>allow_blank</code> 应该是首选，<code>allow_null</code> 应该是数字或其他非文本选项的首选。</p><h3 id="multiplechoicefield" tabindex="-1"><a class="header-anchor" href="#multiplechoicefield" aria-hidden="true">#</a> MultipleChoiceField</h3><p>可以接受一组零、一个或多个值的字段，从有限的一组选择中选择。采取一个必填的参数。 <code>to_internal_value</code> 返回一个包含选定值的 <code>set</code>。</p><p><strong>签名：</strong> <code>MultipleChoiceField(choices)</code></p><ul><li><code>choices</code> - 有效值列表，或 <code>(key, display_name)</code> 元组列表。</li><li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认是 <code>False</code>。</li><li><code>html_cutoff</code> - 如果设置，这将是 HTML 选择下拉菜单中显示的选项的最大数量。可用于确保自动生成具有非常大可以选择的 ChoiceField，而不会阻止模板的渲染。默认是 <code>None</code>.</li><li><code>html_cutoff_text</code> - 指定一个文本指示器，在截断列表时显示，比如在 HTML 选择下拉菜单中已经截断了最大数量的项目。默认就会显示 <code>&quot;More than {count} items…&quot;</code></li></ul><p><code>Allow_blank</code> 和 <code>allow_null</code> 都是 <code>ChoiceField</code> 上的有效选项，但强烈建议只使用一个而不是两个都用。对于文本选择，<code>allow_blank</code> 应该是首选，<code>allow_null</code> 应该是数字或其他非文本选项的首选。</p><h3 id="filefield" tabindex="-1"><a class="header-anchor" href="#filefield" aria-hidden="true">#</a> FileField</h3><p>表示文件。执行 Django 的标准 FileField 验证。</p><p>对应于 <code>django.forms.fields.FileField</code>.</p><p><strong>签名：</strong> <code>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p><ul><li><code>max_length</code> - 指定文件名的最大长度。</li><li><code>allow_empty_file</code> - 指定是否允许空文件。</li><li><code>use_url</code> - 如果设置为 <code>True</code>，则 URL 字符串值将用于输出表示。如果设置为 <code>False</code>，则文件名字符串值将用于输出表示。默认为 <code>UPLOADED_FILES_USE_URL</code> settings key 的值，除非另有设置，否则为 <code>True</code>。</li></ul><h3 id="imagefield" tabindex="-1"><a class="header-anchor" href="#imagefield" aria-hidden="true">#</a> ImageField</h3><p>表示图片。验证上传的文件内容是否匹配已知的图片格式。</p><p>对应于 <code>django.forms.fields.ImageField</code>.</p><p><strong>签名：</strong> <code>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p><ul><li><code>max_length</code> - 指定文件名的最大长度。</li><li><code>allow_empty_file</code> - 指定是否允许空文件。</li><li><code>use_url</code> - 如果设置为 <code>True</code>，则 URL 字符串值将用于输出表示。如果设置为 <code>False</code>，则文件名字符串值将用于输出表示。默认为 <code>UPLOADED_FILES_USE_URL</code> settings key 的值，除非另有设置，否则为 <code>True</code>。</li></ul><p>需要 <code>Pillow</code> 库或 <code>PIL</code> 库。 建议使用 <code>Pillow</code> 库。 因为 <code>PIL</code> 已经不再维护。</p><h3 id="listfield" tabindex="-1"><a class="header-anchor" href="#listfield" aria-hidden="true">#</a> ListField</h3><p>验证对象列表的字段类。</p><p><strong>签名：</strong> <code>ListField(child=&lt;A_FIELD_INSTANCE&gt;, min_length=None, max_length=None)</code></p><ul><li><code>child</code> - 应该用于验证列表中的对象的字段实例。如果未提供此参数，则列表中的对象将不会被验证。</li><li><code>min_length</code> - 验证列表中包含的元素数量不少于这个数。</li><li><code>max_length</code> - 验证列表中包含的元素数量不超过这个数。</li></ul><p>例如，要验证整数列表：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">(</span>
   child<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_value<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ListField 类还支持一种声明式风格，允许编写可重用的列表字段类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">StringListField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    child <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以在我们的应用程序中重新使用我们自定义的 <code>StringListField</code> 类，而无需为其提供 <code>child</code> 参数。</p><h3 id="dictfield" tabindex="-1"><a class="header-anchor" href="#dictfield" aria-hidden="true">#</a> DictField</h3><p>验证对象字典的字段类。<code>DictField</code> 中的键总是被假定为字符串值。</p><p><strong>签名：</strong> <code>DictField(child=&lt;A_FIELD_INSTANCE&gt;)</code></p><ul><li><code>child</code> - 应该用于验证字典中的值的字段实例。如果未提供此参数，则映射中的值将不会被验证。</li></ul><p>例如，要创建一个验证字符串到字符串映射的字段，可以这样写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>document <span class="token operator">=</span> DictField<span class="token punctuation">(</span>child<span class="token operator">=</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以像使用 <code>ListField</code> 一样使用声明式风格。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DocumentField</span><span class="token punctuation">(</span>DictField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    child <span class="token operator">=</span> CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hstorefield" tabindex="-1"><a class="header-anchor" href="#hstorefield" aria-hidden="true">#</a> HStoreField</h3><p><code>DictField</code> 与 Django 的 <code>postgres</code> 兼容的预配置字典类型。</p><ul><li><code>child</code>：用于验证字典中值的字段实例, 默认的子字段接受空字符串和空值</li><li><code>allow_empty</code>：指定是否允许空字典</li></ul><h3 id="jsonfield" tabindex="-1"><a class="header-anchor" href="#jsonfield" aria-hidden="true">#</a> JSONField</h3><p>验证传入的数据结构由有效 JSON 基元组成的字段类。在其二进制模式下，它将表示并验证 JSON 编码的二进制字符串。</p><p><strong>签名：</strong> <code>JSONField(binary)</code></p><ul><li><code>binary</code> - 如果设置为 <code>True</code>，那么该字段将输出并验证 JSON 编码的字符串，而不是原始数据结构。默认是 <code>False</code>.</li><li><code>encoder</code>：使用此 JSON 编码器序列化输入对象</li></ul><h3 id="readonlyfield" tabindex="-1"><a class="header-anchor" href="#readonlyfield" aria-hidden="true">#</a> ReadOnlyField</h3><p>只是简单地返回字段的值而不进行修改的字段类。</p><p>当包含与属性相关的字段名而不是模型字段时，此字段默认与 <code>ModelSerializer</code> 一起使用。</p><p><strong>签名：</strong> <code>ReadOnlyField()</code></p><p>例如，如果 <code>has_expired</code> 是 <code>Account</code> 模型中的一个属性，则以下序列化程序会自动将其生成为 <code>ReadOnlyField</code> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;has_expired&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hiddenfield" tabindex="-1"><a class="header-anchor" href="#hiddenfield" aria-hidden="true">#</a> HiddenField</h3><p>不根据用户输入获取值的字段类，而是从默认值或可调用值中获取值。</p><p><strong>签名：</strong> <code>HiddenField()</code></p><p>例如，要包含始终提供当前时间的字段作为序列化类验证数据的一部分，则可以使用以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>modified <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HiddenField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要根据某些预先提供的字段值运行某些验证，则通常只需要 <code>HiddenField</code> 类，而不是将所有这些字段公开给最终用户。</p><h3 id="modelfield" tabindex="-1"><a class="header-anchor" href="#modelfield" aria-hidden="true">#</a> ModelField</h3><p><code>可以绑定到任意模型字段的通用字段</code>。<code>ModelField</code> 类将序列化/反序列化的任务委托给其关联的模型字段。该字段可用于为自定义模型字段创建序列化字段，而无需创建新的自定义序列化字段。</p><p><code>ModelSerializer</code> 使用此字段来对应自定义模型字段类。</p><p><strong>签名：</strong> <code>ModelField(model_field=&lt;Django ModelField instance&gt;)</code></p><p><code>ModelField</code> 类通常用于内部使用，但如果需要，可以由 API 使用。为了正确实例化 <code>ModelField</code>，必须传递一个附加到实例化模型的字段。例如：<code>ModelField(model_field=MyModel()._meta.get_field(&#39;custom_field&#39;))</code></p><h3 id="serializermethodfield" tabindex="-1"><a class="header-anchor" href="#serializermethodfield" aria-hidden="true">#</a> SerializerMethodField</h3><p>这是一个只读字段。它通过调用它所连接的序列化类的方法来获得它的值。它可用于将任何类型的数据添加到对象的序列化表示中。</p><p><strong>签名：</strong> <code>SerializerMethodField(method_name=None)</code></p><ul><li><code>method_name</code> - 要调用序列化对象的方法的名称。如果不包含，则默认为 <code>get_&lt;field_name&gt;</code>.</li></ul><p>由 <code>method_name</code> 参数引用的序列化方法应该接受一个参数（除了 <code>self</code>），这是要序列化的对象。它应该返回你想要包含在对象的序列化表示中的任何内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers

<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    days_since_joined <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User

    <span class="token keyword">def</span> <span class="token function">get_days_since_joined</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> obj<span class="token punctuation">.</span>date_joined<span class="token punctuation">)</span><span class="token punctuation">.</span>days
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),ta={id:"自定义字段",tabindex:"-1"},ia=n("a",{class:"header-anchor",href:"#自定义字段","aria-hidden":"true"},"#",-1),la={href:"http://drf.jiuyou.info/#/drf/fields?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5",title:"自定义字段",target:"_blank",rel:"noopener noreferrer"},pa=o("<p>如果你想创建自定义字段，则需要对 <code>Field</code> 进行子类化，然后重写 <code>.to_representation()</code> 和 <code>.to_internal_value()</code> 方法中的一个或两个。这两个方法用于在初始数据类型和基本序列化数据类型之间进行转换。基本数据类型通常是 number，string， boolean， <code>date</code>/<code>time</code>/<code>datetime</code> 或 <code>None</code> 。它们也可以是任何仅包含其他基本对象的列表或字典。其他类型可能会支持，但具体取决于你使用的渲染器。</p><p>调用 <code>.to_representation()</code> 方法将初始数据类型转换为基本的可序列化数据类型。</p><p>调用 <code>to_internal_value()</code> 方法将基本数据类型恢复为其内部 python 表示形式。如果数据无效，此方法应该引发 <code>serializers.ValidationError</code> 异常。</p><p>请注意，2.x 版本中存在的 <code>WritableField</code> 类不再存在。 应此，如果字段需要支持数据输入，则应该继承 <code>Field</code> 并覆盖 <code>to_internal_value()</code>。</p>",4),ca={id:"看几个栗子",tabindex:"-1"},da=n("a",{class:"header-anchor",href:"#看几个栗子","aria-hidden":"true"},"#",-1),ra={href:"http://drf.jiuyou.info/#/drf/fields?id=%E7%9C%8B%E5%87%A0%E4%B8%AA%E6%A0%97%E5%AD%90",title:"看几个栗子",target:"_blank",rel:"noopener noreferrer"},ua={id:"基本的自定义字段",tabindex:"-1"},ka=n("a",{class:"header-anchor",href:"#基本的自定义字段","aria-hidden":"true"},"#",-1),ha={href:"http://drf.jiuyou.info/#/drf/fields?id=%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5",title:"基本的自定义字段",target:"_blank",rel:"noopener noreferrer"},_a=o(`<p>我们来看一个序列化代表 RGB 颜色值的类的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A color represented in the RGB colorspace.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> green <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> blue <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> green <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> blue <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>red<span class="token punctuation">,</span> self<span class="token punctuation">.</span>green<span class="token punctuation">,</span> self<span class="token punctuation">.</span>blue <span class="token operator">=</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue

<span class="token keyword">class</span> <span class="token class-name">ColorField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Color objects are serialized into &#39;rgb(#, #, #)&#39; notation.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;rgb(%d, %d, %d)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>red<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>green<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>blue<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
        red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，字段值被视为映射到对象的属性。如果需要自定义字段值的访问方式，则需要覆盖 <code>.get_attribute()</code> 和/或 <code>.get_value()</code>。</p><p>让我们创建一个可以用来表示被序列化对象的类名的字段：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassNameField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># We pass the object instance onto \`to_representation\`,</span>
        <span class="token comment"># not just the field attribute.</span>
        <span class="token keyword">return</span> obj

    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Serialize the object&#39;s class name.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ma={id:"抛出验证错误",tabindex:"-1"},fa=n("a",{class:"header-anchor",href:"#抛出验证错误","aria-hidden":"true"},"#",-1),va={href:"http://drf.jiuyou.info/#/drf/fields?id=%E6%8A%9B%E5%87%BA%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF",title:"抛出验证错误",target:"_blank",rel:"noopener noreferrer"},ga=o(`<p>我们上面的 <code>ColorField</code> 类目前不执行任何数据验证。为了表示无效数据，我们应该引发一个 <code>serializers.ValidationError</code>，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> six<span class="token punctuation">.</span>text_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        msg <span class="token operator">=</span> <span class="token string">&#39;Incorrect type. Expected a string, but got %s&#39;</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span>msg <span class="token operator">%</span> <span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.fail()</code> 方法是引发 <code>ValidationError</code> 的快捷方式，它从 <code>error_messages</code> 字典中接收消息字符串。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>default_error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect type. Expected a string, but got {input_type}&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> six<span class="token punctuation">.</span>text_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">,</span> input_type<span class="token operator">=</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这种风格让你的错误信息更清晰，并且与代码分离，应该是首选。</p></blockquote>`,5),ba={id:"使用-source",tabindex:"-1"},Fa=n("a",{class:"header-anchor",href:"#使用-source","aria-hidden":"true"},"#",-1),ya={href:"http://drf.jiuyou.info/#/drf/fields?id=%E4%BD%BF%E7%94%A8-source3939",title:"使用 ",target:"_blank",rel:"noopener noreferrer"},Ea={href:"http://drf.jiuyou.info/#/drf/fields?id=%E4%BD%BF%E7%94%A8-source3939",title:"source='*'",target:"_blank",rel:"noopener noreferrer"},wa=o(`<p>这里我们将举一个具有 <code>x_coordinate</code> 和 <code>y_coordinate</code> 属性的平面 <code>DataPoint</code> 模型的示例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DataPoint</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    label <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
    x_coordinate <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    y_coordinate <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义字段和 <code>source =&#39;*&#39;</code>，我们可以提供坐标对的嵌套表示形式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CoordinateField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>x_coordinate<span class="token punctuation">,</span>
            <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>y_coordinate
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret

    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;x_coordinate&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;y_coordinate&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret


<span class="token keyword">class</span> <span class="token class-name">DataPointSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    coordinates <span class="token operator">=</span> CoordinateField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> DataPoint
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，此示例不处理验证。使用 <code>source =&#39;*&#39;</code> 的嵌套序列化类可以更好地处理坐标嵌套，并且带有两个 <code>IntegerField</code> 实例，每个实例都有自己的 <code>source</code> 指向相关字段。</p><p>然而，这个例子的关键点是：</p><ul><li><code>to_representation</code> 传递整个 <code>DataPoint</code> 对象， 并且会映射到所需的输出。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> instance <span class="token operator">=</span> DataPoint<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">,</span> x_coordinate<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y_coordinate<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer<span class="token punctuation">.</span>data
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除非我们的字段是只读的，否则 <code>to_internal_value</code> 必须映射回适合更新目标对象的字典。使用 <code>source=&#39;*&#39;</code> ，<code>to_internal_value</code> 的返回将更新根验证的数据字典，而不是单个键。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Second Example&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;coordinates&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>validated_data
OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Second Example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了完整性，我们再次做同样的事情，但是使用上面建议的嵌套序列化方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">NestedCoordinateSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">DataPointSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    coordinates <span class="token operator">=</span> NestedCoordinateSerializer<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> DataPoint
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们在 <code>IntegerField</code> 声明中处理目标和源属性对（<code>x</code> 和 <code>x_coordinate</code>，<code>y</code> 和 <code>y_coordinate</code> ）之间的映射。这是使用了 <code>source =&#39;*&#39;</code> 的 <code>NestedCoordinateSerializer</code> 。</p><p>新的 <code>DataPointSerializer</code> 展现出与自定义字段方法相同的行为。</p><p>序列化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer<span class="token punctuation">.</span>data
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;testing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>validated_data
OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;still testing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然没有编写验证，但是可以使用内置的验证方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_data <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;still testing&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;coordinates&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>invalid_data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer<span class="token punctuation">.</span>errors
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span>
             <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A valid integer is required.&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A valid integer is required.&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于这个原因，可以首先尝试嵌套序列化类方法。当嵌套序列化类变得不可行或过于复杂时，可以使用自定义字段方法。</p>`,21);function xa(Aa,Da){const s=i("ExternalLinkIcon");return l(),p("div",null,[d,n("blockquote",null,[n("p",null,[n("a",r,[a("官方原文链接"),e(s)])])]),n("h1",u,[k,a(),n("a",h,[a("Serializer 字段"),e(s)])]),n("blockquote",null,[n("p",null,[a("Form 类中的每个字段不仅负责验证数据，还负责 “清洗” 它 — 将其规范化为一致的格式。"),_,a(" — "),n("a",m,[a("Django 文档"),e(s)])])]),f,n("h2",v,[g,a(),n("a",b,[a("核心参数"),e(s)])]),F,n("h3",y,[E,a(),n("a",w,[a("read_only"),e(s)])]),x,A,D,n("h3",B,[T,a(),n("a",j,[a("write_only"),e(s)])]),z,C,n("h3",q,[S,a(),n("a",I,[a("required"),e(s)])]),N,M,P,n("h3",R,[L,a(),n("a",U,[a("allow_null"),e(s)])]),O,n("h3",H,[V,a(),n("a",J,[a("default"),e(s)])]),G,n("h3",Z,[W,a(),n("a",$,[a("source"),e(s)])]),K,Q,X,n("h3",Y,[nn,a(),n("a",an,[a("validators"),e(s)])]),sn,n("h3",en,[on,a(),n("a",tn,[a("error_messages"),e(s)])]),ln,n("h3",pn,[cn,a(),n("a",dn,[a("label"),e(s)])]),rn,n("h3",un,[kn,a(),n("a",hn,[a("help_text"),e(s)])]),_n,n("h3",mn,[fn,a(),n("a",vn,[a("initial"),e(s)])]),gn,n("h3",bn,[Fn,a(),n("a",yn,[a("style"),e(s)])]),En,n("h3",wn,[xn,a(),n("a",An,[a("IntegerField"),e(s)])]),Dn,n("ul",null,[Bn,n("li",null,[Tn,a(" 设置量化到配置精度时使用的舍入模式。 有效值是 "),jn,a(" 模块舍入模式。默认为 "),zn,a("。 "),n("h4",Cn,[qn,a(),n("a",Sn,[a("用法示例"),e(s)])])])]),In,n("h4",Nn,[Mn,a(),n("a",Pn,[a("DateTimeField"),e(s)]),n("a",Rn,[a(" 格式化字符串。"),e(s)])]),Ln,Un,n("h4",On,[Hn,a(),n("a",Vn,[a("auto_now"),e(s)]),n("a",Jn,[a(" 和 "),e(s)]),n("a",Gn,[a("auto_now_add"),e(s)]),n("a",Zn,[a(" 模型字段。"),e(s)])]),Wn,n("h4",$n,[Kn,a(),n("a",Qn,[a("DateField"),e(s)]),n("a",Xn,[a(" 格式化字符串"),e(s)])]),Yn,n("h4",na,[aa,a(),n("a",sa,[a("TimeField"),e(s)]),n("a",ea,[a(" 格式化字符串"),e(s)])]),oa,n("h1",ta,[ia,a(),n("a",la,[a("自定义字段"),e(s)])]),pa,n("h2",ca,[da,a(),n("a",ra,[a("看几个栗子"),e(s)])]),n("h3",ua,[ka,a(),n("a",ha,[a("基本的自定义字段"),e(s)])]),_a,n("h3",ma,[fa,a(),n("a",va,[a("抛出验证错误"),e(s)])]),ga,n("h3",ba,[Fa,a(),n("a",ya,[a("使用 "),e(s)]),n("a",Ea,[a("source=' *'"),e(s)])]),wa])}const ja=t(c,[["render",xa],["__file","Rest-framework专栏讲解(十二)：Serializer fields.html.vue"]]);export{ja as default};
