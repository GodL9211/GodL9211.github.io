import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-265d3719.js";const t={},e=p(`<h2 id="_10大经典排序" tabindex="-1"><a class="header-anchor" href="#_10大经典排序" aria-hidden="true">#</a> 10大经典排序</h2><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h3><p>冒泡排序是一种简单的排序算法，它重复地遍历待排序的元素列表，比较相邻的元素，并在必要时交换它们，使较大（或较小）的元素逐渐“浮”到列表的顶部（或底部）。</p><p>算法原理：</p><ul><li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></li></ul><p>以下是用 Python 实现冒泡排序的示例代码：</p><p><code>demo1</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">Bubble_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">return</span> arr

arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
result <span class="token operator">=</span> Bubble_Sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result list: &#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token comment"># result list: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>demo2</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 最后 i 个元素已经排序好，无需再考虑</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 通过相邻元素比较，如果顺序错误则交换</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>

<span class="token comment"># 测试</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原始数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    bubble_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，<code>bubble_sort</code> 函数接受一个列表 <code>arr</code> 作为输入，并在原地对其进行排序。外部的循环 <code>for i in range(n)</code> 控制了比较和交换的轮数，<code>n</code> 是列表的长度。内部的循环 <code>for j in range(0, n-i-1)</code> 则用来在未排序部分进行相邻元素比较和交换。如果发现当前元素大于后一个元素，就交换它们的位置，以实现逐步将较大的元素“冒泡”到列表的末尾。</p><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h3><p>快速排序是一种高效的排序算法，它采用分治的思想，将一个大问题拆分成更小的子问题来解决。</p><p>算法原理：</p><ul><li><p>首先设定一个分界值，通过该分界值将数组分成左右两部分。</p></li><li><p>将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。</p></li><li><p>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p></li><li><p>重复上述过程，直到左、右两个部分各数据排序完成。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> arr  <span class="token comment"># 基本情况：如果数组为空或只有一个元素，直接返回</span>

    pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 选择中间元素作为基准</span>
    left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>  <span class="token comment"># 比基准小的元素放在左边</span>
    middle <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">==</span> pivot<span class="token punctuation">]</span>  <span class="token comment"># 与基准相等的元素放在中间</span>
    right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr <span class="token keyword">if</span> x <span class="token operator">&gt;</span> pivot<span class="token punctuation">]</span>  <span class="token comment"># 比基准大的元素放在右边</span>

    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span>  <span class="token comment"># 递归地排序左、右子数组并合并</span>

<span class="token comment"># 测试</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
result <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result list:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token comment"># result list: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，quick_sort 函数使用了递归来实现快速排序。它首先选择一个基准元素（这里选择中间元素），然后将数组分成三个部分：小于基准、等于基准和大于基准的元素。接着，递归地对左边和右边的子数组进行排序，并将它们和基准相等的元素合并在一起。</p><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h3><p>选择排序是一种简单的排序算法，它的思想是：<code>每次从未排序的部分选出最小（或最大）的元素，然后将其放到已排序部分的末尾</code>。</p><p>算法原理：</p><ul><li><p>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p></li><li><p>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p></li><li><p>以此类推，直到所有元素均排序完毕。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        min_index <span class="token operator">=</span> i  <span class="token comment"># 假设当前索引对应的元素为最小</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_index <span class="token operator">=</span> j  <span class="token comment"># 找到更小的元素，更新最小索引</span>
        
        <span class="token comment"># 将找到的最小元素与当前位置交换</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

<span class="token comment"># 测试</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
selection_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Sorted array:&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token comment"># Sorted array: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，selection_sort 函数用于实现选择排序。它首先遍历整个数组，通过不断寻找未排序部分中的最小元素，将其与未排序部分的起始位置交换，从而逐渐形成已排序的部分。</p><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h3><p>插入排序是一种简单的排序算法，它的思想是：将数组分为已排序部分和未排序部分，逐个将未排序部分的元素插入到已排序部分的合适位置。</p><p>算法原理：</p><ul><li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p></li><li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 当前要插入的元素</span>
        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 已排序部分的最后一个索引</span>

        <span class="token comment"># 将大于 key 的元素向后移动，为 key 腾出插入位置</span>
        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> key <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        
        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key  <span class="token comment"># 插入 key 到合适位置</span>

<span class="token comment"># 测试</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
insertion_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Sorted array:&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token comment"># Sorted array: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，insertion_sort 函数用于实现插入排序。它从索引1开始遍历数组，将当前要插入的元素不断与已排序部分的元素进行比较，将大于当前元素的元素向后移动，直到找到合适的插入位置。</p><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h3><p>堆排序（Heap sort）：是指利用<code>堆</code>这种数据结构所设计的一种排序算法，堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。</p><p>算法原理：</p><ul><li><p>创建一个堆 H[0……n-1]；</p></li><li><p>把堆首（最大值）和堆尾互换；</p></li><li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p></li><li><p>重复步骤 2，直到堆的尺寸为 1。</p></li></ul><p><code>大根堆（Max Heap）排序</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    largest <span class="token operator">=</span> i  <span class="token comment"># 初始化最大元素的索引</span>
    left_child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>
    right_child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>

    <span class="token comment"># 找到左子节点和右子节点中较大的元素的索引</span>
    <span class="token keyword">if</span> left_child <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>left_child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> left_child
    <span class="token keyword">if</span> right_child <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>right_child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> right_child
    
    <span class="token comment"># 如果最大元素不是当前节点，则进行交换，并递归地堆化子树</span>
    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

    <span class="token comment"># 构建大根堆，从最后一个非叶子节点开始向上堆化</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

    <span class="token comment"># 从堆顶不断取出最大元素，并进行堆化</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 将当前最大元素放到已排序部分</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 对剩余的部分重新进行堆化</span>

<span class="token comment"># 测试</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
heap_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Sorted array using heap sort:&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token comment"># Sorted array using heap sort: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，heapify 函数用于将数组中的某个子树调整为大根堆。heap_sort 函数首先构建一个大根堆，然后逐步将堆顶的最大元素移动到已排序部分，并重新进行堆化操作，从而实现排序。</p><p><code>小根堆（Min Heap）排序</code></p><p>当我们使用堆排序时，无论是小根堆还是大根堆，实际上是将树的顺序性质用于排序。在小根堆中，每个父节点的值都小于或等于其子节点的值。</p><p>以下是一个使用小根堆实现的堆排序版本：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    smallest <span class="token operator">=</span> i  <span class="token comment"># 初始化最小元素的索引</span>
    left_child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>
    right_child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>

    <span class="token comment"># 找到左子节点和右子节点中较小的元素的索引</span>
    <span class="token keyword">if</span> left_child <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>left_child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        smallest <span class="token operator">=</span> left_child
    <span class="token keyword">if</span> right_child <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>right_child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        smallest <span class="token operator">=</span> right_child
    
    <span class="token comment"># 如果最小元素不是当前节点，则进行交换，并递归地堆化子树</span>
    <span class="token keyword">if</span> smallest <span class="token operator">!=</span> i<span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> smallest<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

    <span class="token comment"># 构建小根堆，从最后一个非叶子节点开始向上堆化</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

    <span class="token comment"># 从堆顶不断取出最小元素，并进行堆化</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 将当前最小元素放到已排序部分</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 对剩余的部分重新进行堆化</span>

<span class="token comment"># 测试</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
heap_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Sorted array using heap sort with min heap:&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token comment"># Sorted array using heap sort with min heap: [5, 22, 29, 34, 41, 57, 62, 63, 66, 94]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例与之前的大根堆版本相似，唯一的区别是在 <code>heapify</code> 函数中比较节点的大小，选择较小的子节点进行交换。同样地，<code>heap_sort</code> 函数构建小根堆并进行排序。这个实现利用堆的性质，在O(n log n)时间内实现了排序。</p><h3 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h3><p>希尔排序是一种插入排序的改进版本，它通过将数组分成多个子序列进行排序，逐渐减小子序列的间隔，最终使整个数组变得几乎有序。</p><p>算法原理：</p><ul><li><p>取一个小于n的整数gap(gap被称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中</p></li><li><p>对各组内的元素进行直接插入排序， 这一趟排序完成之后，每一个组的元素都是有序的</p></li><li><p>减小gap的值，并重复执行上述的分组和排序</p></li><li><p>重复上述操作，当gap=1时，排序结束</p></li></ul><p>下面是一个简单的用Python实现的希尔排序示例，我会尽量用简单的语言解释每一步的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    gap <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># 初始化间隔，开始时为数组长度的一半</span>
    
    <span class="token keyword">while</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 当前要插入的元素</span>
            j <span class="token operator">=</span> i
            
            <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> gap <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span>  <span class="token comment"># 向后移动元素</span>
                j <span class="token operator">-=</span> gap
            
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token comment"># 插入当前元素到正确位置</span>
        
        gap <span class="token operator">//=</span> <span class="token number">2</span>  <span class="token comment"># 缩小间隔</span>

<span class="token comment"># 示例</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
shell_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>

<span class="token comment"># 原数组: [12, 34, 54, 2, 3]</span>
<span class="token comment"># 排序后: [2, 3, 12, 34, 54]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单解释一下代码：</p><ol><li><code>shell_sort</code> 函数接受一个列表 <code>arr</code> 作为输入。</li><li>首先，获取数组的长度 <code>n</code>，然后初始化一个间隔 <code>gap</code>，开始时设为数组长度的一半。</li><li>进入主循环，当间隔大于0时，执行排序操作。</li><li>在排序循环中，从 <code>gap</code> 开始遍历到数组末尾，每次取出一个元素作为当前要插入的元素。</li><li>使用内部循环，将当前元素与距离 <code>gap</code> 位置前面的元素进行比较，如果前面的元素较大，则将它后移 <code>gap</code> 个位置。</li><li>重复步骤5，直到找到合适的位置插入当前元素。</li><li>将当前元素插入到正确位置后，进入外部循环的下一个迭代。</li><li>将间隔 <code>gap</code> 缩小一半，继续进行下一轮排序，直到最终间隔变为1，完成排序。</li></ol><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h3><p>归并排序是一种经典的排序算法，它通过将数组分成两部分，分别对这两部分进行排序，然后将排序好的两部分合并成一个有序的数组。</p><p>算法原理：</p><ul><li><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p></li><li><p>设定两个索引，最初索引位置分别为两个已经排序序列的起始位置</p></li><li><p>比较两个索引所指向的元素，选择相对小的元素放入到合并空间，并移动索引到下一位置</p></li><li><p>重复上一步骤直到某一索引超出序列尾</p></li><li><p>将另一序列剩下的所有元素直接复制到合并序列尾</p></li></ul><p>下面是一个简单的用Python实现的归并排序示例，我会尽量用简单的语言解释每一步的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> arr
    
    <span class="token comment"># 分解：将数组分成两半</span>
    middle <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    left_half <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>middle<span class="token punctuation">]</span>
    right_half <span class="token operator">=</span> arr<span class="token punctuation">[</span>middle<span class="token punctuation">:</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 递归地对左右两半进行排序</span>
    left_sorted <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>left_half<span class="token punctuation">)</span>
    right_sorted <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>right_half<span class="token punctuation">)</span>
    
    <span class="token comment"># 合并：将排好序的左右两半合并成一个有序数组</span>
    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left_sorted<span class="token punctuation">,</span> right_sorted<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    left_index<span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    
    <span class="token keyword">while</span> left_index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> right_index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left<span class="token punctuation">[</span>left_index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>right_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>left_index<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left_index <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>right_index<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right_index <span class="token operator">+=</span> <span class="token number">1</span>
    
    result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>left<span class="token punctuation">[</span>left_index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>right<span class="token punctuation">[</span>right_index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> result

<span class="token comment"># 示例</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
sorted_arr <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后:&quot;</span><span class="token punctuation">,</span> sorted_arr<span class="token punctuation">)</span>

<span class="token comment"># 原数组: [12, 34, 54, 2, 3]</span>
<span class="token comment"># 排序后: [2, 3, 12, 34, 54]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单解释一下代码：</p><ol><li><code>merge_sort</code> 函数接受一个列表 <code>arr</code> 作为输入。</li><li>如果数组长度小于等于1，直接返回该数组，因为长度为1的数组已经是有序的。</li><li>分解阶段：找到数组中间位置，将数组分成左右两半。</li><li>递归地对左右两半分别调用 <code>merge_sort</code> 函数，将它们分别排序得到 <code>left_sorted</code> 和 <code>right_sorted</code>。</li><li>合并阶段：调用 <code>merge</code> 函数，将排好序的左右两半数组合并成一个有序数组。</li><li><code>merge</code> 函数接受两个已排序的数组 <code>left</code> 和 <code>right</code>，创建一个新的空数组 <code>result</code> 来存放合并结果。</li><li>使用两个索引 <code>left_index</code> 和 <code>right_index</code> 分别追踪左右两个数组的当前位置。</li><li>在循环中，比较左右两边当前位置的元素，将较小的元素添加到 <code>result</code> 数组，并将相应索引向后移动。</li><li>如果其中一个数组的元素都已经添加完毕，将另一个数组的剩余部分直接添加到 <code>result</code> 中。</li><li>返回合并后的有序数组。</li></ol><h3 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序" aria-hidden="true">#</a> 计数排序</h3><p>计数排序是一种线性时间复杂度的排序算法，适用于排序范围不大的整数数组。它通过统计每个元素出现的次数，然后按照统计信息重新构建有序数组，是一个非基于比较的排序算法，它的优势在于在对一定范围内的整数排序时，它的复杂度为Ο(n+k)（其中k是整数的范围），快于任何比较排序算法。</p><p>算法原理：</p><ul><li><p>找出待排序的数组中最大和最小的元素</p></li><li><p>统计数组中每个值为i的元素出现的次数，存入数组C的第i项</p></li><li><p>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</p></li><li><p>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</p></li></ul><p>下面是一个用Python实现的计数排序示例，我会尽量用简单的语言解释每一步的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 找到数组中的最大值和最小值</span>
    max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    min_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    
    <span class="token comment"># 创建一个计数数组，用于统计每个元素出现的次数</span>
    count_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_value <span class="token operator">-</span> min_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 统计每个元素出现的次数</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
        count_array<span class="token punctuation">[</span>num <span class="token operator">-</span> min_value<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token comment"># 根据计数数组重构有序数组</span>
    sorted_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> count <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>count_array<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sorted_array<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token operator">+</span> min_value<span class="token punctuation">]</span> <span class="token operator">*</span> count<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> sorted_array

<span class="token comment"># 示例</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
sorted_arr <span class="token operator">=</span> counting_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后:&quot;</span><span class="token punctuation">,</span> sorted_arr<span class="token punctuation">)</span>

<span class="token comment"># 原数组: [12, 34, 54, 2, 3, 34, 12]</span>
<span class="token comment"># 排序后: [2, 3, 12, 12, 34, 34, 54]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单解释一下代码：</p><ol><li><code>counting_sort</code> 函数接受一个列表 <code>arr</code> 作为输入。</li><li>首先，找到数组中的最大值和最小值，这样我们就可以确定计数数组的大小。</li><li>创建一个长度为 <code>(max_value - min_value + 1)</code> 的计数数组 <code>count_array</code>，初始化所有计数为0。</li><li>遍历原始数组 <code>arr</code>，将每个元素减去最小值，得到的值作为索引，在计数数组中相应位置增加计数。</li><li>统计每个元素出现的次数后，创建一个空数组 <code>sorted_array</code> 用于存放排序后的结果。</li><li>遍历计数数组，根据计数信息，将元素值（加上最小值）按照计数的次数添加到 <code>sorted_array</code> 中。</li><li>返回排序后的有序数组。</li></ol><h3 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序" aria-hidden="true">#</a> 基数排序</h3><p>基数排序是一种非比较的排序算法，它根据元素的每个位上的数字进行排序。其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>算法原理（以LSD为例）：</p><ul><li><p>根据个位数的数值，遍历列表将它们分配至编号0到9的桶子中</p></li><li><p>将这些桶子中的数值重新串接起来</p></li><li><p>根据十位数的数值，遍历列表将它们分配至编号0到9的桶子中</p></li><li><p>再将这些桶子中的数值重新串接起来</p></li></ul><p>下面是一个用Python实现的基数排序示例，我会尽量用简单的语言解释每一步的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 找到数组中的最大值，以确定最大数字有多少位</span>
    max_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    max_digits <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>max_num<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_digits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr <span class="token operator">=</span> counting_sort_by_digit<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> digit<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> arr

<span class="token keyword">def</span> <span class="token function">counting_sort_by_digit</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    count_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span>
    output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> num <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
        <span class="token comment"># 获取当前位上的数字</span>
        digit_value <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> digit<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>
        count_array<span class="token punctuation">[</span>digit_value<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        count_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count_array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    
    i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        digit_value <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> digit<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>
        output<span class="token punctuation">[</span>count_array<span class="token punctuation">[</span>digit_value<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        count_array<span class="token punctuation">[</span>digit_value<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
        i <span class="token operator">-=</span> <span class="token number">1</span>
    
    <span class="token keyword">return</span> output

<span class="token comment"># 示例</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">802</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
sorted_arr <span class="token operator">=</span> radix_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后:&quot;</span><span class="token punctuation">,</span> sorted_arr<span class="token punctuation">)</span>

<span class="token comment"># 原数组: [170, 45, 75, 90, 802, 24, 2, 66]</span>
<span class="token comment"># 排序后: [2, 24, 45, 66, 75, 90, 170, 802]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单解释一下代码：</p><ol><li><code>radix_sort</code> 函数接受一个列表 <code>arr</code> 作为输入。</li><li>首先，找到数组中的最大值，以确定最大数字有多少位。</li><li>循环遍历每一位（从低位到高位），调用 <code>counting_sort_by_digit</code> 函数对当前位进行排序。</li><li><code>counting_sort_by_digit</code> 函数接受一个数组 <code>arr</code> 和一个表示当前位的数字 <code>digit</code> 作为输入。</li><li>创建一个计数数组 <code>count_array</code> 和一个用于存放排序结果的数组 <code>output</code>。</li><li>遍历原始数组 <code>arr</code>，获取每个元素在当前位上的数字，然后在计数数组中相应位置增加计数。</li><li>对计数数组进行累加，以确定每个数字在排序结果中的位置。</li><li>从原始数组的末尾开始遍历，根据当前位上的数字将元素放入输出数组的正确位置，并更新计数数组。</li><li>返回排好序的结果数组。</li></ol><h3 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序" aria-hidden="true">#</a> 桶排序</h3><p>桶排序是一种排序算法，它将输入数据分散到不同的桶（区间），然后对每个桶内的数据进行排序，最后将桶中的数据按顺序合并起来，桶排序可以看作是计数排序的扩展。</p><p>算法原理：</p><ul><li><p>计算有限桶的数量</p></li><li><p>逐个桶内部排序</p></li><li><p>遍历每个桶，进行合并</p></li></ul><p>下面是用Python实现的桶排序示例，我会尽量用简单的语言解释每一步的操作。</p><p><code>demo1</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 确定桶的数量，这里假设桶的数量与输入数组长度相同</span>
    num_buckets <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    
    <span class="token comment"># 创建桶，每个桶是一个空列表</span>
    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_buckets<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 将数据分配到不同的桶中</span>
    max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
        index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> num_buckets<span class="token punctuation">)</span>
        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    
    <span class="token comment"># 对每个桶内部进行排序</span>
    <span class="token keyword">for</span> bucket <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
        bucket<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 将排序好的桶按顺序合并</span>
    sorted_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> bucket <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
        sorted_array<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> sorted_array

<span class="token comment"># 示例</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.897</span><span class="token punctuation">,</span> <span class="token number">0.565</span><span class="token punctuation">,</span> <span class="token number">0.656</span><span class="token punctuation">,</span> <span class="token number">0.1234</span><span class="token punctuation">,</span> <span class="token number">0.665</span><span class="token punctuation">,</span> <span class="token number">0.3434</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原数组:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
sorted_arr <span class="token operator">=</span> bucket_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后:&quot;</span><span class="token punctuation">,</span> sorted_arr<span class="token punctuation">)</span>

<span class="token comment"># 原数组: [0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434]</span>
<span class="token comment"># 排序后: [0.1234, 0.3434, 0.565, 0.656, 0.665, 0.897]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单解释一下代码：</p><ol><li><code>bucket_sort</code> 函数接受一个列表 <code>arr</code> 作为输入。</li><li>确定要使用的桶的数量，这里假设桶的数量与输入数组的长度相同。</li><li>创建一个由空列表组成的桶数组 <code>buckets</code>，每个桶将用于存放一定范围内的数据。</li><li>找到输入数组中的最大值，以便将数据分散到不同的桶中。</li><li>遍历输入数组，将每个元素根据其值的大小映射到对应的桶中： <ul><li>(num / (max_value + 1))：这部分将当前元素值归一化到0到1的范围内。这里加1是为了避免除以0，确保归一化后的值在0到1之间。</li><li><code>* num_buckets</code>：将归一化后的值乘以桶的数量 num_buckets，以便将其映射到桶的索引范围内。</li><li>int()：最后，将映射结果取整，得到最终的桶索引 index。</li></ul></li><li>遍历每个桶，对其中的数据进行排序（这里使用了Python的内置排序函数 <code>sort</code>）。</li><li>创建一个空数组 <code>sorted_array</code> 用于存放最终的排序结果。</li><li>遍历每个桶，依次将桶中的数据按顺序合并到 <code>sorted_array</code> 中。</li><li>返回合并后的有序数组。</li></ol><p><code>demo2</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">Bucket_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 将最大值的索引范围扩展1，以包含最大值</span>
    pre_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> num
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> data <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
        pre_lst<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 增加相应索引处的计数</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>pre_lst<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历 pre_lst</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pre_lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">return</span> result


arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span>
result <span class="token operator">=</span> Bucket_Sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result list:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是桶排序的实现，让我逐步解释它的执行过程：</p><ol><li><p>首先，定义桶排序函数 <code>Bucket_Sort(arr)</code>。</p></li><li><p>计算输入数组中的最大值，然后为了确保最大值本身也可以被排序，将最大值索引范围扩展1。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>num</code> 是桶的数量，从 0 到最大值的索引范围。</p></li><li><p>创建一个长度为 <code>num</code> 的 <code>pre_lst</code> 列表，并将其初始化为全零。该列表将用于存储每个数值在输入数组中的出现次数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pre_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建一个空的 <code>result</code> 列表，用于存储最终排序结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>遍历输入数组，对每个数值的出现次数进行计数，将计数值存储在 <code>pre_lst</code> 的相应索引位置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> data <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
    pre_lst<span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个循环结束后，<code>pre_lst</code> 中的每个索引位置存储了相应数值在输入数组中的出现次数。</p></li><li><p>打印计数列表 <code>pre_lst</code>，以查看每个数值的出现次数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>pre_lst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用嵌套循环遍历 <code>pre_lst</code>，生成排序后的结果列表。外层循环从 0 到 <code>num-1</code> 遍历，内层循环根据 <code>pre_lst</code> 中的计数值将对应的数值添加到 <code>result</code> 列表中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pre_lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将根据计数值，将每个数值添加到 <code>result</code> 列表中。</p></li><li><p>返回排序后的结果列表 <code>result</code>。</p></li><li><p>定义输入数组 <code>arr</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用桶排序函数并传入输入数组，得到排序后的结果列表。</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>result <span class="token operator">=</span> Bucket_Sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="11"><li>打印排序后的结果列表。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result list:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段代码的核心思想是使用计数来对每个数值在输入数组中的出现次数进行统计，然后根据这些计数值生成排序后的结果列表。</p><blockquote><p>桶排序的核心思想是将数据分散到不同的桶中，然后对每个桶内的数据进行排序，最后按照桶的顺序合并得到有序数组。</p></blockquote>`,91),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","第01章_排序.html.vue"]]);export{k as default};
