import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,a as n,b as s,e,f as t}from"./app-9976b6d0.js";const l={},u=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是海鸽。今天我们来学习<code>python</code>发送请求的一个常用库<code>Requests</code> 。</p><p>虽然Python的标准库中 urllib 模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests 自称 “HTTP for Humans”，说明使用更简洁方便。</p><blockquote><p>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用：）</p></blockquote><p>Requests 继承了urllib的所有特性。Requests支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动确定响应内容的编码，支持国际化的 URL 和 POST 数据自动编码。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p>Requests的文档非常完备，中文文档也相当不错。Requests能完全满足当前网络的需求，而且能在PyPy下完美运行。</p>',7),r={href:"https://github.com/kennethreitz/requests",target:"_blank",rel:"noopener noreferrer"},d={href:"http://docs.python-requests.org/zh_CN/latest/index.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="安装方式" tabindex="-1"><a class="header-anchor" href="#安装方式" aria-hidden="true">#</a> 安装方式</h3><p>利用 pip 安装 或者利用 easy_install 都可以完成安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pip <span class="token function">install</span> requests

$ easy_install requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>requests</code> 是 Python 中一个非常流行的第三方 HTTP 库，它比内置的 <code>urllib</code> 库更易用、更简洁。以下是 <code>requests</code> 库的一些基本用法：</p><h3 id="发送-get-请求" tabindex="-1"><a class="header-anchor" href="#发送-get-请求" aria-hidden="true">#</a> 发送 GET 请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 也可以这么写</span>
<span class="token comment"># response = requests.request(&quot;get&quot;, &quot;http://www.baidu.com/&quot;)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 打印响应的文本内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;wd&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;海哥python&#39;</span><span class="token punctuation">}</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com/s?&quot;</span><span class="token punctuation">,</span> params<span class="token operator">=</span>kw<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

<span class="token comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

<span class="token comment"># 查看响应内容，response.content返回的字节流数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>

<span class="token comment"># 查看完整url地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

<span class="token comment"># 查看响应头部字符编码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>

<span class="token comment"># 查看响应码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用response.text 时，Requests 会基于 HTTP 响应的文本编码自动解码响应内容，大多数 Unicode 字符集都能被无缝地解码。</p></li><li><p>使用response.content 时，返回的是服务器响应数据的原始二进制字节流，可以用来保存图片等二进制文件。</p></li></ul><h3 id="发送-post-请求" tabindex="-1"><a class="header-anchor" href="#发送-post-请求" aria-hidden="true">#</a> 发送 POST 请求</h3><p>对于 POST 请求来说，我们一般需要为它增加一些参数。那么最基本的传参方法可以利用 data 这个参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;key2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送-json-数据" tabindex="-1"><a class="header-anchor" href="#发送-json-数据" aria-hidden="true">#</a> 发送 JSON 数据</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;key2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://example.com/api/data&#39;</span><span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印 JSON 响应内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理请求异常" tabindex="-1"><a class="header-anchor" href="#处理请求异常" aria-hidden="true">#</a> 处理请求异常</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用cookies" tabindex="-1"><a class="header-anchor" href="#使用cookies" aria-hidden="true">#</a> 使用Cookies</h3><p>如果一个响应中包含了cookie，那么我们可以利用 cookies参数拿到：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com/&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 7. 返回CookieJar对象:</span>
cookiejar <span class="token operator">=</span> response<span class="token punctuation">.</span>cookies

<span class="token comment"># 8. 将CookieJar转为字典：</span>
cookiedict <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>cookiejar<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>cookiejar<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>cookiedict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-sessions" tabindex="-1"><a class="header-anchor" href="#使用-sessions" aria-hidden="true">#</a> 使用 Sessions</h3><p>在 requests 里，session 对象是一个非常常用的对象，这个对象代表一次用户会话：从客户端浏览器连接服务器开始，到客户端浏览器与服务器断开。</p><p>会话能让我们在跨请求时候保持某些参数，比如在同一个 Session 实例发出的所有请求之间保持 cookie 。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

<span class="token comment"># 1. 创建session对象，可以保存Cookie值</span>
ssion <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 2. 处理 headers</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span><span class="token punctuation">}</span>

<span class="token comment"># 3. 需要登录的用户名和密码</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;mr_mao_hacker@163.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;alarmchime&quot;</span><span class="token punctuation">}</span>

<span class="token comment"># 4. 发送附带用户名和密码的请求，并获取登录后的Cookie值，保存在ssion里</span>
ssion<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&quot;http://www.renren.com/PLogin.do&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>

<span class="token comment"># 5. ssion包含用户登录后的Cookie值，可以直接访问那些登录后才可以访问的页面</span>
response <span class="token operator">=</span> ssion<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.renren.com/410043129/profile&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 6. 打印响应内容</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送文件" tabindex="-1"><a class="header-anchor" href="#发送文件" aria-hidden="true">#</a> 发送文件</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;report.xls&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://example.com/upload&#39;</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流式上传大型文件" tabindex="-1"><a class="header-anchor" href="#流式上传大型文件" aria-hidden="true">#</a> 流式上传大型文件</h3><p>如果你需要上传一个很大的文件，可以使用流式上传来避免一次性将整个文件加载到内存中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;large_file.zip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://example.com/upload&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用代理" tabindex="-1"><a class="header-anchor" href="#使用代理" aria-hidden="true">#</a> 使用代理</h3><p>如果需要使用代理，你可以通过为任意请求方法提供 proxies 参数来配置单个请求：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>proxies <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://10.10.1.10:3128&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;https&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://10.10.1.10:1080&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;mr_mao_hacker:sffqry9r@61.158.163.130:16816&quot;</span>  <span class="token comment"># 如果代理需要使用HTTP Basic Auth</span>
<span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理https请求-ssl证书验证" tabindex="-1"><a class="header-anchor" href="#处理https请求-ssl证书验证" aria-hidden="true">#</a> 处理HTTPS请求 SSL证书验证</h3><p>Requests也可以为HTTPS请求验证SSL证书：</p><ul><li>要想检查某个主机的SSL证书，你可以使用 verify 参数（也可以不写）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com/&quot;</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 也可以省略不写</span>
<span class="token comment"># response = requests.get(&quot;https://www.baidu.com/&quot;)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果SSL证书验证不通过，或者不信任服务器的安全证书，则会报出SSLError，据说 12306 证书是自己做的：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https://www.12306.cn/mormhweb/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> response<span class="token punctuation">.</span>text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>果然：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SSLError: <span class="token punctuation">(</span><span class="token string">&quot;bad handshake: Error([(&#39;SSL routines&#39;, &#39;ssl3_get_server_certificate&#39;, &#39;certificate verify failed&#39;)],)&quot;</span>,<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想跳过 12306 的证书验证，把 verify 设置为 False 就可以正常请求了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https://www.12306.cn/mormhweb/&quot;</span><span class="token punctuation">,</span> verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>requests</code> 库因其简洁的 API 和强大的功能而广受欢迎，它大大简化了 Python 中的 HTTP 请求处理。</p><blockquote><p>喜欢这篇文章的话，可以关注一下我的公众号『<strong>海哥python</strong>』</p></blockquote>`,43);function v(m,h){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("开源地址："),n("a",r,[s("https://github.com/kennethreitz/requests"),e(a)])]),n("p",null,[s("中文文档 API： "),n("a",d,[s("http://docs.python-requests.org/zh_CN/latest/index.html"),e(a)])]),k])}const q=p(l,[["render",v],["__file","5.Requests_让HTTP服务人类.html.vue"]]);export{q as default};
