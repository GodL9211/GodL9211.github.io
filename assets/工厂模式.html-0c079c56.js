import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,e,f as l}from"./app-ef3f8a6c.js";const i="/assets/工厂模式-0ec0f06f.png",u={},r=l('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>另外一个比较常用的创建型模式：工厂模式（Factory Design Pattern），用于创建和管理对象的实例化过程。它提供了一种灵活的方式来创建对象，使得代码更具可扩展性和可维护性。</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>一般情况下，工厂模式分为三种更加细分的类型：<code>简单工厂</code>、<code>工厂方法</code>和<code>抽象工厂</code>。</p></blockquote><ul><li><code>简单工厂模式</code>：允许接口创建对象，但不会暴露对象的创建逻辑。</li><li><code>工厂方法模式</code>：允许接口创建对象，但使用哪个类来创建对象，则是交由子类决定的。</li><li><code>抽象工厂模式</code>：抽象工厂是一个能够创建一系列相关的对象而无需指定/公开其具体类的接口。该模式能够提供其他工厂的对象，在其内部创建其他对象。</li></ul><p>在对象工厂模式中，工厂类负责实例化对象，并返回适当的对象实例给调用方。这样，调用方不需要直接依赖于具体的对象类，而是通过工厂类来获取对象的实例。</p><h2 id="什么时候该用工厂模式" tabindex="-1"><a class="header-anchor" href="#什么时候该用工厂模式" aria-hidden="true">#</a> 什么时候该用工厂模式？</h2><p>当我们需要根据不同的输入或条件产生不同的类的时候，我们就需要用到工厂模式。工厂模式可以让我们不关注内部逻辑，只需要输入对应的参数，工厂就会生产出我们需要的产品（类）。</p><blockquote><p>为了让代码逻辑更加清晰，可读性更好，我们要善于将功能独立的代码块封装成函数。</p></blockquote><p>使用对象工厂模式的好处包括:</p><ul><li><p>解耦：调用方不需要直接与具体的对象类进行交互，而是通过工厂类来获取对象实例，降低了代码的耦合度。</p></li><li><p>可扩展性：当需要添加新的产品类时，只需在工厂类中添加相应的创建逻辑，而不需要修改调用方的代码。</p></li><li><p>管理对象的实例化过程：通过工厂类集中管理对象的实例化过程，可以实现对象的创建、缓存、复用等操作。</p></li></ul><p>除了简单的对象创建，对象工厂模式还可以应用于更复杂的场景，例如根据不同的条件创建不同类型的对象，或者根据配置文件动态配置对象的创建过程等。</p><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h2><h3 id="简单工厂-simple-factory" tabindex="-1"><a class="header-anchor" href="#简单工厂-simple-factory" aria-hidden="true">#</a> 简单工厂（Simple Factory）</h3><p>简单工厂类似个体户，生产产品的种类和能够满足的需求相对简单。产品通常只有一个抽象基类，这个基类至少有一个抽象方法，通过继承这个抽象类得到具体的产品。此时工厂要做的就是根据客户需求，实例化具体产品来满足需求。</p><blockquote><p>简单工厂模式直接在工厂类进行逻辑处理和类的生产，简单易用，但是可扩展性差。</p></blockquote><h3 id="工厂方法-factory-method" tabindex="-1"><a class="header-anchor" href="#工厂方法-factory-method" aria-hidden="true">#</a> 工厂方法（Factory Method）</h3><p>上面简单工厂模式确实太简单了，工厂模式在此基础上丰富了“工厂的生产能力”，与简单工厂模式相比有以下几点不同：</p><ul><li>定义工厂基类，创建具体产品的任务放在子类完成，也就是<code>工厂类是通过继承的方式而不是实例化来完成</code></li><li>工厂方法使设计更加具有可定制性。它可以<code>返回相同的实例或子类，而不是某种类型的对象</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#! -*-conding=: UTF-8 -*-</span>
<span class="token comment"># 2023/9/19 17:02</span>
<span class="token keyword">import</span> json
<span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> etree
<span class="token keyword">import</span> unittest
<span class="token keyword">import</span> os
<span class="token keyword">import</span> tempfile


<span class="token keyword">class</span> <span class="token class-name">Connector</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>filepath <span class="token operator">=</span> filepath

    <span class="token keyword">def</span> <span class="token function">parsed_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">&quot;Subclasses must implement parsed_data&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">JSONConnector</span><span class="token punctuation">(</span>Connector<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">parsed_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filepath<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
        <span class="token keyword">return</span> data


<span class="token keyword">class</span> <span class="token class-name">XMLConnector</span><span class="token punctuation">(</span>Connector<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">parsed_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filepath<span class="token punctuation">)</span>
        <span class="token keyword">return</span> tree


<span class="token keyword">def</span> <span class="token function">connection_factory</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; 工厂方法 &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> filepath<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        connector <span class="token operator">=</span> JSONConnector
    <span class="token keyword">elif</span> filepath<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        connector <span class="token operator">=</span> XMLConnector
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;Cannot connect to {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> connector<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">TestConnectors</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_json_connector</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 创建一个临时JSON文件并写入测试数据</span>
        test_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&#39;city&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">}</span>
        <span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmpfile<span class="token punctuation">:</span>
            json_filename <span class="token operator">=</span> tmpfile<span class="token punctuation">.</span>name
            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> tmpfile<span class="token punctuation">)</span>

        <span class="token comment"># 测试JSONConnector</span>
        connector <span class="token operator">=</span> JSONConnector<span class="token punctuation">(</span>json_filename<span class="token punctuation">)</span>
        parsed_data <span class="token operator">=</span> connector<span class="token punctuation">.</span>parsed_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>parsed_data<span class="token punctuation">,</span> test_data<span class="token punctuation">)</span>

        <span class="token comment"># 清理临时文件</span>
        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>json_filename<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_xml_connector</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 创建一个临时XML文件并写入测试数据</span>
        xml_data <span class="token operator">=</span> <span class="token string">&#39;&lt;root&gt;&lt;element1&gt;Value1&lt;/element1&gt;&lt;element2&gt;Value2&lt;/element2&gt;&lt;/root&gt;&#39;</span>
        <span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmpfile<span class="token punctuation">:</span>
            xml_filename <span class="token operator">=</span> tmpfile<span class="token punctuation">.</span>name
            tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>xml_data<span class="token punctuation">)</span>

        <span class="token comment"># 测试XMLConnector</span>
        connector <span class="token operator">=</span> XMLConnector<span class="token punctuation">(</span>xml_filename<span class="token punctuation">)</span>
        parsed_data <span class="token operator">=</span> connector<span class="token punctuation">.</span>parsed_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertIsNotNone<span class="token punctuation">(</span>parsed_data<span class="token punctuation">)</span>

        <span class="token comment"># 清理临时文件</span>
        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>xml_filename<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_invalid_filepath</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 测试工厂方法是否会引发ValueError</span>
        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>
            connection_factory<span class="token punctuation">(</span><span class="token string">&#39;invalid.txt&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象工厂-abstract-factory" tabindex="-1"><a class="header-anchor" href="#抽象工厂-abstract-factory" aria-hidden="true">#</a> 抽象工厂（Abstract Factory）</h3><p>为了能够在创建类的时候扩展其功能，我们在工厂类中只提供增加，查询接口，而不直接生产类。这种模式就是工厂模式。<br> 比如我们想要给在创建不同类型的动物类的时候，对不同的动物添加不同的功能，<code>青蛙可以跑和跳</code>，<code>小鸡可以跑和飞</code>。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,24),d={href:"https://time.geekbang.org/column/article/197254?cid=100039001",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"https://time.geekbang.org/column/article/198614",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),b={href:"https://python-web-guide.readthedocs.io/zh/latest/design/design.html#the-fctory-pattern",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),f={href:"https://developer.aliyun.com/article/70417",target:"_blank",rel:"noopener noreferrer"};function _(g,y){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[a("https://time.geekbang.org/column/article/197254?cid=100039001"),e(s)]),k,n("a",m,[a("https://time.geekbang.org/column/article/198614"),e(s)]),v,n("a",b,[a("https://python-web-guide.readthedocs.io/zh/latest/design/design.html#the-fctory-pattern"),e(s)]),h,n("a",f,[a("https://developer.aliyun.com/article/70417"),e(s)])])])])}const q=t(u,[["render",_],["__file","工厂模式.html.vue"]]);export{q as default};
