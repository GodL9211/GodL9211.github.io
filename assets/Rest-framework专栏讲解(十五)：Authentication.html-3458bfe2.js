import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as n,b as s,e,f as t}from"./app-967d79b2.js";const r={},d=t('<h1 id="rest-framework专栏讲解-十五-authentication" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十五-authentication" aria-hidden="true">#</a> Rest-framework专栏讲解(十五)：Authentication</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">身份验证</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">如何确定身份验证</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88">设置认证方案</a></li><li><a href="#%E6%9C%AA%E7%BB%8F%E6%8E%88%E6%9D%83%E5%92%8C%E7%A6%81%E6%AD%A2%E5%93%8D%E5%BA%94">未经授权和禁止响应</a></li><li><a href="#Apache-mod_wsgi-%E7%89%B9%E5%AE%9A%E7%9A%84%E9%85%8D%E7%BD%AE">Apache mod_wsgi 特定的配置</a></li></ul></li><li><a href="#%E8%AE%A4%E8%AF%81API-%E5%8F%82%E8%80%83">认证API 参考</a><ul><li><a href="#BasicAuthentication">BasicAuthentication</a></li><li><a href="#TokenAuthentication">TokenAuthentication</a><ul><li><a href="#%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C">生成令牌</a></li><li><a href="#%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7">通过使用信号</a></li><li><a href="#%E9%80%9A%E8%BF%87%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA-API-%E7%AB%AF%E7%82%B9">通过暴露一个 API 端点</a></li><li><a href="#%E4%BD%BF%E7%94%A8-Django-admin">使用 Django admin</a></li><li><a href="#%E4%BD%BF%E7%94%A8-Django-managepy-%E5%91%BD%E4%BB%A4">使用 Django manage.py 命令</a></li></ul></li><li><a href="#SessionAuthentication">SessionAuthentication</a></li><li><a href="#RemoteUserAuthentication">RemoteUserAuthentication</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81">自定义身份认证</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li></ul><hr>',4),u={href:"http://www.django-rest-framework.org/api-guide/authentication/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},l={id:"身份验证",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#身份验证","aria-hidden":"true"},"#",-1),h={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81",title:"身份验证",target:"_blank",rel:"noopener noreferrer"},m=t("<p>身份验证是将传入请求与一组识别凭证（例如请求的用户或其签名的令牌）相关联的机制。然后，权限和限制策略可以使用这些凭据来确定请求是否应该被允许。</p><p>REST framework 提供了许多开箱即用的身份验证方案，同时也允许你实施自定义方案。</p><p>身份验证始终在视图的开始处运行，在执行权限和限制检查之前，在允许继续执行任何其他代码之前。</p><p><code>request.user</code> 属性通常会设置为 <code>contrib.auth</code> 包的 <code>User</code> 类的一个实例。</p><p><code>request.auth</code> 属性用于其他身份验证信息，例如，它可以用来表示请求已签名的身份验证令牌。</p><hr><p><strong>注意：</strong> 不要忘记， <strong>身份验证本身不会（允许或不允许）传入的请求</strong>，它只是标识请求的凭据。</p><hr>",8),v={id:"如何确定身份验证",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#如何确定身份验证","aria-hidden":"true"},"#",-1),b={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81",title:"如何确定身份验证",target:"_blank",rel:"noopener noreferrer"},A=t("<p>认证方案总是被定义为一个类的列表。 REST framework 将尝试使用列表中的每个类进行认证，并将使用成功认证的第一个类的返回值来设置 <code>request.user</code> 和 <code>request.auth</code> 。</p><p>如果没有类进行身份验证，则将 <code>request.user</code> 设置为 <code>django.contrib.auth.models.AnonymousUser</code> 的实例，并将 <code>request.auth</code> 设置为 <code>None</code>.</p><p>可以使用 <code>UNAUTHENTICATED_USER</code> 和 <code>UNAUTHENTICATED_TOKEN</code> 设置修改未经身份验证的请求的 <code>request.user</code> 和 <code>request.auth</code> 的值。</p>",3),g={id:"设置认证方案",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#设置认证方案","aria-hidden":"true"},"#",-1),E={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E8%AE%BE%E7%BD%AE%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88",title:"设置认证方案",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>默认的认证方案可以使用 <code>DEFAULT_AUTHENTICATION_CLASSES</code> setting 全局设置。例如。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;rest_framework.authentication.BasicAuthentication&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.authentication.SessionAuthentication&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用基于 <code>APIView</code> 类的视图，在每个视图或每个视图集的基础上设置身份验证方案。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">]</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` instance.</span>
            <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果您将 <code>@api_view</code> 装饰器与基于函数的视图一起使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@authentication_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@permission_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` instance.</span>
        <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),w={id:"未经授权和禁止响应",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#未经授权和禁止响应","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E6%9C%AA%E7%BB%8F%E6%8E%88%E6%9D%83%E5%92%8C%E7%A6%81%E6%AD%A2%E5%93%8D%E5%BA%94",title:"未经授权和禁止响应",target:"_blank",rel:"noopener noreferrer"},D=t("<p>当未经身份验证的请求被拒绝时，有两种不同的错误代码可能是合适的。</p><ul><li>[HTTP 401 Unauthorized][http401]</li><li>[HTTP 403 Permission Denied][http403]</li></ul><p>HTTP 401 响应必须始终包含 <code>WWW-Authenticate</code> header，该 header 指示客户端如何进行身份验证。 HTTP 403 响应不包含 <code>WWW-Authenticate</code> header。</p><p>将使用哪种响应取决于认证方案。尽管可能正在使用多种认证方案，但只能使用一种方案来确定响应的类型。 <strong>在确定响应类型时使用视图上设置的第一个认证类</strong>。</p><p>请注意，当请求可以成功进行身份验证时，仍然可能会因为权限而被拒绝，在这种情况下，将始终使用 <code>403 Permission Denied</code> 响应，而不管身份验证方案如何。</p>",5),j={id:"apache-mod-wsgi-特定的配置",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#apache-mod-wsgi-特定的配置","aria-hidden":"true"},"#",-1),F={href:"http://drf.jiuyou.info/#/drf/authentication?id=apache-mod_wsgi-%E7%89%B9%E5%AE%9A%E7%9A%84%E9%85%8D%E7%BD%AE",title:"Apache mod_wsgi 特定的配置",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>请注意，如果使用 mod_wsgi 部署到 Apache，授权 header 默认情况下不会传递到 WSGI 应用程序，因为它假定认证将由 Apache 处理，而不是在应用程序级别处理。</p><p>如果您正在部署到 Apache 并使用任何基于非会话的身份验证，则需要明确配置 mod_wsgi 以将所需的 headers 传递给应用程序。这可以通过在适当的上下文中指定 <code>WSGIPassAuthorization</code> 指令并将其设置为 <code>&#39;On&#39;</code> 来完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># this can go in either server config, virtual host, directory or .htaccess</span>
WSGIPassAuthorization On
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),N={id:"认证api-参考",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#认证api-参考","aria-hidden":"true"},"#",-1),U={href:"http://drf.jiuyou.info/#/drf/authentication?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},q={id:"basicauthentication",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#basicauthentication","aria-hidden":"true"},"#",-1),R={href:"http://drf.jiuyou.info/#/drf/authentication?id=basicauthentication",title:"BasicAuthentication",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>该认证方案使用 HTTP Basic Authentication，并根据用户的用户名和密码进行签名。Basic Authentication 通常只适用于测试。</p><p>如果成功通过身份验证，<code>BasicAuthentication</code> 将提供以下凭据。</p><ul><li><code>request.user</code> 是一个 Django <code>User</code> 实力.</li><li><code>request.auth</code> 是 <code>None</code>.</li></ul><p>未经身份验证的响应被拒绝将导致 <code>HTTP 401 Unauthorized</code> 的响应和相应的 WWW-Authenticate header。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Basic realm<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果您在生产环境中使用 <code>BasicAuthentication</code>，则必须确保您的 API 仅可通过 <code>https</code> 访问。您还应该确保您的 API 客户端将始终在登录时重新请求用户名和密码，并且永远不会将这些详细信息存储到持久化存储中。</p>`,6),W={id:"tokenauthentication",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#tokenauthentication","aria-hidden":"true"},"#",-1),O={href:"http://drf.jiuyou.info/#/drf/authentication?id=tokenauthentication",title:"TokenAuthentication",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>此认证方案使用简单的基于令牌的 HTTP 认证方案。令牌身份验证适用于 client-server 架构，例如本机桌面和移动客户端。</p><p>要使用 <code>TokenAuthentication</code> 方案，您需要将认证类配置为包含 <code>TokenAuthentication</code> ，并在 <code>INSTALLED_APPS</code> 设置中另外包含 <code>rest_framework.authtoken</code> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;rest_framework.authtoken&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 确保在更改设置后运行 <code>manage.py migrate</code> 。 <code>rest_framework.authtoken</code> 应用程序提供 Django 数据库迁移。</p><hr><p>您还需要为您的用户创建令牌。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

token <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> token<span class="token punctuation">.</span>key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于客户端进行身份验证，令牌密钥应包含在 <code>Authorization</code> HTTP header 中。关键字应以字符串文字 “Token” 为前缀，用空格分隔两个字符串。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Authorization<span class="token punctuation">:</span> Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果您想在 header 中使用不同的关键字（例如 <code>Bearer</code>），只需子类化 <code>TokenAuthentication</code> 并设置 <code>keyword</code> 类变量。</p><p>如果成功通过身份验证，<code>TokenAuthentication</code> 将提供以下凭据。</p><ul><li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li><li><code>request.auth</code> 是一个 <code>rest_framework.authtoken.models.Token</code> 实例.</li></ul><p>未经身份验证的响应被拒绝将导致 <code>HTTP 401 Unauthorized</code> 的响应和相应的 WWW-Authenticate header。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>curl 命令行工具可能对测试令牌认证的 API 有用。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>curl <span class="token operator">-</span>X GET http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>api<span class="token operator">/</span>example<span class="token operator">/</span> <span class="token operator">-</span>H <span class="token string">&#39;Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> 如果您在生产中使用 <code>TokenAuthentication</code>，则必须确保您的 API 只能通过 <code>https</code> 访问。</p></blockquote>`,17),z={id:"生成令牌",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#生成令牌","aria-hidden":"true"},"#",-1),V={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C",title:"生成令牌",target:"_blank",rel:"noopener noreferrer"},X={id:"通过使用信号",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#通过使用信号","aria-hidden":"true"},"#",-1),J={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7",title:"通过使用信号",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>如果您希望每个用户都拥有一个自动生成的令牌，则只需捕捉用户的 <code>post_save</code> 信号即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signals <span class="token keyword">import</span> post_save
<span class="token keyword">from</span> django<span class="token punctuation">.</span>dispatch <span class="token keyword">import</span> receiver
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

<span class="token decorator annotation punctuation">@receiver</span><span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender<span class="token operator">=</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_auth_token</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> created<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> created<span class="token punctuation">:</span>
        Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，您需要<code>确保</code>将此代码片段放置在已安装的 <code>models.py</code> 模块或 Django 启动时将导入的其他某个位置。</p><p>如果您已经创建了一些用户，则可以为所有现有用户生成令牌，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

<span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Q={id:"通过暴露一个-api-端点",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#通过暴露一个-api-端点","aria-hidden":"true"},"#",-1),Z={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E9%80%9A%E8%BF%87%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA-api-%E7%AB%AF%E7%82%B9",title:"通过暴露一个 API 端点",target:"_blank",rel:"noopener noreferrer"},$=t(`<p>上面的方式是通过信号捕获的方式进行令牌生成的, 你可以利用 API 的方式进行令牌生成返回。</p><p>使用 <code>TokenAuthentication</code> 时，您可能希望为客户提供一种机制，以获取给定用户名和密码的令牌。 REST framework 提供了一个内置的视图来支持这种行为。要使用它，请将 <code>obtain_auth_token</code> 视图添加到您的 URLconf 中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken <span class="token keyword">import</span> views
urlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;api-token-auth/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>obtain_auth_token<span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，模式的 URL 部分可以是任何你想使用的。</p><p>当使用表单数据或 JSON 将有效的 <code>username</code> 和 <code>password</code> 字段发布到视图时， <code>obtain_auth_token</code> 视图将返回 JSON 响应：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，缺省的 <code>obtain_auth_token</code> 视图显式使用 JSON 请求和响应，而不是使用你设置的默认的渲染器和解析器类。</p><p>默认情况下，没有权限或限制应用于 <code>obtain_auth_token</code> 视图。 如果您希望应用 throttling ，则需要重写视图类，并使用 <code>throttle_classes</code> 属性包含它们。</p><p>如果你需要自定义 <code>obtain_auth_token</code> 视图，你可以通过继承 <code>ObtainAuthToken</code> 视图类来实现，并在你的 url conf 中使用它。</p><p>例如，您可能会返回超出 <code>token</code> 值的其他用户信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>views <span class="token keyword">import</span> ObtainAuthToken
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response

<span class="token keyword">class</span> <span class="token class-name">CustomAuthToken</span><span class="token punctuation">(</span>ObtainAuthToken<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>serializer_class<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
                                           context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>
        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        user <span class="token operator">=</span> serializer<span class="token punctuation">.</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span>
        token<span class="token punctuation">,</span> created <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&#39;token&#39;</span><span class="token punctuation">:</span> token<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
            <span class="token string">&#39;user_id&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>pk<span class="token punctuation">,</span>
            <span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>email
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 <code>urls.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api-token-auth/&#39;</span><span class="token punctuation">,</span> CustomAuthToken<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),nn={id:"使用-django-admin",tabindex:"-1"},sn=n("a",{class:"header-anchor",href:"#使用-django-admin","aria-hidden":"true"},"#",-1),an={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E4%BD%BF%E7%94%A8-django-admin",title:"使用 Django admin",target:"_blank",rel:"noopener noreferrer"},en=t(`<p>您也可以通过管理界面手动创建令牌。如果您使用的用户群很大，我们建议您对 <code>TokenAdmin</code> 类进行修补以根据需要对其进行定制，更具体地说，将 <code>user</code> 字段声明为 <code>raw_field</code>。</p><p><code>your_app/admin.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># app/admin.py</span>

TokenAdmin<span class="token punctuation">.</span>raw_id_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),tn={id:"使用-django-manage-py-命令",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#使用-django-manage-py-命令","aria-hidden":"true"},"#",-1),pn={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E4%BD%BF%E7%94%A8-django-managepy-%E5%91%BD%E4%BB%A4",title:"使用 Django manage.py 命令",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p>从版本 3.6.4 开始，可以使用以下命令生成用户令牌：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py drf_create_token <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令将返回给定用户的 API 令牌，如果它<code>不存在则创建</code>它：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Generated token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b <span class="token keyword">for</span> user user1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您想重新生成令牌（例如，它已被泄漏），则可以传递一个附加参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py drf_create_token <span class="token operator">-</span>r <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),rn={id:"sessionauthentication",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#sessionauthentication","aria-hidden":"true"},"#",-1),un={href:"http://drf.jiuyou.info/#/drf/authentication?id=sessionauthentication",title:"SessionAuthentication",target:"_blank",rel:"noopener noreferrer"},ln=t("<p>此认证方案使用 Django 的默认 session 后端进行认证。Session 身份验证适用于与您的网站在同一会话环境中运行的 AJAX 客户端。</p><p>如果成功通过身份验证，则 <code>SessionAuthentication</code> 会提供以下凭据。</p><ul><li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li><li><code>request.auth</code> 是 <code>None</code>.</li></ul><p>未经身份验证的响应被拒绝将导致 <code>HTTP 403 Forbidden</code> 响应。</p><p>如果您在 SessionAuthentication 中使用 AJAX 风格的 API，则需要确保为任何 “不安全” 的 HTTP 方法调用（例如 <code>PUT</code>，<code>PATCH</code>，<code>POST</code> 或 <code>DELETE</code> 请求）包含有效的 CSRF 令牌。</p><p><strong>警告</strong>: 创建登录页面时应该始终使用 Django 的标准登录视图。这将确保您的登录视图得到适当的保护。</p><p>REST framework 中的 CSRF 验证与标准 Django 略有不同，因为需要同时支持基于 session 和非基于 session 的身份验证。这意味着只有经过身份验证的请求才需要 CSRF 令牌，并且可以在没有 CSRF 令牌的情况下发送匿名请求。此行为不适用于应始终应用 CSRF 验证的登录视图。</p>",7),kn={id:"remoteuserauthentication",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#remoteuserauthentication","aria-hidden":"true"},"#",-1),mn={href:"http://drf.jiuyou.info/#/drf/authentication?id=remoteuserauthentication",title:"RemoteUserAuthentication",target:"_blank",rel:"noopener noreferrer"},vn=t("<p>这种身份验证方案允许您将身份验证委托给您的 Web 服务器，该服务器设置 <code>REMOTE_USER</code> 环境变量。</p><p>要使用它，你必须在你的 <code>AUTHENTICATION_BACKENDS</code> 设置中有 <code>django.contrib.auth.backends.RemoteUserBackend</code> （或者一个子类）。默认情况下，<code>RemoteUserBackend</code> 为不存在的用户名创建 <code>User</code> 对象。要改变这个和其他行为，请参考 Django 文档。</p><p>如果成功通过身份验证，<code>RemoteUserAuthentication</code> 将提供以下凭据：</p><ul><li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li><li><code>request.auth</code> 是 <code>None</code>.</li></ul><p>有关配置验证方法的信息，请参阅您的 Web 服务器的文档，例如：</p>",5),_n={href:"https://httpd.apache.org/docs/2.4/howto/auth.html",title:"Apache Authentication How-To",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://www.nginx.com/resources/admin-guide/#restricting_access",title:"NGINX (Restricting Access)",target:"_blank",rel:"noopener noreferrer"},An={id:"自定义身份认证",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#自定义身份认证","aria-hidden":"true"},"#",-1),fn={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81",title:"自定义身份认证",target:"_blank",rel:"noopener noreferrer"},En=t("<p>要实现自定义身份验证方案，请继承 <code>BaseAuthentication</code> 并重写 <code>.authenticate(self, request)</code> 方法。如果认证成功，该方法应返回 <code>(user, auth)</code> 的二元组，否则返回 <code>None</code>。</p><p>在某些情况下，您可能想要从 <code>.authenticate()</code> 方法引发 <code>AuthenticationFailed</code> 异常而不是返回 <code>None</code>。</p><p>通常你应该采取的方法是：</p><ul><li>如果不尝试认证，则返回 <code>None</code>。任何其他正在使用的身份验证方案仍将被检查。</li><li>如果尝试身份验证但失败了，请引发 <code>AuthenticationFailed</code> 异常。无论是否进行任何权限检查，都将立即返回错误响应，并且不再检查任何其他身份验证方案。</li></ul><p>您也 <em>可以</em> 重写 <code>.authenticate_header(self, request)</code> 方法。如果实现，它应该返回一个字符串，该字符串将用作 <code>HTTP 401 Unauthorized</code> 响应中的 WWW-Authenticate header 的值。</p><p>如果未覆盖 <code>.authenticate_header()</code> 方法，那么当未经身份验证的请求被拒绝访问时，身份验证方案将返回 <code>HTTP 403 Forbidden</code> 响应。</p><hr><p><strong>Note:</strong> 当请求对象的 <code>.user</code> 或 <code>.auth</code> 属性调用您的自定义身份验证器时，您可能会看到 <code>AttributeError</code> 作为 <code>WrappedAttributeError</code> 被重新引发。这对于防止原始异常被外部属性访问所抑制是必要的。Python 不会识别 <code>AttributeError</code> 来自您的自定义身份验证器，而是会假设请求对象没有 <code>.user</code> 或 <code>.auth</code> 属性。这些错误应该由您的验证器修复或以其他方式处理。</p>",8),yn={id:"举个栗子",tabindex:"-1"},wn=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),Bn={href:"http://drf.jiuyou.info/#/drf/authentication?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},Tn=t(`<p>下面的示例将根据名为 “X_USERNAME” 的自定义请求头中的用户名对任何传入请求进行身份验证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> exceptions

<span class="token keyword">class</span> <span class="token class-name">ExampleAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>BaseAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;HTTP_X_USERNAME&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> username<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed<span class="token punctuation">(</span><span class="token string">&#39;No such user&#39;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Dn(jn,xn){const a=i("ExternalLinkIcon");return p(),c("div",null,[d,n("blockquote",null,[n("p",null,[n("a",u,[s("官方原文链接"),e(a)])])]),n("h1",l,[k,s(),n("a",h,[s("身份验证"),e(a)])]),m,n("h2",v,[_,s(),n("a",b,[s("如何确定身份验证"),e(a)])]),A,n("h2",g,[f,s(),n("a",E,[s("设置认证方案"),e(a)])]),y,n("h2",w,[B,s(),n("a",T,[s("未经授权和禁止响应"),e(a)])]),D,n("h2",j,[x,s(),n("a",F,[s("Apache mod_wsgi 特定的配置"),e(a)])]),S,n("h1",N,[P,s(" 认证"),n("a",U,[s("API 参考"),e(a)])]),n("h2",q,[I,s(),n("a",R,[s("BasicAuthentication"),e(a)])]),C,n("h2",W,[H,s(),n("a",O,[s("TokenAuthentication"),e(a)])]),L,n("h4",z,[G,s(),n("a",V,[s("生成令牌"),e(a)])]),n("h4",X,[M,s(),n("a",J,[s("通过使用信号"),e(a)])]),K,n("h4",Q,[Y,s(),n("a",Z,[s("通过暴露一个 API 端点"),e(a)])]),$,n("h4",nn,[sn,s(),n("a",an,[s("使用 Django admin"),e(a)])]),en,n("h4",tn,[on,s(),n("a",pn,[s("使用 Django manage.py 命令"),e(a)])]),cn,n("h2",rn,[dn,s(),n("a",un,[s("SessionAuthentication"),e(a)])]),ln,n("h2",kn,[hn,s(),n("a",mn,[s("RemoteUserAuthentication"),e(a)])]),vn,n("ul",null,[n("li",null,[n("a",_n,[s("Apache Authentication How-To"),e(a)])]),n("li",null,[n("a",bn,[s("NGINX (Restricting Access)"),e(a)])])]),n("h1",An,[gn,s(),n("a",fn,[s("自定义身份认证"),e(a)])]),En,n("h2",yn,[wn,s(),n("a",Bn,[s("举个栗子"),e(a)])]),Tn])}const Nn=o(r,[["render",Dn],["__file","Rest-framework专栏讲解(十五)：Authentication.html.vue"]]);export{Nn as default};
