import{_ as i}from"./海哥python-6b198e2b.js";import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,f as o}from"./app-9976b6d0.js";const r="/assets/阻塞io模型-91afd7db.png",n="/assets/非阻塞io模型-a2ed77c7.png",s="/assets/io多路复用模型-20bf6dff.png",c="/assets/异步io模型-a74f2d1f.png",d={},f=o('<h2 id="tcp-socket网络编程模型" tabindex="-1"><a class="header-anchor" href="#tcp-socket网络编程模型" aria-hidden="true">#</a> TCP Socket网络编程模型</h2><p>阻塞和非阻塞是以内核是否等数据全部就绪才返回（给发起系统调用的应用线程）来区分的。</p><h3 id="阻塞i-o模型" tabindex="-1"><a class="header-anchor" href="#阻塞i-o模型" aria-hidden="true">#</a> 阻塞I/O模型</h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="非阻塞i-o模型" tabindex="-1"><a class="header-anchor" href="#非阻塞i-o模型" aria-hidden="true">#</a> 非阻塞I/O模型</h3><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="i-o多路复用模型" tabindex="-1"><a class="header-anchor" href="#i-o多路复用模型" aria-hidden="true">#</a> I/O多路复用模型</h3><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="异步i-o模型" tabindex="-1"><a class="header-anchor" href="#异步i-o模型" aria-hidden="true">#</a> 异步I/O模型</h3><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',12),h=[f];function g(_,l){return e(),t("div",null,h)}const x=a(d,[["render",g],["__file","27.网络操作.html.vue"]]);export{x as default};
