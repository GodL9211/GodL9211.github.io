const e=JSON.parse('{"key":"v-4ee85b32","path":"/docs/golang/golang-base/20.%E6%8E%A5%E5%8F%A3.html","title":"20. 接口","lang":"zh-CN","frontmatter":{"title":"20. 接口","icon":"book","index":true,"article":false,"description":"在Go语言中，接口（interface）是一种抽象类型，定义了一组方法的集合，但没有实现这些方法的具体代码。接口提供了一种实现多态的机制，允许不同的类型实现相同的接口方法，从而使这些类型可以以一致的方式使用。以下是Golang中接口的一些重要特性和用法： 1. 接口定义：使用type关键字定义接口，然后通过在接口内部声明一组方法来描述接口的行为。 ``...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/golang/golang-base/20.%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"20. 接口"}],["meta",{"property":"og:description","content":"在Go语言中，接口（interface）是一种抽象类型，定义了一组方法的集合，但没有实现这些方法的具体代码。接口提供了一种实现多态的机制，允许不同的类型实现相同的接口方法，从而使这些类型可以以一致的方式使用。以下是Golang中接口的一些重要特性和用法： 1. 接口定义：使用type关键字定义接口，然后通过在接口内部声明一组方法来描述接口的行为。 ``..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-12T10:26:58.000Z"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["meta",{"property":"article:modified_time","content":"2023-10-12T10:26:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"20. 接口\\",\\"description\\":\\"在Go语言中，接口（interface）是一种抽象类型，定义了一组方法的集合，但没有实现这些方法的具体代码。接口提供了一种实现多态的机制，允许不同的类型实现相同的接口方法，从而使这些类型可以以一致的方式使用。以下是Golang中接口的一些重要特性和用法： 1. 接口定义：使用type关键字定义接口，然后通过在接口内部声明一组方法来描述接口的行为。 ``...\\"}"]]},"headers":[],"git":{"createdTime":1697106418000,"updatedTime":1697106418000,"contributors":[{"name":"lianhaifeng","email":"lianhaifeng@rongannetworks.com","commits":1}]},"readingTime":{"minutes":2.12,"words":635},"filePathRelative":"docs/golang/golang-base/20.接口.md","localizedDate":"2023年10月12日","excerpt":"","autoDesc":true}');export{e as data};
