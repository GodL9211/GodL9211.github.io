import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as r,a as n,b as s,e,f as t}from"./app-9976b6d0.js";const c={},l=t('<h1 id="rest-framework专栏讲解-二十一-format-suffixes" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-二十一-format-suffixes" aria-hidden="true">#</a> Rest-framework专栏讲解(二十一)：Format suffixes</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#Format-%E5%90%8E%E7%BC%80">Format 后缀</a><ul><li><a href="#format_suffix_patterns">format_suffix_patterns</a><ul><li><a href="#%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">与 i18n_patterns 一起使用</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96">查询参数格式化</a></li><li><a href="#%E6%8E%A5%E5%8F%97%E6%A0%87%E5%A4%B4%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%90%8E%E7%BC%80">接受标头与格式后缀</a></li></ul></li></ul></li></ul><hr>',4),u={href:"http://www.django-rest-framework.org/api-guide/format-suffixes/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},d={id:"format-后缀",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#format-后缀","aria-hidden":"true"},"#",-1),k={href:"http://drf.jiuyou.info/#/drf/format-suffixes?id=format-%E5%90%8E%E7%BC%80",title:"Format 后缀",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[s("Web API 的常见模式是在 URL 上使用文件扩展名来为给定的媒体类型提供端点。 例如，"),n("code",null,"'http://example.com/api/users.json'"),s(" 用于提供 JSON 表示。")],-1),_=n("p",null,"在 URLconf 中为你的 API 添加 format-suffix 模式是容易出错和非 DRY 的，因此 REST framework 提供了将这些模式添加到 URLconf 的快捷方式。",-1),h={id:"format-suffix-patterns",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#format-suffix-patterns","aria-hidden":"true"},"#",-1),b={href:"http://drf.jiuyou.info/#/drf/format-suffixes?id=format_suffix_patterns",title:"format_suffix_patterns",target:"_blank",rel:"noopener noreferrer"},E=t(`<p><strong>签名</strong>: <code>format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None)</code></p><p>返回一个 URL pattern 列表，其中包含附加到每个 URL pattern 的格式后缀模式。</p><p>参数：</p><ul><li><strong>urlpatterns</strong>: 必需。一个 URL pattern 列表。</li><li><strong>suffix_required</strong>: 可选。一个 boolean 值，指定 URL 中的后缀是否可选或强制。默认为 <code>False</code>，这意味着后缀默认是可选的。</li><li><strong>allowed</strong>: 可选。有效格式后缀的列表或元组。如果没有提供，将使用通配符格式后缀模式。</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>urlpatterns <span class="token keyword">import</span> format_suffix_patterns
<span class="token keyword">from</span> blog <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>apt_root<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;comments/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>comment_list<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;comments/&lt;int:pk&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>comment_detail<span class="token punctuation">)</span>
<span class="token punctuation">]</span>

urlpatterns <span class="token operator">=</span> format_suffix_patterns<span class="token punctuation">(</span>urlpatterns<span class="token punctuation">,</span> allowed<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 format_suffix_patterns 时，你必须确保将 <code>format</code>关键字参数添加到相应的视图。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">comment_list</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># do stuff...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者基于类视图：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommentList</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># do stuff...</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># do stuff...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所使用的<code> kwarg</code> 的名称可以使用 <code>FORMAT_SUFFIX_KWARG</code> 进行修改。</p><p>另请注意，<code>format_suffix_patterns</code> 不支持降序包含 URL patterns。</p>`,12),g={id:"与-i18n-patterns-一起使用",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#与-i18n-patterns-一起使用","aria-hidden":"true"},"#",-1),B={href:"http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8",title:"与 ",target:"_blank",rel:"noopener noreferrer"},w={href:"http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8",title:"i18n_patterns",target:"_blank",rel:"noopener noreferrer"},y={href:"http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8",title:" 一起使用",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>如果使用 Django 提供的 <code>i18n_patterns</code> 函数以及 <code>format_suffix_patterns</code>，则应确保将 <code>i18n_patterns</code> 函数用作最终或最外层函数。例如：</p><p>如果使用 Django 提供的 <code>i18n_patterns</code> 函数, 以及 <code>format_suffix_patterns</code>, 则应确保将 <code>i18n_patterns</code> 函数应用为最终函数或最外层函数, 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url patterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    …
<span class="token punctuation">]</span>

urlpatterns <span class="token operator">=</span> i18n_patterns<span class="token punctuation">(</span>
    format_suffix_patterns<span class="token punctuation">(</span>urlpatterns<span class="token punctuation">,</span> allowed<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询参数格式化" tabindex="-1"><a class="header-anchor" href="#查询参数格式化" aria-hidden="true">#</a> 查询参数格式化</h3><p>格式后缀的替代方法是将请求的 format 包含在查询参数中。REST framework 默认提供此选项，并且它在可浏览的 API 中用于在不同的可用表示之间切换。</p><p>要使用其短格式表示，请使用 <code>format</code> 查询参数。例如： <code>http://example.com/organizations/?format=csv</code>。</p><p>此查询参数的名称可以使用 <code>URL_FORMAT_OVERRIDE</code> 设置进行修改。将该值设置为 <code>None</code> 以禁用此行为。</p><h3 id="接受标头与格式后缀" tabindex="-1"><a class="header-anchor" href="#接受标头与格式后缀" aria-hidden="true">#</a> 接受标头与格式后缀</h3><p>在某些 Web 社区中似乎有人认为文件扩展名不是 RESTful 模式, 而应该始终使用 <code>HTTP Accept</code> 标头。</p><p>这实际上是一种误解, 例如引用 <code>Roy Fielding</code> 的话, 其中讨论了查询参数媒体类型指标与文件扩展名媒体类型指标的相对优点：</p><blockquote><p>“That&#39;s why I always prefer extensions. Neither choice has anything to do with REST.” — Roy Fielding。</p></blockquote><p>这段引文没有提到 <code>Accept headers</code>, 但它明确表示格式后缀应该被视为可接受的模式。</p>`,12);function R(A,L){const a=p("ExternalLinkIcon");return i(),r("div",null,[l,n("blockquote",null,[n("p",null,[n("a",u,[s("官方原文链接"),e(a)])])]),n("h1",d,[f,s(),n("a",k,[s("Format 后缀"),e(a)])]),m,_,n("h2",h,[v,s(),n("a",b,[s("format_suffix_patterns"),e(a)])]),E,n("h3",g,[x,s(),n("a",B,[s("与 "),e(a)]),n("a",w,[s("i18n_patterns"),e(a)]),n("a",y,[s(" 一起使用"),e(a)])]),F])}const N=o(c,[["render",R],["__file","Rest-framework专栏讲解(二十一)：Format suffixes.html.vue"]]);export{N as default};
