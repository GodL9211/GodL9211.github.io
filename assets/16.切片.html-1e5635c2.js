import{_ as a}from"./海哥python-6b198e2b.js";import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as c,e as l,f as i}from"./app-967d79b2.js";const u={},r=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>切片区别于数组，是引用类型， 不是值类型。数组是固定长度的，而切片长度是可变的，我的理解是：切片是对数组一个片段的引用。</p></blockquote><p>在Go语言中，切片（Slice）是一种用于处理集合数据的灵活且强大的数据结构，它可以让你轻松地操作和管理一组数据元素。让我用简单的语言解释一下切片，以便小白理解：</p><ol><li><p><strong>切片是什么</strong>：</p><ul><li>切片是一种动态数组，可以容纳多个元素，但不需要提前指定大小。</li><li>切片是对底层数组的一种引用，因此它们支持动态增长和缩减。</li></ul></li><li><p><strong>切片的特点</strong>：</p><ul><li>切片可以动态增长和缩减，因此它们非常适用于处理不确定长度的数据集。</li><li>切片是引用类型，即多个切片可以引用同一个底层数组。</li><li>切片支持切割、追加、复制等操作，使得处理数据更加方便。</li></ul></li><li><p><strong>声明和创建切片</strong>：</p><ul><li>你可以使用 <code>make</code> 函数来创建一个空切片，例如：<code>var numbers []int = make([]int, 0)</code></li><li>也可以使用切片字面量来创建切片，例如：<code>names := []string{&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;}</code></li></ul></li><li><p><strong>切片的操作</strong>：</p><ul><li>切片可以使用索引来访问元素，例如：<code>names[0]</code> 表示第一个元素。</li><li>切片还支持切割操作，例如：<code>subSlice := names[1:3]</code> 表示从索引1到索引2的切片。</li><li>使用 <code>append</code> 函数可以向切片中添加元素，例如：<code>names = append(names, &quot;David&quot;)</code> 在切片末尾添加一个元素。</li><li>使用 <code>len()</code> 函数可以获取切片的长度，使用 <code>cap()</code> 函数可以获取切片的容量。</li></ul></li><li><p><strong>切片的底层数组</strong>：</p><ul><li>切片引用了一个底层数组，因此多个切片可以引用同一个底层数组。</li><li>当多个切片引用同一个底层数组时，它们之间的操作会相互影响。</li></ul></li></ol><p>下面是一个简单的示例，演示了如何创建、操作和使用切片：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个切片</span>
    numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span>

    <span class="token comment">// 访问切片元素</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;第一个元素:&quot;</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出 10</span>

    <span class="token comment">// 切割切片</span>
    subSlice <span class="token operator">:=</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 包含索引1和2的元素</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;切割后的切片:&quot;</span><span class="token punctuation">,</span> subSlice<span class="token punctuation">)</span> <span class="token comment">// 输出 [20 30]</span>

    <span class="token comment">// 向切片追加元素</span>
    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;追加元素后的切片:&quot;</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span> <span class="token comment">// 输出 [10 20 30 40 50 60]</span>

    <span class="token comment">// 获取切片的长度和容量</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;切片长度:&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 6</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;切片容量:&quot;</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 6</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="由数组得到切片" tabindex="-1"><a class="header-anchor" href="#由数组得到切片" aria-hidden="true">#</a> 由数组得到切片</h2><p>切片和数组的关系：</p><ul><li>1.切片的本质是操作数组，只是数组是固定长度的，而切片的长度可变的</li><li>2.切片是引用类型，可以理解为引用数组的一个片段；而数组是值类型，把数组A赋值给数组B，会为数组B开辟新的内存空间，修改数组B的值并不会影响数组A。</li><li>3.而切片作为引用类型，指向同一个内存地址，是会互相影响的。</li><li></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
s4 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">//[3 4]</span>
s5 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">//[1 2 3 4]</span>
s6 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">//[3 4 5 6 7 8 9]</span>
s7 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment">//[1 2 3 4 5 6 7 8 9]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片是引用类型" tabindex="-1"><a class="header-anchor" href="#切片是引用类型" aria-hidden="true">#</a> 切片是引用类型</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//定义数组</span>
a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
<span class="token comment">//由数组切割成切片s6</span>
s6 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">//[3 4 5 6 7 8 9]</span>
<span class="token comment">//切片再次切片，赋值给s8</span>
s8 <span class="token operator">:=</span>s6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">//[6 7 8 9]</span>
<span class="token comment">//修改原始数组，把下标为2的值由3改为333</span>
a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span>
<span class="token comment">//打印s6，发现s6中的3也变成了333</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s6:&quot;</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span> <span class="token comment">//[333 4 5 6 7 8 9]</span>
<span class="token comment">//因为s8基于s6切片而成，我们测试一下切片再切片的引用传的</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s8:&quot;</span><span class="token punctuation">,</span> s8<span class="token punctuation">)</span> <span class="token comment">//[6 7 8 9]</span>
<span class="token comment">//我们把原始数组下标为5的值由6改为666</span>
a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">666</span>
<span class="token comment">//打印s8切片，得到结果6也变成了666</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s8:&quot;</span><span class="token punctuation">,</span> s8<span class="token punctuation">)</span> <span class="token comment">//[666 7 8 9]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由此我们可以明确的知道切片是引用类型，当底层数组改变时，不管是切片，还是切片再切片，值都会改变。因为他们使用的是一个内存块，引用的一个内存地址。</p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>1.切片的定义很简单，类似<code>var s1 []int</code>即可定义，但是不初始化的话不会分配内存空间，这点很重要！<br> 2.切片的长度和容量如何理解和计算？<br> 3.切片也可以由数组切片而来，切片和数组的区别是什么？重点在于理解数组是值类型，切片是引用类型！</p><p>总之，切片是Go语言中用于管理集合数据的一种方便且强大的数据结构。它们可以动态增长和缩减，支持多种操作，使得处理数据集合变得更加容易。切片是Go语言中常用的数据类型，特别适合用于处理不确定大小的数据集。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,17),k={href:"https://juejin.cn/post/7071960543283642404",target:"_blank",rel:"noopener noreferrer"},m=n("hr",null,null,-1),d=n("figure",null,[n("img",{src:a,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function b(v,f){const s=p("ExternalLinkIcon");return e(),o("div",null,[r,n("blockquote",null,[n("p",null,[n("a",k,[c("https://juejin.cn/post/7071960543283642404"),l(s)])])]),m,d])}const _=t(u,[["render",b],["__file","16.切片.html.vue"]]);export{_ as default};
