const t=JSON.parse('{"key":"v-3b32c9de","path":"/docs/python/python%E5%9F%BA%E7%A1%80/%E7%AC%AC47%E8%AF%BE.MySQL%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"第47课：MySQL 新特性","lang":"zh-CN","frontmatter":{"title":"第47课：MySQL 新特性","icon":"book","order":47,"index":true,"article":false,"description":"第47课：MySQL 新特性 JSON类型 很多开发者在使用关系型数据库做数据持久化的时候，常常感到结构化的存储缺乏灵活性，因为必须事先设计好所有的列以及对应的数据类型。在业务发展和变化的过程中，如果需要修改表结构，这绝对是比较麻烦和难受的事情。从 MySQL 5.7 版本开始，MySQL引入了对 JSON 数据类型的支持（MySQL 8.0 解决了 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/python%E5%9F%BA%E7%A1%80/%E7%AC%AC47%E8%AF%BE.MySQL%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"第47课：MySQL 新特性"}],["meta",{"property":"og:description","content":"第47课：MySQL 新特性 JSON类型 很多开发者在使用关系型数据库做数据持久化的时候，常常感到结构化的存储缺乏灵活性，因为必须事先设计好所有的列以及对应的数据类型。在业务发展和变化的过程中，如果需要修改表结构，这绝对是比较麻烦和难受的事情。从 MySQL 5.7 版本开始，MySQL引入了对 JSON 数据类型的支持（MySQL 8.0 解决了 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"第47课：MySQL 新特性\\",\\"description\\":\\"第47课：MySQL 新特性 JSON类型 很多开发者在使用关系型数据库做数据持久化的时候，常常感到结构化的存储缺乏灵活性，因为必须事先设计好所有的列以及对应的数据类型。在业务发展和变化的过程中，如果需要修改表结构，这绝对是比较麻烦和难受的事情。从 MySQL 5.7 版本开始，MySQL引入了对 JSON 数据类型的支持（MySQL 8.0 解决了 ...\\"}"]]},"headers":[{"level":2,"title":"第47课：MySQL 新特性","slug":"第47课-mysql-新特性","link":"#第47课-mysql-新特性","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.68,"words":1703},"filePathRelative":"docs/python/python基础/第47课.MySQL新特性.md","excerpt":"","autoDesc":true}');export{t as data};
