import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as l,a as n,b as s,e,f as t}from"./app-967d79b2.js";const r="/assets/image_0Tjn_LqmEY-90be613f.png",c="/assets/image_AcjB4Lw9NH-fa9da6f2.png",d="/assets/image_vdL9_cUOtG-6a02676e.png",u={},k=t('<h1 id="rest-framework专栏讲解-十九-filtering" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十九-filtering" aria-hidden="true">#</a> Rest-framework专栏讲解(十九)：Filtering</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E8%BF%87%E6%BB%A4">过滤</a><ul><li><a href="#%E6%A0%B9%E6%8D%AE%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据当前用户进行过滤</a></li><li><a href="#%E6%A0%B9%E6%8D%AE-URL-%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据 URL 进行过滤</a></li><li><a href="#%E6%A0%B9%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据查询参数进行过滤</a></li></ul></li><li><a href="#%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8">通用过滤器</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%90%8E%E7%AB%AF">设置过滤器后端</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%9F%A5%E6%89%BE">过滤和对象查找</a></li><li><a href="#%E8%A6%86%E7%9B%96%E5%88%9D%E5%A7%8B%E6%9F%A5%E8%AF%A2%E9%9B%86">覆盖初始查询集</a></li></ul></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%99%A8API-%E5%8F%82%E8%80%83">过滤器API 参考</a><ul><li><a href="#DjangoFilterBackend">DjangoFilterBackend</a></li><li><a href="#SearchFilter">SearchFilter</a></li><li><a href="#OrderingFilter">OrderingFilter</a><ul><li><a href="#%E6%8C%87%E5%AE%9A%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F">指定可以根据哪些字段进行排序</a></li><li><a href="#%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F">指定默认顺序</a></li></ul></li><li><a href="#DjangoObjectPermissionsFilter">DjangoObjectPermissionsFilter</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8">自定义通用过滤器</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3">自定义接口</a></li><li><a href="#Pagination--schemas">Pagination &amp; schemas</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">第三方库</a><ul><li><a href="#Django-REST%E6%A1%86%E6%9E%B6%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%8C%85">Django REST框架过滤器软件包</a></li><li><a href="#Django-REST%E6%A1%86%E6%9E%B6%E5%85%A8%E5%AD%97%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E5%99%A8">Django REST框架全字搜索过滤器</a></li><li><a href="#Django-URL%E8%BF%87%E6%BB%A4%E5%99%A8">Django URL过滤器</a></li><li><a href="#drf-url-filters">drf-url-filters</a></li></ul></li></ul></li></ul><hr>',4),h={href:"http://www.django-rest-framework.org/api-guide/filtering/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},m={id:"过滤",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#过滤","aria-hidden":"true"},"#",-1),_={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%BF%87%E6%BB%A4",title:"过滤",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"REST framework 的通用列表视图的默认行为是从模型管理器返回整个查询集。通常你会希望 API 限制查询集返回的条目。",-1),f=n("p",null,[s("筛选 "),n("code",null,"GenericAPIView"),s(" 子类的查询集的最简单方法是重写 "),n("code",null,".get_queryset()"),s(" 方法。")],-1),b=n("p",null,"重写此方法允许你以多种不同方式自定义视图返回的查询集。",-1),E={id:"根据当前用户进行过滤",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#根据当前用户进行过滤","aria-hidden":"true"},"#",-1),A={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4",title:"根据当前用户进行过滤",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>你可能需要过滤查询集，以确保只返回与当前通过身份验证的用户发出的请求相关的结果。</p><p>你可以基于 <code>request.user</code> 的值进行筛选来完成此操作。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Purchase
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> PurchaseSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics

<span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        This view should return a list of all the purchases
        for the currently authenticated user.
        &quot;&quot;&quot;</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),j={id:"根据-url-进行过滤",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#根据-url-进行过滤","aria-hidden":"true"},"#",-1),F={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE-url-%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4",title:"根据 URL 进行过滤",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>另一种过滤方式可能涉及基于 URL 的某个部分限制查询集。</p><p>例如，如果你的 URL 配置包含这样的条目：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re_path<span class="token punctuation">(</span><span class="token string">&#39;^purchases/(?P&lt;username&gt;.+)/$&#39;</span><span class="token punctuation">,</span> PurchaseList<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，你可以编写一个视图，返回由 URL 的用户名部分过滤的 purchase 查询集：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        This view should return a list of all the purchases for
        the user as determined by the username portion of the URL.
        &quot;&quot;&quot;</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),D={id:"根据查询参数进行过滤",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#根据查询参数进行过滤","aria-hidden":"true"},"#",-1),x={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4",title:"根据查询参数进行过滤",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>过滤初始查询集的最后一个例子是根据 url 中的查询参数确定初始查询集。</p><p>我们可以覆盖 <code>.get_queryset()</code> 来处理诸如 <code>http://example.com/api/purchases?username=denvercoder9</code> 的URL，并且只有在 URL 中包含 <code>username</code> 参数时才过滤查询集：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Optionally restricts the returned purchases to a given user,
        by filtering against a \`username\` query parameter in the URL.
        &quot;&quot;&quot;</span>
        queryset <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> username <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            queryset <span class="token operator">=</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">return</span> queryset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S={id:"通用过滤器",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#通用过滤器","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8",title:"通用过滤器",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"除了能够覆盖默认的查询集外，REST framework 还包括对通用过滤后端的支持，使你可以轻松构建复杂的搜索和过滤器。",-1),I=n("p",null,"通用过滤器也可以在可浏览的 API 和管理 API 中将自己渲染为 HTML 控件。",-1),O=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z={id:"设置过滤器后端",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#设置过滤器后端","aria-hidden":"true"},"#",-1),V={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%90%8E%E7%AB%AF",title:"设置过滤器后端",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>可以使用 <code>DEFAULT_FILTER_BACKENDS</code> setting <code>全局设置默认的过滤器后端</code>。例如。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用基于 <code>GenericAPIView</code> 类的视图，在每个视图或视图集的基础上设置过滤器后端。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters<span class="token punctuation">.</span>rest_framework
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics

<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),M={id:"过滤和对象查找",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#过滤和对象查找","aria-hidden":"true"},"#",-1),K={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%BF%87%E6%BB%A4%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%9F%A5%E6%89%BE",title:"过滤和对象查找",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>请注意，如果为一个视图配置了一个过滤器后端，那么除了用于筛选列表视图之外，它还将用于筛选返回单个对象的查询集。</p><p>例如，根据前面的示例以及 ID 为 <code>4675</code> 的产品，以下 URL 将返回相应的对象，或返回 404 响应，具体取决于给定产品实例是否满足过滤条件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>products<span class="token operator">/</span><span class="token number">4675</span><span class="token operator">/</span>?category<span class="token operator">=</span>clothing<span class="token operator">&amp;</span>max_price<span class="token operator">=</span><span class="token number">10.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Q={id:"覆盖初始查询集",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#覆盖初始查询集","aria-hidden":"true"},"#",-1),$={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%A6%86%E7%9B%96%E5%88%9D%E5%A7%8B%E6%9F%A5%E8%AF%A2%E9%9B%86",title:"覆盖初始查询集",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>请注意，你可以同时重写的 <code>.get_queryset()</code> 和通用过滤，并且所有内容都将按预期工作。例如，如果产品与用户具有多对多关系，则可能需要编写一个如下所示的视图：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchasedProductsList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Return a list of all the products that the authenticated
    user has ever purchased, with optional filtering.
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> Product
    serializer_class <span class="token operator">=</span> ProductSerializer
    filterset_class <span class="token operator">=</span> ProductFilter

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> user<span class="token punctuation">.</span>purchase_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Y={id:"过滤器api-参考",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#过滤器api-参考","aria-hidden":"true"},"#",-1),Z={href:"http://drf.jiuyou.info/#/drf/filtering?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},nn=t(`<h3 id="djangofilterbackend" tabindex="-1"><a class="header-anchor" href="#djangofilterbackend" aria-hidden="true">#</a> DjangoFilterBackend</h3><p><code>django-filter</code> 库包含一个 <code>DjangoFilterBackend</code> 类，它支持 REST framework 对字段过滤进行高度定制。</p><p>要使用 <code>DjangoFilterBackend</code>，首先安装 <code>django-filter</code>。然后将 <code>django_filters</code> 添加到 Django 的 <code>INSTALLED_APPS</code> 中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python <span class="token operator">-</span>m pip install django<span class="token operator">-</span><span class="token builtin">filter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后添加 <code>&#39;django_filters&#39;</code> 到 Django 的 <code>INSTALLED_APPS</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;django_filters&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你现在应该将过滤器后端添加到设置中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者将过滤器后端添加到单个视图或视图集。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend

<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你只需要简单的基于等式的过滤，则可以在视图或视图集上设置 <code>filter_fields</code> 属性，列出你要过滤的一组字段。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProductList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span>
    filterset_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将自动为给定字段创建一个 <code>FilterSet</code> 类，并允许你发出如下请求：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>products?category<span class="token operator">=</span>clothing<span class="token operator">&amp;</span>in_stock<span class="token operator">=</span><span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),sn=n("code",null,"FilterSet",-1),an={href:"https://django-filter.readthedocs.io/en/latest/index.html",title:"django-filter 文档",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"FilterSet",-1),tn={href:"https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html",title:"DRF integration",target:"_blank",rel:"noopener noreferrer"},on=t('<h3 id="searchfilter" tabindex="-1"><a class="header-anchor" href="#searchfilter" aria-hidden="true">#</a> SearchFilter</h3><p><code>SearchFilter</code> 类支持简单的基于单个查询参数的搜索，并且基于 Django 管理员的搜索功能。</p><p>在使用时，可浏览的 API 将包含一个 <code>SearchFilter</code> 控件：</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>SearchFilter</code> 类将仅在视图具有 <code>search_fields</code> 属性集的情况下应用。<code>search_fields</code> 属性应该是模型上文本类型字段的名称列表，例如 <code>CharField</code> 或 <code>TextField</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> filters

<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>
    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许客户端通过查询来过滤列表中的项目，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?search<span class="token operator">=</span>russell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你还可以使用查找 API 双下划线表示法对 ForeignKey 或 ManyToManyField 执行相关查找：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;profile__profession&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于 <code>JSONField</code> 和 <code>HStoreField</code> 字段, 您可以使用相同的双下划线符号根据数据结构内的嵌套值进行过滤(就是高级)：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;data__breed&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data__owner__other_pets__0__name&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>默认情况下，搜索将使用不区分大小写的部分匹配。搜索参数可能包含多个搜索词，它们应该是空格和（或）逗号分隔的。如果使用多个搜索条件，则只有在所有提供的条件匹配的情况下，对象才会返回到列表中。</p></blockquote><p>搜索行为可以通过将各种字符预先添加到 <code>search_fields</code> 来限制。</p><ul><li><code>^</code>：匹配起始部分。</li><li><code>=</code>：完全匹配。</li><li><code>@</code>：全文搜索。（目前只支持 Django 的 MySQL 后端。）</li><li><code>$</code>：正则匹配。</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;=username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=email&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>🐍默认情况下，搜索参数被命名为 <code>search</code> ，但这可能会被 <code>SEARCH_PARAM</code> 配置覆盖。</p></blockquote><p>要根据请求内容动态更改搜索字段, 可以对进行 <code>SearchFilter</code> 子类化并覆盖该 <code>get_search_fields()</code> 函数, 例如以下子类仅在查询参数 <code>title_only</code> 在请求中时才搜索 <code>title</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> filters

<span class="token keyword">class</span> <span class="token class-name">CustomSearchFilter</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_search_fields</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;title_only&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>CustomSearchFilter<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_search_fields<span class="token punctuation">(</span>view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),pn={href:"https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields",title:"Django 文档",target:"_blank",rel:"noopener noreferrer"},ln={id:"orderingfilter",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#orderingfilter","aria-hidden":"true"},"#",-1),cn={href:"http://drf.jiuyou.info/#/drf/filtering?id=orderingfilter",title:"OrderingFilter",target:"_blank",rel:"noopener noreferrer"},dn=t('<p><code>OrderingFilter</code> 类支持简单查询参数控制结果的排序。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>默认情况下，查询参数被命名为 <code>ordering</code>，但这可能会被 <code>ORDERING_PARAM</code> 配置覆盖。</p><p>例如，要通过 username 对用户排序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span>username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端也可以通过在字段名称前添加 <code>-</code> 来指定相反的顺序, 如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span><span class="token operator">-</span>username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以指定多个排序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span>account<span class="token punctuation">,</span>username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),un={id:"指定可以根据哪些字段进行排序",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#指定可以根据哪些字段进行排序","aria-hidden":"true"},"#",-1),hn={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E6%8C%87%E5%AE%9A%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F",title:"指定可以根据哪些字段进行排序",target:"_blank",rel:"noopener noreferrer"},mn=t(`<p>建议你明确指定 API 应该允许在排序过滤器中使用哪些字段。你可以通过在视图上设置一个 <code>ordering_fields</code> 属性来完成此操作，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">]</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这有助于防止意外的数据泄漏，例如：允许用户根据密码哈希字段或其他敏感数据进行排序。</p><p>如果你未在视图上指定 <code>ordering_fields</code> 属性，则过滤器类将默认允许用户过滤由 <code>serializer_class</code> 属性指定的序列化类中的任何可读字段。</p><p>如果你确信视图使用的查询集不包含任何敏感数据，则还可以通过使用特殊值 <code>&#39;__all__&#39;</code> 明确指定视图允许在任何模型字段或查询集聚合上进行排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookingsListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Booking<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> BookingSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">]</span>
    ordering_fields <span class="token operator">=</span> <span class="token string">&#39;__all__&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),vn={id:"指定默认顺序",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#指定默认顺序","aria-hidden":"true"},"#",-1),gn={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F",title:"指定默认顺序",target:"_blank",rel:"noopener noreferrer"},fn=t(`<p>如果在视图上设置了 <code>ordering</code> 属性，则将用作默认排序。</p><p>通常情况下，你应该通过在初始查询集上设置 <code>order_by</code> 来控制此操作，但是通过在视图上使用 <code>ordering</code> 参数，你可以指定排序方式，然后可以将其作为上下文自动传递到渲染的模板。这可以自动渲染列标题，如果它们用于排序结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">]</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
    ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ordering</code> 属性可以是一个字符串或者字符串列表（元组）。</p>`,4),bn={id:"djangoobjectpermissionsfilter",tabindex:"-1"},En=n("a",{class:"header-anchor",href:"#djangoobjectpermissionsfilter","aria-hidden":"true"},"#",-1),yn={href:"http://drf.jiuyou.info/#/drf/filtering?id=djangoobjectpermissionsfilter",title:"DjangoObjectPermissionsFilter",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"DjangoObjectPermissionsFilter",-1),Bn={href:"https://django-guardian.readthedocs.io/",title:"django-guardian",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"'view'",-1),wn=t("<p>如果你使用的是 <code>DjangoObjectPermissionsFilter</code>，那么你可能还需要添加适当的对象权限类，以确保用户只有在具有适当对象权限的情况下才能对实例进行操作。做到这一点的最简单方法是继承 <code>DjangoObjectPermissions</code> 并为 <code>perms_map</code> 属性添加 <code>&#39;view&#39;</code> 权限。</p><p>使用 <code>DjangoObjectPermissionsFilter</code> 和 <code>DjangoObjectPermissions</code> 的完整示例可能如下所示。</p>",2),Fn={href:"http://permissions.py",title:"permissions.py",target:"_blank",rel:"noopener noreferrer"},qn=n("strong",null,"permissions.py",-1),Dn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomObjectPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>DjangoObjectPermissions<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Similar to \`DjangoObjectPermissions\`, but adding &#39;view&#39; permissions.
    &quot;&quot;&quot;</span>
    perms_map <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;OPTIONS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;HEAD&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.add_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.change_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PATCH&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.change_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.delete_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Pn={href:"http://views.py",title:"views.py",target:"_blank",rel:"noopener noreferrer"},xn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">EventViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Viewset that only lists events if user has &#39;view&#39; permissions, and only
    allows operations on individual events if user has appropriate &#39;view&#39;, &#39;add&#39;,
    &#39;change&#39; or &#39;delete&#39; permissions.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Event<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> EventSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>DjangoObjectPermissionsFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>myapp<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span>CustomObjectPermissions<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ln={id:"自定义通用过滤器",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#自定义通用过滤器","aria-hidden":"true"},"#",-1),Rn={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8",title:"自定义通用过滤器",target:"_blank",rel:"noopener noreferrer"},Tn=n("p",null,"你还可以提供自己的通用过滤器后端，或者编写一个可供其他开发人员使用的可安装应用程序。",-1),Un=n("p",null,[s("为此，请继承 "),n("code",null,"BaseFilterBackend"),s("，并覆盖 "),n("code",null,".filter_queryset(self, request, queryset, view)"),s(" 方法。该方法应该返回一个新的，过滤的查询集。")],-1),In=n("p",null,"除了允许客户端执行搜索和过滤外，通用过滤器后端可用于限制哪些对象应该对给定的请求或用户可见。",-1),On={id:"举个栗子",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),Cn={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},Vn=t(`<p>你可能需要限制用户只能看到他们创建的对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">IsOwnerFilterBackend</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>BaseFilterBackend<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Filter that only allows users to see their own objects.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>owner<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Nn={id:"自定义接口",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#自定义接口","aria-hidden":"true"},"#",-1),Hn={href:"http://drf.jiuyou.info/#/drf/filtering?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3",title:"自定义接口",target:"_blank",rel:"noopener noreferrer"},Kn=n("p",null,[s("通用过滤器也可以在可浏览的 API 中渲染接口。为此，你应该实现一个 "),n("code",null,"to_html()"),s(" 方法，该方法返回过滤器的渲染 HTML 表示。此方法应具有以下签名：")],-1),Gn=n("p",null,[n("code",null,"to_html(self, request, queryset, view)")],-1),Qn=n("p",null,"该方法应该返回一个渲染的 HTML 字符串。",-1),Wn={id:"pagination-schemas",tabindex:"-1"},$n=n("a",{class:"header-anchor",href:"#pagination-schemas","aria-hidden":"true"},"#",-1),Jn={href:"http://drf.jiuyou.info/#/drf/filtering?id=pagination-amp-schemas",title:"Pagination & schemas",target:"_blank",rel:"noopener noreferrer"},Yn=t('<p>通过实现 <code>get_schema_fields()</code> 方法，你还可以使过滤器控件可用于 REST framework 提供的模式自动生成。此方法应具有以下签名：</p><p><code>get_schema_fields(self, view)</code></p><p>该方法应该返回一个 <code>coreapi.Field</code> 实例列表。</p><h2 id="第三方库" tabindex="-1"><a class="header-anchor" href="#第三方库" aria-hidden="true">#</a> 第三方库</h2><h3 id="django-rest框架过滤器软件包" tabindex="-1"><a class="header-anchor" href="#django-rest框架过滤器软件包" aria-hidden="true">#</a> Django REST框架过滤器软件包</h3>',5),Xn={href:"https://link.juejin.cn/?target=https://github.com/philipn/django-rest-framework-filters",title:"Django 框架过滤器",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"DjangoFilterBackend",-1),ns=n("h3",{id:"django-rest框架全字搜索过滤器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#django-rest框架全字搜索过滤器","aria-hidden":"true"},"#"),s(" Django REST框架全字搜索过滤器")],-1),ss={href:"https://link.juejin.cn/?target=https://github.com/trollknurr/django-rest-framework-word-search-filter",title:"djangorestframework-word-filter",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"filter.SearchFilter",-1),es=n("h3",{id:"django-url过滤器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#django-url过滤器","aria-hidden":"true"},"#"),s(" Django URL过滤器")],-1),ts={href:"https://link.juejin.cn/?target=https://github.com/miki725/django-url-filter",title:"django-url-filter",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"filtersets",-1),is=n("code",null,"filters",-1),ps=n("code",null,"QuerySet",-1),ls=n("h3",{id:"drf-url-filters",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#drf-url-filters","aria-hidden":"true"},"#"),s(" drf-url-filters")],-1),rs={href:"https://link.juejin.cn/?target=https://github.com/manjitkumar/drf-url-filters",title:"DRF-URL-Filters",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"drfmodelviewset",-1),ds=n("code",null,"Queryset",-1),us=n("code",null,"Voluptuous",-1),ks=n("code",null,"Voluptuous",-1);function hs(ms,vs){const a=i("ExternalLinkIcon");return p(),l("div",null,[k,n("blockquote",null,[n("p",null,[n("a",h,[s("官方原文链接"),e(a)])])]),n("h1",m,[v,s(),n("a",_,[s("过滤"),e(a)])]),g,f,b,n("h2",E,[y,s(),n("a",A,[s("根据当前用户进行过滤"),e(a)])]),B,n("h2",j,[w,s(),n("a",F,[s("根据 URL 进行过滤"),e(a)])]),q,n("h2",D,[P,s(),n("a",x,[s("根据查询参数进行过滤"),e(a)])]),L,n("h1",S,[R,s(),n("a",T,[s("通用过滤器"),e(a)])]),U,I,O,n("h2",z,[C,s(),n("a",V,[s("设置过滤器后端"),e(a)])]),N,n("h2",M,[H,s(),n("a",K,[s("过滤和对象查找"),e(a)])]),G,n("h2",Q,[W,s(),n("a",$,[s("覆盖初始查询集"),e(a)])]),J,n("h1",Y,[X,s(" 过滤器"),n("a",Z,[s("API 参考"),e(a)])]),nn,n("p",null,[s("对于更高级的过滤要求，你应该在视图上在指定 "),sn,s(" 类。你可以在 "),n("a",an,[s("django-filter 文档"),e(a)]),s("中阅读有关 "),en,s(" 的更多信息。还建议你阅读 "),n("a",tn,[s("DRF integration"),e(a)]),s("。")]),on,n("blockquote",null,[n("p",null,[s("有关更多详细信息，请参阅 "),n("a",pn,[s("Django 文档"),e(a)]),s("。")])]),n("h2",ln,[rn,s(),n("a",cn,[s("OrderingFilter"),e(a)])]),dn,n("h3",un,[kn,s(),n("a",hn,[s("指定可以根据哪些字段进行排序"),e(a)])]),mn,n("h3",vn,[_n,s(),n("a",gn,[s("指定默认顺序"),e(a)])]),fn,n("h2",bn,[En,s(),n("a",yn,[s("DjangoObjectPermissionsFilter"),e(a)])]),n("p",null,[An,s(" 旨在与 "),n("a",Bn,[s("django-guardian"),e(a)]),s(" 软件包一起使用，添加了自定义 "),jn,s(" 的权限。过滤器将确保查询集仅返回用户具有适当查看权限的对象。")]),wn,n("p",null,[n("a",Fn,[qn,e(a)]),s(":")]),Dn,n("p",null,[n("a",Pn,[s("views.py"),e(a)]),s(":")]),xn,n("h1",Ln,[Sn,s(),n("a",Rn,[s("自定义通用过滤器"),e(a)])]),Tn,Un,In,n("h2",On,[zn,s(),n("a",Cn,[s("举个栗子"),e(a)])]),Vn,n("h2",Nn,[Mn,s(),n("a",Hn,[s("自定义接口"),e(a)])]),Kn,Gn,Qn,n("h2",Wn,[$n,s(),n("a",Jn,[s("Pagination & schemas"),e(a)])]),Yn,n("p",null,[s("在 "),n("a",Xn,[s("Django 框架过滤器"),e(a)]),s("封装与 "),Zn,s(" 类一起工作, 并允许您轻松地在跨关系的创建过滤器, 或在指定字段创建多个过滤器查找类型。")]),ns,n("p",null,[n("a",ss,[s("djangorestframework-word-filter"),e(a)]),s("作为 "),as,s(" 替代品, 它将在文本中搜索完整的单词或完全匹配。")]),es,n("p",null,[n("a",ts,[s("django-url-filter"),e(a)]),s(" 提供了一种通过友好的 url 过滤数据的安全方法, 它的工作原理与 DRF 序列化程序和字段非常相似, 在某种意义上它们可以嵌套, 但它们被称为 "),os,s("和 "),is,s(", 这提供了过滤相关数据的简单方法, 而且这个库也是通用的, 所以它可以用来过滤其他数据源, 而不仅仅是 Django "),ps,s("。")]),ls,n("p",null,[n("a",rs,[s("DRF-URL-Filters"),e(a)]),s(" 是一个简单的 Django 应用程序, 它以干净、简单和可配置的方式在 "),cs,s(" 的 "),ds,s(" 上应用过滤器, 它还支持对传入查询参数的验证, 一个漂亮的 python 包 "),us,s(" 用于对传入的查询参数进行验证, 关于 "),ks,s(" 的最好的部分是您可以根据查询参数要求定义自己的验证。")])])}const fs=o(u,[["render",hs],["__file","Rest-framework专栏讲解(十九)：Filtering.html.vue"]]);export{fs as default};
