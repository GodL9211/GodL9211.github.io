import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as d,c,a as e,b as a,e as r,f as n}from"./app-967d79b2.js";const p={},i=n('<h1 id="rest-framework专栏讲解-六-response" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-六-response" aria-hidden="true">#</a> Rest-framework专栏讲解(六)：Response</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li><li><a href="#Response">Response</a></li><li><a href="#%E5%88%9B%E5%BB%BA-response">创建 response</a></li><li><a href="#%E5%B1%9E%E6%80%A7">属性</a><ul><li><a href="#data">.data</a></li><li><a href="#status_code">.status_code</a></li><li><a href="#content">.content</a></li><li><a href="#template_name">.template_name</a></li><li><a href="#accepted_renderer">.accepted_renderer</a></li><li><a href="#accepted_media_type">.accepted_media_type</a></li><li><a href="#renderer_context">.renderer_context</a></li></ul></li><li><a href="#%E6%A0%87%E5%87%86-HttpResponse-%E5%B1%9E%E6%80%A7">标准 HttpResponse 属性</a><ul><li><a href="#rander">rander()</a></li></ul></li></ul><hr>',4),h={id:"点击跳转到-rest-framework-专栏目录",tabindex:"-1"},l=e("a",{class:"header-anchor",href:"#点击跳转到-rest-framework-专栏目录","aria-hidden":"true"},"#",-1),_={href:"https://juejin.cn/post/6844904185163415566",title:"点击跳转到 Rest-Framework 专栏目录",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.django-rest-framework.org/api-guide/responses/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},u={id:"response",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#response","aria-hidden":"true"},"#",-1),R={href:"http://drf.jiuyou.info/#/drf/responses?id=responses",title:"Response",target:"_blank",rel:"noopener noreferrer"},k=n("<blockquote><p>与基本的 HttpResponse 对象不同，TemplateResponse 对象保留了视图提供的用于计算响应的上下文的详细信息。直到需要时才会计算最终的响应输出，也就是在后面的响应过程中进行计算。 — <em>Django 文档</em></p></blockquote><p>REST framework 通过提供一个 <code>Response</code> 类来支持 HTTP 内容协商，该类允许你根据客户端请求返回不同的表现形式（如： JSON ，HTML 等）。</p><p><code>Response</code> 是 Django 的 <code>SimpleTemplateResponse</code> 的子类。<code>Response</code> 对象使用数据进行初始化，数据应由 Python 对象（native Python primitives）组成。然后 REST framework 使用标准的 HTTP 内容协商来确定它应该如何渲染最终响应的内容。</p><p>当然，您也可以不使用 <code>Response</code> 类，直接返回常规 <code>HttpResponse</code> 或 <code>StreamingHttpResponse</code> 对象。 使用 <code>Response</code> 类只是提供了一个更好的交互方式，它可以返回多种格式。</p><p>除非由于某种原因需要大幅度定制 REST framework ，否则应该始终对返回 <code>Response</code> 对象的视图使用 <code>APIView</code> 类或 <code>@api_view</code> 装饰器。这样做可以确保视图执行内容协商，并在视图返回之前为响应选择适当的渲染器。</p>",5),E={id:"创建-response",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#创建-response","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/responses?id=%E5%88%9B%E5%BB%BA-response",title:"创建 response",target:"_blank",rel:"noopener noreferrer"},x=n(`<p>与普通 <code>HttpResponse</code> 对象不同，您不会使用渲染的内容实例化 <code>Response</code> 对象。相反，您传递的是未渲染的数据，可能包含任何 Python 对象。</p><p>由于 <code>Response</code> 类使用的渲染器不能处理复杂的数据类型（比如 Django 的模型实例），所以需要在创建 <code>Response</code> 对象之前将数据序列化为基本的数据类型。</p><p>你可以使用 REST framework 的 <code>Serializer</code> 类来执行序列化的操作，也可以用自己的方式来序列化。</p><p>当你需要自定义返回响应对象的时候, 你可能需要用到 <code>Response</code> 类, 你只需要从框架中导入到需要的服务模块中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构造方法: <code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p><p>实例化对象你可能需要以下参数：</p><ul><li><code>data</code>：响应的序列化数据。</li><li><code>status</code>：响应的状态码，默认为200。</li><li><code>template_name</code>：选择 <code>HTMLRenderer</code> 时使用的模板名称。</li><li><code>headers</code>：设置响应中需要添加的 HTTP header，字典类型。</li><li><code>content_type</code>：响应内容的类型, 通常会自动设置, 但有些时候需要手动指定。</li></ul>`,8),B={id:"属性",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#",-1),v={href:"http://drf.jiuyou.info/#/drf/responses?id=%E5%B1%9E%E6%80%A7",title:"属性",target:"_blank",rel:"noopener noreferrer"},y=n('<h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> .data</h3><p>获取响应实例对象的序列化数据。</p><p>还没有渲染，但已经序列化的响应数据。</p><h3 id="status-code" tabindex="-1"><a class="header-anchor" href="#status-code" aria-hidden="true">#</a> .status_code</h3><p>获取响应实例的状态码。</p><h3 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> .content</h3><p>当你优先调用了 <code>.render()</code> 方法后, 你可以使用该属性获取响应呈现的内容数据。</p><h3 id="template-name" tabindex="-1"><a class="header-anchor" href="#template-name" aria-hidden="true">#</a> .template_name</h3><p>当你使用了模板渲染器的时候, 可以使用该属性访问模板名称。</p><p>只有在 response 的渲染器是 <code>HTMLRenderer</code> 或其他自定义模板渲染器时才需要提供。</p><h3 id="accepted-renderer" tabindex="-1"><a class="header-anchor" href="#accepted-renderer" aria-hidden="true">#</a> .accepted_renderer</h3><p>用于呈现响应的实例对象。</p><p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p><h3 id="accepted-media-type" tabindex="-1"><a class="header-anchor" href="#accepted-media-type" aria-hidden="true">#</a> .accepted_media_type</h3><p>用于获取数据内容的类型。</p><p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p><h3 id="renderer-context" tabindex="-1"><a class="header-anchor" href="#renderer-context" aria-hidden="true">#</a> .renderer_context</h3><p>附加上下文信息的字典数据, 该字典将传递给渲染器的 <code>.render()</code> 方法。</p><p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p>',19),T={id:"标准-httpresponse-属性",tabindex:"-1"},A=e("a",{class:"header-anchor",href:"#标准-httpresponse-属性","aria-hidden":"true"},"#",-1),H={href:"http://drf.jiuyou.info/#/drf/responses?id=%E6%A0%87%E5%87%86-httpresponse-%E5%B1%9E%E6%80%A7",title:"标准 HttpResponse 属性",target:"_blank",rel:"noopener noreferrer"},j=n(`<p><code>Response</code> 类扩展于 <code>SimpleTemplateResponse</code>，并且响应中也提供了所有常用的属性和方法。例如，您可以用标准方式在响应中设置 header：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> Response<span class="token punctuation">(</span><span class="token punctuation">)</span>
response<span class="token punctuation">[</span><span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;no-cache&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rander" tabindex="-1"><a class="header-anchor" href="#rander" aria-hidden="true">#</a> rander()</h3><p>与任何的 <code>TemplateResponse</code> 方法一样, 调用此方法可将响应的序列化数据呈现为最终响应内容, 当 <code>.render()</code> 被调用时, 响应内容将被设置为 <code>.render(data, accepted_media_type, renderer_context)</code> 对 <code>accepted_renderer</code> 实例调用的结果。</p><p>通常不需要自己调用 <code>.render()</code> ，因为它是由 Django 处理的。</p>`,5);function P(S,N){const o=t("ExternalLinkIcon");return d(),c("div",null,[i,e("h4",h,[l,a(),e("a",_,[a("点击跳转到 Rest-Framework 专栏目录"),r(o)])]),e("blockquote",null,[e("p",null,[e("a",f,[a("官方原文链接"),r(o)])])]),e("h2",u,[m,a(),e("a",R,[a("Response"),r(o)])]),k,e("h2",E,[b,a(),e("a",w,[a("创建 response"),r(o)])]),x,e("h2",B,[g,a(),e("a",v,[a("属性"),r(o)])]),y,e("h2",T,[A,a(),e("a",H,[a("标准 HttpResponse 属性"),r(o)])]),j])}const F=s(p,[["render",P],["__file","Rest-framework专栏讲解(六)：Response.html.vue"]]);export{F as default};
