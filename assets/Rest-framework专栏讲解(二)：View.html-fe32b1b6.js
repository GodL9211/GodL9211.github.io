import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,e,f as t}from"./app-967d79b2.js";const l={},r=t('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-rest-framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E8%A7%86%E5%9B%BE">基于类的视图</a><ul><li><a href="#apiview">APIView</a></li><li><a href="#api-%E7%AD%96%E7%95%A5%E5%B1%9E%E6%80%A7policy-attributes">API 策略属性（policy attributes）</a></li><li><a href="#api-%E7%AD%96%E7%95%A5%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95policy-instantiation-methods">API 策略实例方法（policy instantiation methods）</a></li><li><a href="#api-%E7%AD%96%E7%95%A5%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95policy-implementation-methods">API 策略实现方法（policy implementation methods）</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%B0%83%E5%BA%A6">方法调度</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8E%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%86%E5%9B%BE">基于方法的视图</a><ul><li><a href="#api_view">@api_view()</a></li><li><a href="#api-%E7%AD%96%E7%95%A5%E8%A3%85%E9%A5%B0%E5%99%A8-policy-decorators">API 策略装饰器 (policy decorators)</a></li><li><a href="#view-schema-%E8%A3%85%E9%A5%B0%E5%99%A8">View schema 装饰器</a></li></ul></li><li><a href="#%E6%8E%A8%E8%8D%90">推荐</a><ul><li><a href="#%E7%A4%BA%E4%BE%8B">示例</a></li></ul></li></ul><hr>',3),u={id:"点击跳转到-rest-framework-专栏目录",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#点击跳转到-rest-framework-专栏目录","aria-hidden":"true"},"#",-1),k={href:"https://juejin.cn/post/6844904185163415566",title:"点击跳转到 Rest-Framework 专栏目录",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.django-rest-framework.org/api-guide/views/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[s("在我们了解的 "),n("code",null,"MVC"),s(" 模式和 "),n("code",null,"MVT"),s(" 模式中, 都有提到 "),n("code",null,"View"),s(" 视图, 它是提供接口服务和逻辑的代码, 例如在 Django 项目中经常会定义各种 "),n("code",null,"class UserLoginViewSet(...)"),s(" 或者是 "),n("code",null,"def user_login(request, *args, **kwargs)"),s(", 这类的都是后端服务定义的视图类或者函数, 在 URL 对象中注册他们, 就可以实现一个逻辑 API 接口。")],-1),v={id:"基于类的视图",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#基于类的视图","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/views?id=%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E8%A7%86%E5%9B%BE",title:"基于类的视图",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>REST framework 提供了一个 <code>APIView</code> 类，它继承于 Django 的 <code>View</code> 类。</p><p><code>APIView</code> 类与不同的 <code>View</code> 类有所不同：</p><ul><li>传递给处理方法的 request 对象是 REST framework 的 <code>Request</code> 实例，而不是 Django 的 <code>HttpRequest</code> 实例。</li><li>处理方法可能返回 REST framework 的 <code>Response</code>，而不是 Django 的 <code>HttpResponse</code> 。该视图将管理内容协商，并在响应中设置正确的渲染器。</li><li>任何 <code>APIException</code> 异常都会被捕获并进行适当的响应。</li><li>传入的请求会进行认证，在请求分派给处理方法之前将进行适当的权限检查（允许或限制）。</li></ul><p>像往常一样，使用 <code>APIView</code> 类与使用常规 <code>View</code> 类非常相似，传入的请求被分派到适当的处理方法，如 <code>.get()</code> 或<code>.post()</code>。此外，可以在类上设置许多属性（AOP）。</p><p>举个栗子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication<span class="token punctuation">,</span> permissions
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User

<span class="token keyword">class</span> <span class="token class-name">ListUsers</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    列出系统中的所有用户

    * 需要 token 认证。
    * 只有 admin 用户才能访问此视图。
    &quot;&quot;&quot;</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>TokenAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Return a list of all users.
        &quot;&quot;&quot;</span>
        usernames <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username <span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>usernames<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g=n("code",null,"APIView",-1),b=n("code",null,"GenericAPIView",-1),E=n("code",null,"Mixins",-1),y=n("code",null,"Viewsets",-1),A={href:"http://www.cdrf.co/",title:"Classy Django REST Framework",target:"_blank",rel:"noopener noreferrer"},q=t(`<h3 id="apiview" tabindex="-1"><a class="header-anchor" href="#apiview" aria-hidden="true">#</a> APIView</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View


<span class="token keyword">class</span> <span class="token class-name">MedusaView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次接触到 Django 框架的时候知道的视图类, 我们在定义一个试图类的时候仅仅需要继承他, 当你需要实现 <code>GET</code> 请求的时候, 你就在你定义的 class 里面实现 <code>def get(self, request, *args, **kwargs)</code> 方法, 当然 <code>POST</code>、<code>DELETE</code>、<code>PUT</code>等方法都一样, 只要你在试图里定义它, 并返回一个 Response 对象给他。但是使用 rest-framework 的时候, 我们都会使用 <code>APIView</code> 的继承父类,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">MedusaViewSet</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你去看了 <code>APIView</code> 的定义, 不难发现它也是继承了 <code>View</code> 实现的, 但是在 <code>View</code> 的基础上拓展了很多方法(功能), 我们在定义视图的时候更加方便的获取我们需要的数据, 返回我们需要数据。并且任何 <code>exceptions</code> 的异常信息都会以一种响应状态码的方式返回, 你也可以重写 <code>handle_exception(self, exc)</code> 方法进行自定义错误处理函数响应。例如你在获取请求参数的时候可以用 <code>request.data.get(&quot;params&quot;)</code> 来获取 <code>json</code> 请求参数体, 你也可以通过 <code>request.query_params.get(&quot;params&quot;)</code> 来获取 URL 参数, 等价于 <code>request.GET.get(&quot;params&quot;)</code>, 具体会在 <strong>Request</strong> 章节讲到。</p>`,5),B={id:"api-策略属性-policy-attributes",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#api-策略属性-policy-attributes","aria-hidden":"true"},"#",-1),R={href:"http://drf.jiuyou.info/#/drf/views?id=api-%E7%AD%96%E7%95%A5%E5%B1%9E%E6%80%A7%EF%BC%88policy-attributes%EF%BC%89",title:"API 策略属性（policy attributes）",target:"_blank",rel:"noopener noreferrer"},T=t("<p>以下属性用于增加扩展视图的功能，AOP。</p><p>.renderer_classes <br> 设置渲染器</p><p>.parser_classes <br> 设置解析器</p><p>.authentication_classes <br> 设置认证器</p><p>.throttle_classes</p><p>.permission_classes <br> 设置权限验证器</p><p>.content_negotiation_class</p>",7),x={id:"api-策略实例方法-policy-instantiation-methods",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#api-策略实例方法-policy-instantiation-methods","aria-hidden":"true"},"#",-1),I={href:"http://drf.jiuyou.info/#/drf/views?id=api-%E7%AD%96%E7%95%A5%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%88policy-instantiation-methods%EF%BC%89",title:"API 策略实例方法（policy instantiation methods）",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"以下策略实例方法通常不需要我们重写。",-1),D=n("p",null,".get_renderers(self)",-1),S=n("p",null,".get_parsers(self)",-1),F=n("p",null,".get_authenticators(self)",-1),U=n("p",null,".get_throttles(self)",-1),C=n("p",null,".get_permissions(self)",-1),H=n("p",null,".get_content_negotiator(self)",-1),N=n("p",null,".get_exception_handler(self)",-1),O={id:"api-策略实现方法-policy-implementation-methods",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#api-策略实现方法-policy-implementation-methods","aria-hidden":"true"},"#",-1),M={href:"http://drf.jiuyou.info/#/drf/views?id=api-%E7%AD%96%E7%95%A5%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%EF%BC%88policy-implementation-methods%EF%BC%89",title:"API 策略实现方法（policy implementation methods）",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"在分派到处理方法之前会调用以下方法。",-1),z=n("p",null,".check_permissions(self, request)",-1),K=n("p",null,".check_throttles(self, request)",-1),W=n("p",null,".perform_content_negotiation(self, request, force=False)",-1),J={id:"方法调度",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#方法调度","aria-hidden":"true"},"#",-1),X={href:"http://drf.jiuyou.info/#/drf/views?id=%E6%96%B9%E6%B3%95%E8%B0%83%E5%BA%A6",title:"方法调度",target:"_blank",rel:"noopener noreferrer"},Y=t("<p>以下方法由视图的 <code>.dispatch()</code> 方法直接调用。它们在调用处理方法（<code>.get()</code>, <code>.post()</code>, <code>put()</code>, <code>patch()</code> 和 <code>.delete()</code>）之前或者之后被调用。</p><p>**.initial(self, request, *args, <strong>kwargs)</strong></p><p>用于执行处理方法被调用之前需要的任何操作。此方法用于强制执行权限和限流，并执行内容协商。</p><p><strong>.handle_exception(self, exc)</strong></p><p>处理方法抛出的任何异常都将传递给此方法，该方法返回一个 <code>Response</code> 实例，或者重新引发异常。</p><p>默认实现处理 <code>rest_framework.exceptions.APIException</code> 的任何子类，以及 Django 的 <code>Http404</code> 和<code>PermissionDenied</code> 异常，并返回相应的错误响应。</p><p>如果需要自定义 API 返回的错误响应，应该重写此方法。</p><p>**.initialize_request(self, request, *args, <strong>kwargs)</strong></p><p>确保传递给处理方法的请求对象是 <code>Request</code> 的一个实例，而不是通常的 Django <code>HttpRequest</code>。</p><p>通常不需要重写此方法。</p><p>**.finalize_response(self, request, response, *args, <strong>kwargs)</strong></p><p>确保从处理方法返回的任何 <code>Response</code> 对象将被呈现为正确的内容类型，这由内容协商确定。</p><p>通常不需要重写此方法。</p>",13),Z={id:"基于方法的视图",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#基于方法的视图","aria-hidden":"true"},"#",-1),nn={href:"http://drf.jiuyou.info/#/drf/views?id=%E5%9F%BA%E4%BA%8E%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%86%E5%9B%BE",title:"基于方法的视图",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,[s("REST framework 也允许使用基于函数的视图。它提供了一套简单的装饰器来包装你的函数视图，以确保它们接收 "),n("code",null,"Request"),s("（而不是 Django "),n("code",null,"HttpRequest"),s("）实例并允许它们返回 "),n("code",null,"Response"),s("（而不是 Django "),n("code",null,"HttpResponse"),s("），并允许你配置该请求的处理方式。")],-1),an={id:"api-view",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#api-view","aria-hidden":"true"},"#",-1),tn={href:"http://drf.jiuyou.info/#/drf/views?id=api_view",title:"@api_view()",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>签名：<code>@api_view(http_method_names=[&#39;GET&#39;])</code></p><p><code>api_view</code> 是一个装饰器，用 <code>http_method_names</code> 来设置视图允许响应的 HTTP 方法列表，举个栗子，编写一个简单的视图，手动返回一些数据。</p><p>如果你习惯了函数视图的方式, 也给予了你装饰器修饰函数的方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该视图将使用 <code>settings</code> 中指定的默认渲染器，解析器，认证类等。</p><p>默认情况下，只有 <code>GET</code> 方法会被接受。其他方法将以 <code>&quot;405 Method Not Allowed&quot;</code> 进行响应。要改变这种行为，请指定视图允许的方法，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Got some data!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),pn={id:"api-策略装饰器-policy-decorators",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#api-策略装饰器-policy-decorators","aria-hidden":"true"},"#",-1),ln={href:"http://drf.jiuyou.info/#/drf/views?id=api-%E7%AD%96%E7%95%A5%E8%A3%85%E9%A5%B0%E5%99%A8-policy-decorators",title:"API 策略装饰器 (policy decorators)",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>为了覆盖默认设置，REST framework 提供了一系列可以添加到视图中的附加装饰器。这些必须在 <code>@api_view</code> 装饰器之后（下方）。例如，要创建一个使用 <code>throttle</code> 来确保它每天只能由特定用户调用一次的视图，请使用 <code>@throttle_classes</code> 装饰器，传递一个 <code>throttle</code> 类列表：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> throttle_classes
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle

<span class="token keyword">class</span> <span class="token class-name">OncePerDayUserThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
        rate <span class="token operator">=</span> <span class="token string">&#39;1/day&#39;</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@throttle_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>OncePerDayUserThrottle<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello for today! See you tomorrow!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些装饰器对应于 <code>APIView</code> 上设置的策略属性。</p><p>可用的装饰器有：</p><ul><li><code>@renderer_classes(...)</code></li><li><code>@parser_classes(...)</code></li><li><code>@authentication_classes(...)</code></li><li><code>@throttle_classes(...)</code></li><li><code>@permission_classes(...)</code></li></ul><p>每个装饰器都有一个参数，它必须是一个类列表或者一个类元组。</p>`,6),un={id:"view-schema-装饰器",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#view-schema-装饰器","aria-hidden":"true"},"#",-1),kn={href:"http://drf.jiuyou.info/#/drf/views?id=view-schema-%E8%A3%85%E9%A5%B0%E5%99%A8",title:"View schema 装饰器",target:"_blank",rel:"noopener noreferrer"},mn=t(`<p>要覆盖函数视图的默认 模式生成（schema generation），可以使用 <code>@schema</code> 装饰器。这必须在 <code>@api_view</code> 装饰器之后（下方）。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> schema
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> AutoSchema

<span class="token keyword">class</span> <span class="token class-name">CustomAutoSchema</span><span class="token punctuation">(</span>AutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_link</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> base_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># override view introspection here...</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@schema</span><span class="token punctuation">(</span>CustomAutoSchema<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello for today! See you tomorrow!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),hn=n("code",null,"AutoSchema",-1),vn=n("code",null,"AutoSchema",-1),_n=n("code",null,"ManualSchema",-1),wn={href:"http://www.django-rest-framework.org/api-guide/schemas/",title:"Schemas 文档",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"None",-1),gn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@schema</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Will not appear in schema!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐" aria-hidden="true">#</a> 推荐</h2><p>当然, 笔者还是认为<code>类视图更加具有规范性</code>。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> views<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status


<span class="token keyword">class</span> <span class="token class-name">Medusa</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function bn(En,yn){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,n("h4",u,[d,s(),n("a",k,[s("点击跳转到 Rest-Framework 专栏目录"),e(a)])]),n("p",null,[n("a",m,[s("官方原文链接"),e(a)])]),h,n("h2",v,[_,s(),n("a",w,[s("基于类的视图"),e(a)])]),f,n("p",null,[s("注意：REST Framework 中的 "),g,s("，"),b,s("，各种 "),E,s(" 和 "),y,s(" 包含许多方法和属性，刚开始要全部理解是比较困难的。这里除了文档，有一个 "),n("a",A,[s("Classy Django REST Framework"),e(a)]),s(" 资源，它提供了一个可以在线浏览的参照，包含所有属性和方法。")]),q,n("h3",B,[P,s(),n("a",R,[s("API 策略属性（policy attributes）"),e(a)])]),T,n("h3",x,[V,s(),n("a",I,[s("API 策略实例方法（policy instantiation methods）"),e(a)])]),j,D,S,F,U,C,H,N,n("h3",O,[G,s(),n("a",M,[s("API 策略实现方法（policy implementation methods）"),e(a)])]),L,z,K,W,n("h3",J,[Q,s(),n("a",X,[s("方法调度"),e(a)])]),Y,n("h2",Z,[$,s(),n("a",nn,[s("基于方法的视图"),e(a)])]),sn,n("h3",an,[en,s(),n("a",tn,[s("@api_view()"),e(a)])]),on,n("h3",pn,[cn,s(),n("a",ln,[s("API 策略装饰器 (policy decorators)"),e(a)])]),rn,n("h3",un,[dn,s(),n("a",kn,[s("View schema 装饰器"),e(a)])]),mn,n("p",null,[s("该装饰器将采用一个 "),hn,s(" 实例，一个 "),vn,s(" 子类实例或 "),_n,s(" 实例，如 "),n("a",wn,[s("Schemas 文档"),e(a)]),s("（先放官链）中所述。您也可以传 "),fn,s(" 以从 模式生成（schema generation） 中排除视图。")]),gn])}const Bn=o(l,[["render",bn],["__file","Rest-framework专栏讲解(二)：View.html.vue"]]);export{Bn as default};
