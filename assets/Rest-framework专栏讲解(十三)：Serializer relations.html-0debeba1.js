import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,e,f as t}from"./app-7702e136.js";const c={},r=t('<h1 id="rest-framework专栏讲解-十三-serializer-relations" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十三-serializer-relations" aria-hidden="true">#</a> Rest-framework专栏讲解(十三)：Serializer relations</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#Serializer-%E5%85%B3%E7%B3%BB">Serializer 关系</a><ul><li><a href="#%E6%A3%80%E6%9F%A5%E5%85%B3%E7%B3%BB">检查关系。</a></li></ul></li><li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#StringRelatedField">StringRelatedField</a></li><li><a href="#PrimaryKeyRelatedField">PrimaryKeyRelatedField</a></li><li><a href="#HyperlinkedRelatedField">HyperlinkedRelatedField</a></li><li><a href="#SlugRelatedField">SlugRelatedField</a></li><li><a href="#HyperlinkedIdentityField">HyperlinkedIdentityField</a></li><li><a href="#%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BBNested-relationships">嵌套关系(Nested relationships)</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a><ul><li><a href="#%E5%8F%AF%E5%86%99%E7%9A%84%E5%B5%8C%E5%A5%97-serializerWritable-nested-serializers">可写的嵌套 serializer(Writable nested serializers)</a></li></ul></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5">自定义关系字段</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AD%97%E6%AE%B5">自定义超链接字段</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li><li><a href="#%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AF%B4%E6%98%8E">进一步说明</a><ul><li><a href="#queryset-%E5%8F%82%E6%95%B0">queryset 参数</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-HTML-%E6%98%BE%E7%A4%BA">自定义 HTML 显示</a></li><li><a href="#Select-field-cutoffs">Select field cutoffs</a></li><li><a href="#%E5%8F%8D%E5%90%91%E5%85%B3%E7%B3%BB">反向关系</a></li><li><a href="#%E9%80%9A%E7%94%A8%E5%85%B3%E7%B3%BB">通用关系</a></li><li><a href="#%E5%85%B7%E6%9C%89-Through-%E6%A8%A1%E5%9E%8B%E7%9A%84-ManyToManyFields">具有 Through 模型的 ManyToManyFields</a></li></ul></li></ul><hr>',4),u={href:"http://www.django-rest-framework.org/api-guide/relations/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},d={id:"serializer-关系",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#serializer-关系","aria-hidden":"true"},"#",-1),v={href:"http://drf.jiuyou.info/#/drf/relations?id=serializer-%E5%85%B3%E7%B3%BB",title:"Serializer 关系",target:"_blank",rel:"noopener noreferrer"},m=t("<p>关系字段用于表示模型关系的数据字段, 它们可以应用到 <code>ForeignKey</code>、<code>ManyToManyField</code> 和 <code>OneToOneField</code>关系, 以及对反向关系、自定义关系等, 例如：<code>GenericForeignKey</code>。</p><blockquote><p><strong>注意：</strong> 关系字段在 <code>relations.py</code> 中声明，但按照惯例，你应该从 <code>serializers</code> 模块导入它们，使用 <code>from rest_framework import serializers</code> 引入，并像 <code>serializers.&lt;FieldName&gt;</code> 这样引用字段。</p></blockquote>",2),b={id:"检查关系。",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#检查关系。","aria-hidden":"true"},"#",-1),h={href:"http://drf.jiuyou.info/#/drf/relations?id=%E6%A3%80%E6%9F%A5%E5%85%B3%E7%B3%BB%E3%80%82",title:"检查关系。",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>在使用 <code>ModelSerializer</code> 类时，将自动为你生成序列化字段和关系。检查这些自动生成的字段可以学习如何定制关系风格。</p><p>为此，使用 <code>python manage.py shell</code> 打开 Django shell，然后导入序列化类，实例化它并打印对象表示形式...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> AccountSerializer
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AccountSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>  <span class="token comment"># Or \`print(repr(serializer))\` in Python 3.x.</span>
AccountSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    owner <span class="token operator">=</span> PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y={id:"api-参考",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),E={href:"http://drf.jiuyou.info/#/drf/relations?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>为了解释各种类型的关系字段，我们将为我们的示例使用几个简单的模型。我们的模型将使用音乐专辑，以及每张专辑中列出的曲目。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    album_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    artist <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Track</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    album <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Album<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    order <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    duration <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        unique_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;order&#39;</span><span class="token punctuation">]</span>
        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;%d: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>order<span class="token punctuation">,</span> self<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringrelatedfield" tabindex="-1"><a class="header-anchor" href="#stringrelatedfield" aria-hidden="true">#</a> StringRelatedField</h3><p><code>StringRelatedField</code> 用于使用 <code>__unicode__</code> 方法表示关系。</p><p>例如，下面的序列化类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为以下形式:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Things We Lost In The Fire&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;1: Sunflower&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;2: Whitetail&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;3: Dinosaur Act&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>🐍该字段是只读的。</p></blockquote><p><strong>参数</strong>:</p><ul><li><code>many</code> - 如果是一对多的关系，就将此参数设置为 <code>True</code>.</li></ul><h3 id="primarykeyrelatedfield" tabindex="-1"><a class="header-anchor" href="#primarykeyrelatedfield" aria-hidden="true">#</a> PrimaryKeyRelatedField</h3><p><code>PrimaryKeyRelatedField</code> 用于使用其主键表示关系。</p><p>例如，以下序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Undun&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Roots&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token number">89</span><span class="token punctuation">,</span>
        <span class="token number">90</span><span class="token punctuation">,</span>
        <span class="token number">91</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p><p><strong>参数</strong>:</p><ul><li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li><li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li><li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li><li><code>pk_field</code> - 设置为一个字段来控制主键值的序列化/反序列化。例如， <code>pk_field=UUIDField(format=&#39;hex&#39;)</code> 会将 UUID 主键序列化为其紧凑的十六进制表示形式。</li></ul><h3 id="hyperlinkedrelatedfield" tabindex="-1"><a class="header-anchor" href="#hyperlinkedrelatedfield" aria-hidden="true">#</a> HyperlinkedRelatedField</h3><p><code>HyperlinkedRelatedField</code> 用于使用超链接来表示关系。</p><p>例如，以下序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">(</span>
        many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        view_name<span class="token operator">=</span><span class="token string">&#39;track-detail&#39;</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Graceland&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Paul Simon&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/45/&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/46/&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/47/&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p><hr><p><strong>注意</strong>：该字段是为映射到接受单个 URL 关键字参数的 URL 的对象而设计的，如使用 <code>lookup_field</code> 和 <code>lookup_url_kwarg</code> 参数设置的对象。</p><p>这适用于包含单个主键或 slug 参数作为 URL 一部分的 URL。</p><p>如果需要更复杂的超链接表示，你需要自定义该字段，稍后会详解。</p><hr><p><strong>参数</strong>：</p><ul><li><code>view_name</code> - 用作关系目标的视图名称。如果你使用的是标准路由器类，则这将是一个格式为 <code>&lt;modelname&gt;-detail</code> 的字符串。<strong>必填</strong>.</li><li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li><li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li><li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li><li><code>lookup_field</code> - 用于查找的目标字段。对应于引用视图上的 URL 关键字参数。默认是 <code>&#39;pk&#39;</code>.</li><li><code>lookup_url_kwarg</code> - 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 <code>lookup_field</code> 相同的值。</li><li><code>format</code> - 如果使用格式后缀，则超链接字段将使用与目标相同的格式后缀，除非使用 <code>format</code> 参数进行覆盖。</li></ul><h3 id="slugrelatedfield" tabindex="-1"><a class="header-anchor" href="#slugrelatedfield" aria-hidden="true">#</a> SlugRelatedField</h3><p><code>SlugRelatedField</code> 用于使用目标上的字段来表示关系。</p><p>例如，以下序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>
        many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        slug_field<span class="token operator">=</span><span class="token string">&#39;title&#39;</span>
     <span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Dear John&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Loney Dear&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Airport Surroundings&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Everything Turns to You&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;I Was Only Going Out&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p><p>将 <code>SlugRelatedField</code> 用作读写字段时，通常需要确保 slug 字段与 <code>unique=True</code> 的模型字段相对应。</p><p><strong>参数</strong>：</p><ul><li><code>slug_field</code> - 用来表示目标的字段。这应该是唯一标识给定实例的字段。例如， <code>username</code>。<strong>必填</strong></li><li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li><li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li><li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li></ul><h3 id="hyperlinkedidentityfield" tabindex="-1"><a class="header-anchor" href="#hyperlinkedidentityfield" aria-hidden="true">#</a> HyperlinkedIdentityField</h3><p>此字段可以作为身份关系应用，例如 <code>HyperlinkedModelSerializer</code> 上的 <code>&#39;url&#39;</code> 字段。它也可以用于对象的属性。例如，以下序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    track_listing <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">&#39;track-list&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;track_listing&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Eraser&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Thom Yorke&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;track_listing&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://www.example.com/api/track_list/12/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该字段始终为只读。</p><p><strong>参数</strong>：</p><ul><li><code>view_name</code> - 用作关系目标的视图名称。如果你使用的是标准路由器类，则这将是一个格式为 <code>&lt;modelname&gt;-detail</code> 的字符串。<strong>必填</strong>。</li><li><code>lookup_field</code> - 用于查找的目标字段。对应于引用视图上的 URL 关键字参数。默认是 <code>&#39;pk&#39;</code>。</li><li><code>lookup_url_kwarg</code> - 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 <code>lookup_field</code> 相同的值。</li><li><code>format</code> - 如果使用格式后缀，则超链接字段将使用与目标相同的格式后缀，除非使用 <code>format</code> 参数进行覆盖。</li></ul><h3 id="嵌套关系-nested-relationships" tabindex="-1"><a class="header-anchor" href="#嵌套关系-nested-relationships" aria-hidden="true">#</a> 嵌套关系(Nested relationships)</h3><p>嵌套关系可以通过使用序列化类作为字段来表达。</p><p>如果该字段用于表示一对多关系，则应将 <code>many=True</code> 标志添加到序列化字段。</p>`,55),w={id:"举个栗子",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),B={href:"http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>例如，以下序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Track
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的嵌套表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> album <span class="token operator">=</span> Album<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album_name<span class="token operator">=</span><span class="token string">&quot;The Grey Album&quot;</span><span class="token punctuation">,</span> artist<span class="token operator">=</span><span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">245</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">264</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">159</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AlbumSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>album<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>data
<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Grey Album&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">245</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">264</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可写的嵌套-serializer-writable-nested-serializers" tabindex="-1"><a class="header-anchor" href="#可写的嵌套-serializer-writable-nested-serializers" aria-hidden="true">#</a> 可写的嵌套 serializer(Writable nested serializers)</h3><p>默认情况下，嵌套序列化类是只读的。如果要支持对嵌套序列化字段的写操作，则需要创建 <code>create()</code> 和/或 <code>update()</code> 方法，以明确指定应如何保存子关系。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Track
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tracks_data <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>
        album <span class="token operator">=</span> Album<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>
        <span class="token keyword">for</span> track_data <span class="token keyword">in</span> tracks_data<span class="token punctuation">:</span>
            Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> <span class="token operator">**</span>track_data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> album

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Grey Album&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">245</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">264</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AlbumSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Album<span class="token punctuation">:</span> Album <span class="token builtin">object</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),F={id:"自定义关系字段",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#自定义关系字段","aria-hidden":"true"},"#",-1),q={href:"http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5",title:"自定义关系字段",target:"_blank",rel:"noopener noreferrer"},x=t("<p>在极少数情况下，现有的关系类型都不符合您需要的表示形式，你可以实现一个完全自定义的关系字段，该字段准确描述应该如何从模型实例生成输出表示。</p><p>要实现自定义关系字段，您应该重写 <code>RelatedField</code>，并实现 <code>.to_representation(self, value)</code> 方法。此方法将字段的目标作为 <code>value</code> 参数，并返回应用于序列化目标的表示。<code>value</code> 参数通常是一个模型实例。</p><p>如果要实现读写关系字段，则还必须实现 <code>.to_internal_value(self, data)</code> 方法。</p><p>要提供基于 <code>context</code> 的动态查询集，还可以覆盖 <code>.get_queryset(self)</code>，而不是在类上指定 <code>.queryset</code> 或初始化该字段。</p>",4),M={id:"举个栗子-1",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#举个栗子-1","aria-hidden":"true"},"#",-1),j={href:"http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-1",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>例如，我们可以定义一个关系字段，使用它的顺序，标题和持续时间将音轨序列化为自定义字符串表示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">TrackListingField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>RelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        duration <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%M:%S&#39;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>value<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Track %d: %s (%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>order<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">,</span> duration<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackListingField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Sometimes I Wish We Were an Eagle&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Bill Callahan&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Track 1: Jim Cain (04:39)&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Track 2: Eid Ma Clack Shaw (04:19)&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Track 3: The Wind and the Dove (04:34)&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),D={id:"自定义超链接字段",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#自定义超链接字段","aria-hidden":"true"},"#",-1),I={href:"http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AD%97%E6%AE%B5",title:"自定义超链接字段",target:"_blank",rel:"noopener noreferrer"},U=t("<p>在某些情况下，您可能需要自定义超链接字段的行为，以表示需要多个查询字段的 URL。</p><p>您可以通过继承 <code>HyperlinkedRelatedField</code> 来实现此目的。有两个可以被覆盖的方法：</p><p><strong>get_url(self, obj, view_name, request, format)</strong></p><p><code>get_url</code> 方法用于将对象实例映射到其 URL 表示。</p><p>如果 <code>view_name</code> 和 <code>lookup_field</code> 属性未配置为正确匹配 URL conf，可能会引发 <code>NoReverseMatch</code> 。</p><p><strong>get_object(self, queryset, view_name, view_args, view_kwargs)</strong></p><p>如果您想支持可写的超链接字段，那么您还需要重写 <code>get_object</code>，以便将传入的 URL 映射回它们表示的对象。对于只读超链接字段，不需要重写此方法。</p><p>此方法的返回值应该是与匹配的 URL conf 参数对应的对象。</p><p>可能会引发 <code>ObjectDoesNotExist</code> 异常。</p>",9),H={id:"举个栗子-2",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#举个栗子-2","aria-hidden":"true"},"#",-1),N={href:"http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-2",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>假设我们有一个带有两个关键字参数的 customer 对象的 URL，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span>api<span class="token operator">/</span><span class="token operator">&lt;</span>organization_slug<span class="token operator">&gt;</span><span class="token operator">/</span>customers<span class="token operator">/</span><span class="token operator">&lt;</span>customer_pk<span class="token operator">&gt;</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这没办法用仅接受单个查找字段的默认实现来表示。</p><p>在这种情况下，我们需要继承 <code>HyperlinkedRelatedField</code> 并重写其中的方法来获得我们想要的行为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse

<span class="token keyword">class</span> <span class="token class-name">CustomerHyperlink</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># We define these as class attributes, so we don&#39;t need to pass them as arguments.</span>
    view_name <span class="token operator">=</span> <span class="token string">&#39;customer-detail&#39;</span>
    queryset <span class="token operator">=</span> Customer<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> view_name<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;organization_slug&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>organization<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>
            <span class="token string">&#39;customer_pk&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>pk
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span>view_name<span class="token punctuation">,</span> kwargs<span class="token operator">=</span>url_kwargs<span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token builtin">format</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view_name<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        lookup_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token string">&#39;organization__slug&#39;</span><span class="token punctuation">:</span> view_kwargs<span class="token punctuation">[</span><span class="token string">&#39;organization_slug&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           <span class="token string">&#39;pk&#39;</span><span class="token punctuation">:</span> view_kwargs<span class="token punctuation">[</span><span class="token string">&#39;customer_pk&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token operator">**</span>lookup_kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果您想将此风格与通用视图一起使用，那么您还需要覆盖视图上的 <code>.get_object</code> 以获得正确的查找行为。</p><p>一般来说，我们建议尽可能在 API 表示方式下使用平面风格，但嵌套 URL 风格在适度使用时也是合理的。</p><hr>`,8),W={id:"进一步说明",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#进一步说明","aria-hidden":"true"},"#",-1),O={href:"http://drf.jiuyou.info/#/drf/relations?id=%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AF%B4%E6%98%8E",title:"进一步说明",target:"_blank",rel:"noopener noreferrer"},V={id:"queryset-参数",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#queryset-参数","aria-hidden":"true"},"#",-1),Y={href:"http://drf.jiuyou.info/#/drf/relations?id=queryset-%E5%8F%82%E6%95%B0",title:"queryset",target:"_blank",rel:"noopener noreferrer"},X={href:"http://drf.jiuyou.info/#/drf/relations?id=queryset-%E5%8F%82%E6%95%B0",title:" 参数",target:"_blank",rel:"noopener noreferrer"},Q=t("<p><code>queryset</code> 参数只对可写关系字段是必需的，在这种情况下，它用于执行模型实例查找，该查找从基本用户输入映射到模型实例。</p><p>在 2.x 版本中，如果正在使用 <code>ModelSerializer</code> 类，则序列化类有时会自动确定 <code>queryset</code> 参数。</p><p>此行为现在替换为始终为可写关系字段使用显式 <code>queryset</code> 参数。</p><p>这样做可以减少 <code>ModelSerializer</code> 提供的隐藏 “魔术” 数量（指 <code>ModelSerializer</code> 在内部帮我们完成的工作），使字段的行为更加清晰，并确保在使用 <code>ModelSerializer</code> 快捷方式（高度封装过，使用简单）或使用完全显式的 <code>Serializer</code> 类之间转换是微不足道的。</p>",4),Z={id:"自定义-html-显示",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#自定义-html-显示","aria-hidden":"true"},"#",-1),nn={href:"http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89-html-%E6%98%BE%E7%A4%BA",title:"自定义 HTML 显示",target:"_blank",rel:"noopener noreferrer"},sn=t(`<p>模型内置的 <code>__str__</code> 方法用来生成用于填充 <code>choices</code> 属性的对象的字符串表示形式。这些 choices 用于在可浏览的 API 中填充选择的 HTML input。</p><p>要为这些 input 提供自定义表示，请重写 <code>RelatedField</code> 子类的 <code>display_value()</code> 方法。这个方法将接收一个模型对象，并且应该返回一个适合表示它的字符串。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackPrimaryKeyRelatedField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Track: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),an={id:"select-field-cutoffs",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#select-field-cutoffs","aria-hidden":"true"},"#",-1),tn={href:"http://drf.jiuyou.info/#/drf/relations?id=select-field-cutoffs",title:"Select field cutoffs",target:"_blank",rel:"noopener noreferrer"},pn=t(`<p>在渲染可浏览的 API 关系字段时，默认只显示最多 1000 个可选 item。如果存在更多项目，则会显示 &quot;More than 1000 items…&quot; 的 disabled 选项。</p><p>此行为旨在防止由于显示大量关系而导致模板无法在可接受的时间范围内完成渲染。</p><p>有两个关键字参数可用于控制此行为：</p><ul><li><code>html_cutoff</code> - 设置 HTML select 下拉菜单中显示的选项的最大数量。设置为 <code>None</code> 可以禁用任何限制。默认为 <code>1000</code>。</li><li><code>html_cutoff_text</code> - 设置一个文本字符串，在 HTML select 下拉菜单超出最大显示数量时显示。默认是 <code>&quot;More than {count} items…&quot;</code></li></ul><p>你还可以在 settings 中用 <code>HTML_SELECT_CUTOFF</code> 和 <code>HTML_SELECT_CUTOFF_TEXT</code> 来全局控制这些设置。</p><p>在强制执行 cutoff 的情况下，您可能希望改为在 HTML 表单中使用简单的 input 字段。你可以使用 <code>style</code> 关键字参数来做到这一点。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>assigned_to <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>
   queryset<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   slug_field<span class="token operator">=</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span>
   style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;input.html&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),on={id:"反向关系",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#反向关系","aria-hidden":"true"},"#",-1),cn={href:"http://drf.jiuyou.info/#/drf/relations?id=%E5%8F%8D%E5%90%91%E5%85%B3%E7%B3%BB",title:"反向关系",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>请注意，反向关系不会自动包含在 <code>ModelSerializer</code> 和 <code>HyperlinkedModelSerializer</code> 类中。要包含反向关系，您必须明确将其添加到字段列表中。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常需要确保已经在关系上设置了适当的 <code>related_name</code> 参数，可以将其用作字段名称。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Track</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    album <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Album<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你还没有为反向关系设置相关名称，则需要在 <code>fields</code> 参数中使用自动生成的相关名称。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;track_set&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),un={href:"https://docs.djangoproject.com/en/stable/topics/db/queries/#following-relationships-backward",title:"反向关系",target:"_blank",rel:"noopener noreferrer"},dn={id:"通用关系",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#通用关系","aria-hidden":"true"},"#",-1),vn={href:"http://drf.jiuyou.info/#/drf/relations?id=%E9%80%9A%E7%94%A8%E5%85%B3%E7%B3%BB",title:"通用关系",target:"_blank",rel:"noopener noreferrer"},mn=t(`<p>如果要序列化通用外键，则需要自定义字段，以明确确定如何序列化关系。</p><p>例如，给定一个以下模型的标签，该标签与其他任意模型具有通用关系：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TaggedItem</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Tags arbitrary model instances using a generic relation.

    See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/
    &quot;&quot;&quot;</span>
    tag_name <span class="token operator">=</span> models<span class="token punctuation">.</span>SlugField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content_type <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>ContentType<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    object_id <span class="token operator">=</span> models<span class="token punctuation">.</span>PositiveIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tagged_object <span class="token operator">=</span> GenericForeignKey<span class="token punctuation">(</span><span class="token string">&#39;content_type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object_id&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>tag_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下两种模式可以用相关的标签：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Bookmark</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A bookmark consists of a URL, and 0 or more descriptive tags.
    &quot;&quot;&quot;</span>
    url <span class="token operator">=</span> models<span class="token punctuation">.</span>URLField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tags <span class="token operator">=</span> GenericRelation<span class="token punctuation">(</span>TaggedItem<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A note consists of some text, and 0 or more descriptive tags.
    &quot;&quot;&quot;</span>
    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
    tags <span class="token operator">=</span> GenericRelation<span class="token punctuation">(</span>TaggedItem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以定义一个可用于序列化标签实例的自定义字段，并使用每个实例的类型来确定它应该如何序列化。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TaggedObjectRelatedField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>RelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A custom field to use for the \`tagged_object\` generic relationship.
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Serialize tagged objects to a simple textual representation.
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Bookmark<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;Bookmark: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>url
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Note<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;Note: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>text
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Unexpected type of tagged object&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要的关系具有嵌套表示，则可以在 <code>.to_representation()</code> 方法中使用所需的序列化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Serialize bookmark instances using a bookmark serializer,
    and note instances using a note serializer.
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Bookmark<span class="token punctuation">)</span><span class="token punctuation">:</span>
        serializer <span class="token operator">=</span> BookmarkSerializer<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Note<span class="token punctuation">)</span><span class="token punctuation">:</span>
        serializer <span class="token operator">=</span> NoteSerializer<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Unexpected type of tagged object&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> serializer<span class="token punctuation">.</span>data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，使用 <code>GenericRelation</code> 字段表示的反向通用键可以使用常规关系字段类型进行序列化，因为关系中目标的类型总是已知的。</p>`,10),bn={href:"https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/#id1",title:"有关泛型关系的 Django 文档",target:"_blank",rel:"noopener noreferrer"},gn={id:"具有-through-模型的-manytomanyfields",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#具有-through-模型的-manytomanyfields","aria-hidden":"true"},"#",-1),_n={href:"http://drf.jiuyou.info/#/drf/relations?id=%E5%85%B7%E6%9C%89-through-%E6%A8%A1%E5%9E%8B%E7%9A%84-manytomanyfields",title:"具有 Through 模型的 ManyToManyFields",target:"_blank",rel:"noopener noreferrer"},yn=n("p",null,[s("默认情况下，将指定带有 "),n("code",null,"through"),s(" 模型的 "),n("code",null,"ManyToManyField"),s(" 的关系字段设置为只读。")],-1),fn=n("p",null,[s("如果你要明确指定一个指向具有 through 模型的 "),n("code",null,"ManyToManyField"),s(" 的关系字段，请确保将 "),n("code",null,"read_only"),s(" 设置为 "),n("code",null,"True"),s(" 。")],-1);function En(An,wn){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("官方原文链接"),e(a)])])]),n("h1",d,[k,s(),n("a",v,[s("Serializer 关系"),e(a)])]),m,n("h4",b,[g,s(),n("a",h,[s("检查关系。"),e(a)])]),_,n("h1",y,[f,s(),n("a",E,[s("API 参考"),e(a)])]),A,n("h2",w,[z,s(),n("a",B,[s("举个栗子"),e(a)])]),T,n("h1",F,[S,s(),n("a",q,[s("自定义关系字段"),e(a)])]),x,n("h2",M,[R,s(),n("a",j,[s("举个栗子"),e(a)])]),L,n("h1",D,[C,s(),n("a",I,[s("自定义超链接字段"),e(a)])]),U,n("h2",H,[P,s(),n("a",N,[s("举个栗子"),e(a)])]),K,n("h1",W,[G,s(),n("a",O,[s("进一步说明"),e(a)])]),n("h2",V,[J,s(),n("a",Y,[s("queryset"),e(a)]),n("a",X,[s(" 参数"),e(a)])]),Q,n("h2",Z,[$,s(),n("a",nn,[s("自定义 HTML 显示"),e(a)])]),sn,n("h2",an,[en,s(),n("a",tn,[s("Select field cutoffs"),e(a)])]),pn,n("h2",on,[ln,s(),n("a",cn,[s("反向关系"),e(a)])]),rn,n("blockquote",null,[n("p",null,[s("有关更多详细信息，请参阅有关"),n("a",un,[s("反向关系"),e(a)]),s("的 Django 文档。")])]),n("h2",dn,[kn,s(),n("a",vn,[s("通用关系"),e(a)])]),mn,n("blockquote",null,[n("p",null,[s("有关更多信息，请参阅"),n("a",bn,[s("有关泛型关系的 Django 文档"),e(a)]),s("。")])]),n("h2",gn,[hn,s(),n("a",_n,[s("具有 Through 模型的 ManyToManyFields"),e(a)])]),yn,fn])}const Tn=p(c,[["render",En],["__file","Rest-framework专栏讲解(十三)：Serializer relations.html.vue"]]);export{Tn as default};
