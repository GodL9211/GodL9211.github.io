const e=JSON.parse('{"key":"v-7a998753","path":"/docs/golang/golang-base/30.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html","title":"30.错误处理","lang":"zh-CN","frontmatter":{"title":"30.错误处理","icon":"book","index":true,"article":false,"description":"要写出⾼质量的Go代码，我们需要始终想着错误处理。 了解错误处理的策略\\r 错误是值，只是以error接⼝变量的形式统⼀呈现。 ```go var err error err = errors.New(\\"this is a demo error\\") ``` error接⼝是Go原⽣内置的类型，它的定义如下： ```go type interface er...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/golang/golang-base/30.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"暴走の海鸽"}],["meta",{"property":"og:title","content":"30.错误处理"}],["meta",{"property":"og:description","content":"要写出⾼质量的Go代码，我们需要始终想着错误处理。 了解错误处理的策略\\r 错误是值，只是以error接⼝变量的形式统⼀呈现。 ```go var err error err = errors.New(\\"this is a demo error\\") ``` error接⼝是Go原⽣内置的类型，它的定义如下： ```go type interface er..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-15T07:16:48.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"30.错误处理"}],["meta",{"property":"article:author","content":"Mr.暴走の海鸽"}],["meta",{"property":"article:modified_time","content":"2023-12-15T07:16:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"30.错误处理\\",\\"description\\":\\"要写出⾼质量的Go代码，我们需要始终想着错误处理。 了解错误处理的策略\\\\r 错误是值，只是以error接⼝变量的形式统⼀呈现。 ```go var err error err = errors.New(\\\\\\"this is a demo error\\\\\\") ``` error接⼝是Go原⽣内置的类型，它的定义如下： ```go type interface er...\\"}"]]},"headers":[{"level":2,"title":"了解错误处理的策略","slug":"了解错误处理的策略","link":"#了解错误处理的策略","children":[{"level":3,"title":"透明错误处理策略","slug":"透明错误处理策略","link":"#透明错误处理策略","children":[]},{"level":3,"title":"“哨兵”错误处理策略","slug":"哨兵-错误处理策略","link":"#哨兵-错误处理策略","children":[]},{"level":3,"title":"错误值类型检视策略","slug":"错误值类型检视策略","link":"#错误值类型检视策略","children":[]},{"level":3,"title":"错误⾏为特征检视策略","slug":"错误行为特征检视策略","link":"#错误行为特征检视策略","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"尽量优化反复出现的if err != nil","slug":"尽量优化反复出现的if-err-nil","link":"#尽量优化反复出现的if-err-nil","children":[]},{"level":2,"title":"不要使⽤panic进⾏正常的错误处理","slug":"不要使用panic进行正常的错误处理","link":"#不要使用panic进行正常的错误处理","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1702536867000,"updatedTime":1702624608000,"contributors":[{"name":"lianhaifeng","email":"lianhaifeng@rongannetworks.com","commits":2}]},"readingTime":{"minutes":3.75,"words":1125},"filePathRelative":"docs/golang/golang-base/30.错误处理.md","localizedDate":"2023年12月14日","excerpt":"","autoDesc":true}');export{e as data};
