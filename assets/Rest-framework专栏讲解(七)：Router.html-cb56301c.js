import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,a as n,b as s,e,f as t}from"./app-967d79b2.js";const i={},r=t('<h1 id="rest-framework专栏讲解-七-router" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-七-router" aria-hidden="true">#</a> Rest-framework专栏讲解(七)：Router</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E8%B7%AF%E7%94%B1">路由</a><ul><li><a href="#%E7%94%A8%E6%B3%95">用法</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1">使用 include 与路由</a></li><li><a href="#%E9%A2%9D%E5%A4%96%E7%9A%84%E9%93%BE%E6%8E%A5%E5%92%8C%E6%93%8D%E4%BD%9C">额外的链接和操作</a></li></ul></li></ul></li><li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a><ul><li><a href="#SimpleRouter">SimpleRouter</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li><li><a href="#include">include</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E7%BB%91%E5%AE%9A%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C">路由绑定其他操作</a></li><li><a href="#DefaultRouter">DefaultRouter</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1">自定义路由</a><ul><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">自定义动态路由</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6">自定义路由器进阶</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%8C%85">第三方软件包</a><ul><li><a href="#DRF-Nested-Routers">DRF Nested Routers</a></li><li><a href="#ModelRouter-wqdbrest">ModelRouter (wq.db.rest)</a></li><li><a href="#DRF-extensions">DRF-extensions</a></li></ul></li></ul><hr>',4),u={href:"http://www.django-rest-framework.org/api-guide/routers/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},d={id:"路由",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#路由","aria-hidden":"true"},"#",-1),m={href:"http://drf.jiuyou.info/#/drf/routers?id=%E8%B7%AF%E7%94%B1",title:"路由",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"一些 Web 框架（如 Rails）提供了一种能够自动确定应用程序的 URL 如何映射到处理请求的功能。",-1),h=n("p",null,"REST framework 增加了对 Django 自动 URL 路由的支持，并提供了一种将视图逻辑连接到一组 URL 的简单，高效和一致的方式。",-1),b={id:"用法",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#用法","aria-hidden":"true"},"#",-1),_={href:"http://drf.jiuyou.info/#/drf/routers?id=%E7%94%A8%E6%B3%95",title:"用法",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>下面是一个使用 <code>SimpleRouter</code> 的简单 URL 配置示例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> routers

router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;accounts&#39;</span><span class="token punctuation">,</span> AccountViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register()</code> 方法有两个必须参数：</p><ul><li><code>prefix</code> - 设置这组路由的前缀。</li><li><code>viewset</code> - 设置对应的视图集类。</li></ul><p>或者，您也可以指定一个附加参数：</p><ul><li><code>base_name</code> - 用于创建的 URL 名称的基础。如果未设置，将根据视图集的 <code>queryset</code> 属性自动生成。请注意，如果视图集不包含 <code>queryset</code> 属性，则在注册视图集时必须设置 <code>base_name</code>。</li></ul><p>上面的例子会生成以下 URL 模式：</p><ul><li>URL pattern: <code>^users/$</code> Name: <code>&#39;user-list&#39;</code></li><li>URL pattern: <code>^users/{pk}/$</code> Name: <code>&#39;user-detail&#39;</code></li><li>URL pattern: <code>^accounts/$</code> Name: <code>&#39;account-list&#39;</code></li><li>URL pattern: <code>^accounts/{pk}/$</code> Name: <code>&#39;account-detail&#39;</code></li></ul><blockquote><p>注意：<code>base_name</code> 参数用于指定视图名称模式的初始部分。在上面的例子中，是 <code>user</code> 或 <code>account</code> 部分。</p></blockquote><p>通常，您不需要指定 <code>base_name</code> 参数，但是如果您有一个视图集定义了自定义 <code>get_queryset</code> 方法，那么该视图集可能没有设置 <code>.queryset</code> 属性。如果此时尝试注册该视图，则会看到如下所示的错误：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;base_name&#39;</span> argument <span class="token keyword">not</span> specified<span class="token punctuation">,</span> <span class="token keyword">and</span> could <span class="token keyword">not</span> automatically determine the name <span class="token keyword">from</span> the viewset<span class="token punctuation">,</span> <span class="token keyword">as</span> it does <span class="token keyword">not</span> have a <span class="token string">&#39;.queryset&#39;</span> attribute<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>&#39;base_name&#39;</code> 参数未指定，并且无法自动确定视图中的名称，因为它没有&#39; <code>.queryset&#39;</code> 属性。</p></blockquote><p>这时候就需要在注册视图集时显式设置 <code>base_name</code> 参数，因为它无法从模型名称中自动确定。</p>`,13),y={id:"使用-include-与路由",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#使用-include-与路由","aria-hidden":"true"},"#",-1),w={href:"http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1",title:"使用 ",target:"_blank",rel:"noopener noreferrer"},R={href:"http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1",title:"include",target:"_blank",rel:"noopener noreferrer"},A={href:"http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1",title:" 与路由",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>路由实例上的 <code>.urls</code> 属性是一个标准的 URL patterns。关于如何包含这些 URL，有许多不同的样式。</p><p>例如，可以将 <code>router.urls</code> 附加到现有视图的列表中...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;accounts&#39;</span><span class="token punctuation">,</span> AccountViewSet<span class="token punctuation">)</span>

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，你也可以使用 Django 的 <code>include</code> 函数，比如...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以设置 namespace。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对超链接序列化器使用命名空间，则还需要确保序列化器上的任何 <code>view_name</code> 参数都能正确反映命名空间。在上面的示例中，您需要为超链接到用户详细信息视图的序列化程序字段包含诸如 <code>view_name=&#39;api:user-detail&#39;</code> 之类的参数。</p>`,8),x={id:"额外的链接和操作",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#额外的链接和操作","aria-hidden":"true"},"#",-1),S={href:"http://drf.jiuyou.info/#/drf/routers?id=%E9%A2%9D%E5%A4%96%E7%9A%84%E9%93%BE%E6%8E%A5%E5%92%8C%E6%93%8D%E4%BD%9C",title:"额外的链接和操作",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰的 视图上的任何方法 也将被路由。例如，在 <code>UserViewSet</code> 类中给出这样的方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route

<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成以下URL模式：</p><ul><li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>&#39;user-set-password&#39;</code></li></ul><p>如果您不想使用默认生成的 URL 模式，则可以使用 url_path 参数对其进行自定义。</p><p>例如，如果您想将我们的自定义操作的URL更改为 <code>^users/{pk}/change-password/$</code>，则可以编写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route

<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">,</span> url_path<span class="token operator">=</span><span class="token string">&#39;change-password&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子现在将生成以下URL模式：</p><ul><li>URL pattern: <code>^users/{pk}/change-password/$</code> Name: <code>&#39;user-change-password&#39;</code></li></ul><p>如果您不想使用生成的默认名称，则可以使用 url_name 参数对其进行自定义。</p><p>例如，如果您想将自定义操作的名称更改为 <code>&#39;user-change-password&#39;</code>，则可以编写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route

<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">,</span> url_name<span class="token operator">=</span><span class="token string">&#39;change-password&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子现在将生成以下URL模式：</p><ul><li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>&#39;user-change-password&#39;</code></li></ul><p>可以同时使用 <code>url_path</code> 和 <code>url_name</code> 参数。</p>`,15),L={href:"https://juejin.im/post/5a991807518825558a060a77#heading-3",title:"视图集：标记额外的路由行为",target:"_blank",rel:"noopener noreferrer"},D={id:"api-参考",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#api-参考","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/routers?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},V=t('<h3 id="simplerouter" tabindex="-1"><a class="header-anchor" href="#simplerouter" aria-hidden="true">#</a> SimpleRouter</h3><blockquote><p><code>SimpleRouter</code> 包含标准的 <code>list</code>，<code>create</code>，<code>retrieve</code>，<code>update</code>，<code>partial_update</code> 和 <code>destroy</code> action。<code>SimpleRouter</code> 还支持视图集使用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰器标记其他要路由的方法。</p></blockquote>',2),j=n("table",{methodname:""},[n("thead",null,[n("tr",null,[n("th",null,"URL Style"),n("th",null,"HTTP Method"),n("th",null,"Action"),n("th",null,"URL Name")])]),n("tbody",null,[n("tr",null,[n("td",null,"{prefix}/"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"{basename}-list")]),n("tr",null,[n("td",null,"POST"),n("td",null,"create"),n("td"),n("td")]),n("tr",{methodname:""},[n("td",null,"{prefix}/{methodname}/"),n("td",null,[s("GET, 或者由 "),n("code",null,"methods"),s(" 参数指定")]),n("td",null,[n("code",null,"@list_route"),s(" 装饰的方法")]),n("td",null,"{basename}-")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"{basename}-detail")]),n("tr",null,[n("td",null,"PUT"),n("td",null,"update"),n("td"),n("td")]),n("tr",null,[n("td",null,"PATCH"),n("td",null,"partial_update"),n("td"),n("td")]),n("tr",null,[n("td",null,"DELETE"),n("td",null,"destroy"),n("td"),n("td")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/{methodname}/"),n("td",null,[s("GET, 或者由 "),n("code",null,"methods"),s(" 参数指定")]),n("td",null,[n("code",null,"@detail_route"),s(" 装饰的方法")]),n("td",null,"{basename}-")])])],-1),P=t(`<p>默认情况下，由 <code>SimpleRouter</code> 创建的 URL 附加了尾部斜杠。在实例化路由器时，可以通过将 <code>trailing_slash</code> 参数设置为 <code>False</code> 来修改此行为。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> SimpleRouter<span class="token punctuation">(</span>trailing_slash<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尾部斜杠在 Django 中是常规的，但在其他一些框架（如 Rails）中默认不使用。选择使用哪种风格在很大程度上是一个偏好问题，尽管一些 JavaScript 框架可能会期望特定的路由风格。</p><p><code>SimpleRouter</code> 将匹配包含除斜杠和句点字符以外的任何字符的 lookup 值。对于更严格（或宽松）的 lookup pattern，请在视图集上设置 <code>lookup_value_regex</code> 属性。例如，您可以将 lookup 限制为有效的 UUID：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyModelViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lookup_field <span class="token operator">=</span> <span class="token string">&#39;my_model_id&#39;</span>
    lookup_value_regex <span class="token operator">=</span> <span class="token string">&#39;[0-9a-f]{32}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="举个栗子" tabindex="-1"><a class="header-anchor" href="#举个栗子" aria-hidden="true">#</a> 举个栗子</h4><p>在我们定义好了 <code>MedusaBlogViewSet</code> 的情况下, 我们注册 URL 的时候仅需要：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ Coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> routers

router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;medusa/blog&#39;</span><span class="token punctuation">,</span> MedusaBlogViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register()</code> 有两个<code>强制性</code>的参数：</p><ul><li><code>prefix</code>：用于这组路由的 URL 前缀字符串, 用于路由匹配</li><li><code>viewset</code>：你定义的视图集</li></ul><p>如果你的视图集实现了获取列表/获取详情/新增/删除/修改的方法, 那你定义路由将会解析成这样：</p><table><thead><tr><th>URL 格式</th><th>请求方法</th><th>请求说明</th><th>视图集方法</th></tr></thead><tbody><tr><td><code>^medusa/blog$</code></td><td><code>GET</code></td><td>获取列表</td><td><code>list()</code></td></tr><tr><td><code>^medusa/blog/{pk}$</code></td><td><code>GET</code></td><td>获取详情</td><td><code>retrieve()</code></td></tr><tr><td><code>^medusa/blog$</code></td><td><code>POST</code></td><td>新增</td><td><code>create()</code></td></tr><tr><td><code>^medusa/blog/{pk}$</code></td><td><code>PUT</code></td><td>更新</td><td><code>update()</code></td></tr><tr><td><code>^medusa/blog/{pk}$</code></td><td><code>DELETE</code></td><td>删除</td><td><code>destroy()</code></td></tr></tbody></table><p>在你的视图集没有指定 <code>queryset</code> 属性或者自定义了 <code>get_queryset()</code> 方法的时候, 你可能会看到这样一条错误信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;basename&#39;</span> argument <span class="token keyword">not</span> specified<span class="token punctuation">,</span> <span class="token keyword">and</span> could <span class="token keyword">not</span> automatically determine the name <span class="token keyword">from</span> the viewset<span class="token punctuation">,</span> <span class="token keyword">as</span> it does <span class="token keyword">not</span> have a <span class="token string">&#39;.queryset&#39;</span> attribute<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以你需要指定一个可选参数：<code>basename</code>, 默认情况下你不需要手动指定它的值, 它是创建 URL 名称的基础属性, 一般是用你指定的 <code>queryset</code> 属性值自动设置的。</p><p>默认情况下路由都需要添加 <code>/</code> 作为路由结尾, 你也可以修改该规则, 只需要修改参数 <code>trailing_slash=False</code> 即可：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> SimpleRouter<span class="token punctuation">(</span>trailing_slash<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该路由器生成 URL 的方式： </p><figure><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d1d10a5ee9a7c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include</h3><p>在上面的例子中, 我们使用了 <code>urlpatterns = router.urls</code> 的方式注册了路由对象, 我们通常会使用 <code>include</code> 进行路由注册, 在 Django 中可能有一些我们自定义的视图, 不需要使用 <code>SimpleRouter</code> 进行注册：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ Coding: UTF-8 _*_</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> routers

router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;medusa/blog&#39;</span><span class="token punctuation">,</span> MedusaBlogViewSet<span class="token punctuation">)</span>

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token comment"># 其他路由配置</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由绑定其他操作" tabindex="-1"><a class="header-anchor" href="#路由绑定其他操作" aria-hidden="true">#</a> 路由绑定其他操作</h3><p>例如你的项目安排上, 安排关于用户模块是在配置的界面, 那么你的路由可能是这样的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>configure<span class="token operator">/</span>user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那我对用户的配置可能有以下几个方法处理：</p><ul><li><code>GET</code>：获取用户详情/列表</li><li><code>PUT</code>：修改用户信息</li><li><code>POST</code>：新增用户信息</li><li><code>DELETE</code>：删除用户信息</li></ul><p>问题来了, 如果我不想创建一个新的关于用户的视图类, 但是我又想增加一个修改密码的 API 接口怎么办？ 如果你从事过其他产品 API 调度工作的时候, 你可能会浮现这样类型的接口：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>configure<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span>reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很规范的接口方式, 那你在你的 ViewSet 里怎么体现呢？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># _*_ coding: UTF-8 _*_</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet


<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token decorator annotation punctuation">@action</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的, 使用 <code>action</code> 装饰器装饰, 并<code>指定参数</code>即可, 默认情况下你生成的 URL 是根据你的函数名称生成了, 你也可以通过 <code>url_name</code> 和 <code>url_path</code> 制定路由的后缀名称, 也可以通过 <code>permission_classes</code> 来制定用户访问权限。</p><h3 id="defaultrouter" tabindex="-1"><a class="header-anchor" href="#defaultrouter" aria-hidden="true">#</a> DefaultRouter</h3><p><code>DefaultRouter</code> 与上面的 <code>SimpleRouter</code> 相似，但还包含一个默认的 API 根视图，该视图返回一个包含指向所有列表视图的超链接的响应。它还为可选的 <code>.json</code> 风格格式后缀生成路由。 当然, 该路由的路径也会使用 <code>/</code> 结尾, 你可以用 <code>trailing_slash=False</code> 来弃用该规则：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span>trailing_slash<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该路由生成 URL 的方式： </p>`,36),I=n("table",{methodname:""},[n("thead",null,[n("tr",null,[n("th",null,"URL Style"),n("th",null,"HTTP Method"),n("th",null,"Action"),n("th",null,"URL Name")])]),n("tbody",null,[n("tr",null,[n("td",null,"[.format]"),n("td",null,"GET"),n("td",null,"自动生成的根视图"),n("td",null,"api-root")]),n("tr",null,[n("td",null,"{prefix}/[.format]"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"{basename}-list")]),n("tr",null,[n("td",null,"POST"),n("td",null,"create"),n("td"),n("td")]),n("tr",{methodname:""},[n("td",null,"{prefix}/{methodname}/[.format]"),n("td",null,[s("GET, 或者由 "),n("code",null,"methods"),s(" 参数指定")]),n("td",null,[n("code",null,"@list_route"),s(" 装饰的方法")]),n("td",null,"{basename}-")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/[.format]"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"{basename}-detail")]),n("tr",null,[n("td",null,"PUT"),n("td",null,"update"),n("td"),n("td")]),n("tr",null,[n("td",null,"PATCH"),n("td",null,"partial_update"),n("td"),n("td")]),n("tr",null,[n("td",null,"DELETE"),n("td",null,"destroy"),n("td"),n("td")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/{methodname}/[.format]"),n("td",null,[s("GET, 或者由 "),n("code",null,"methods"),s(" 参数指定")]),n("td",null,[n("code",null,"@detail_route"),s(" 装饰的方法")]),n("td",null,"{basename}-")])])],-1),N=t('<blockquote><p>注意：我在使用 3.7.7 版本时，发现要写成 <code>{prefix}[.format]/</code> 风格才能访问，<code>{prefix}/[.format]</code> 风格会报 404，不知道是我设置问题还是官方更新了</p></blockquote><h2 id="自定义路由" tabindex="-1"><a class="header-anchor" href="#自定义路由" aria-hidden="true">#</a> 自定义路由</h2><p>自定义路由并不是你经常需要做的事情，但是如果你对 API 的 URL 是如何构建的有特定的要求的话，它会很有用。这样做可以让你以可重用的方式封装 URL 结构，确保你不必为每个新视图明确编写 URL 模式。</p><p>实现自定义路由的最简单方法是对现有路由类之一进行子类化。<code>.routes</code> 属性用于对将映射到每个视图集的 URL 模式进行模板化。<code>.Routes</code> 属性是一个 <code>Route</code> 列表（<code>Route</code> 的是一个 namedtuple）。</p><p>其实在开发中这不是你使用路由器的最好方式, 但是在你需要自定义 URL 格式的时候使用这个方式将会变得很有效, 而实现自定义路由是将现有路由作为子类之一, 其 <code>.routes</code> 属性是 <code>Route</code> 的命名元组的列表数据, 功能是用于模板化将映射到每个视图集的 URL 模式。</p><p><code>Route</code> 命名元祖的参数有：</p><ul><li><code>url</code>：代表需要路由的 URL 字符串, 可以包含以下格式字符串： <ul><li><code>{prefix}</code>：用于这组路由器的前缀字符串</li><li><code>{lookup}</code>：匹配单个实例的 lookup field, 如ID</li><li><code>{trailing_slash}</code>：可以是 &#39;/&#39; 或空字符串，具体取决于 <code>trailing_slash</code> 参数</li></ul></li><li><code>mapping</code>：HTTP 方法名称到视图方法的映射</li><li><code>name</code>：用于调用 <code>reverse</code> 时的 URL 的名称。可能包含以下格式字符串： <ul><li><code>{basename}</code>：创建的 URL 名称的基础</li></ul></li><li><code>initkwargs</code>： 实例化视图时应传递的任何其他参数的字典。注意，<code>suffix</code> 参数被保留用于标识视图集类型，在生成视图名称和 breadcrumb 链接时使用。</li></ul><p>其实以上文字内容是官方文档的描述内容加上我自己的理解装饰了一下, 但是看到这几行字的描述信息, 确实是不知道它的功能到底怎么样定义, 刚好看到某位大佬的博客, 参考并实践了一下：</p>',8),M={href:"https://link.juejin.cn/?target=https://www.cnblogs.com/liubiao/p/6567565.html",title:"www.cnblogs.com/liubiao/p/6…",target:"_blank",rel:"noopener noreferrer"},C={id:"自定义动态路由",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#自定义动态路由","aria-hidden":"true"},"#",-1),G={href:"http://drf.jiuyou.info/#/drf/routers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1",title:"自定义动态路由",target:"_blank",rel:"noopener noreferrer"},O=t("<p>你还可以自定义 <code>@list_route</code> 和 <code>@detail_route</code> 装饰器的路由方式。要路由这两个装饰器中的一个或两个，请在 <code>.routes</code> 列表中包含一个 <code>DynamicListRoute</code> 和/或 <code>DynamicDetailRoute</code>（别忘了类型是 namedtuple）。</p><p><code>DynamicListRoute</code> 和 <code>DynamicDetailRoute</code> 的参数是：</p><p><strong>url</strong>： 表示要路由的 URL 的字符串。可以包含与 <code>Route</code> 相同的格式字符串，并且还接受 <code>{methodname}</code> 和 <code>{methodnamehyphen}</code> 格式的字符串。</p><p><strong>name</strong>： 用于调用 <code>reverse</code> 时的名称。可以包含以下格式字符串：<code>{basename}</code> , <code>{methodname}</code> 和 <code>{methodnamehyphen}</code> 。</p><p><strong>initkwargs</strong>： 实例化视图时应传递的任何其他参数的字典。</p>",5),H={id:"举个栗子-1",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#举个栗子-1","aria-hidden":"true"},"#",-1),J={href:"http://drf.jiuyou.info/#/drf/routers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>以下示例只会路由 <code>list</code> 和 <code>retrieve</code> action，并且不使用尾部斜杠约定。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> Route<span class="token punctuation">,</span> DynamicDetailRoute<span class="token punctuation">,</span> SimpleRouter

<span class="token keyword">class</span> <span class="token class-name">CustomReadOnlyRouter</span><span class="token punctuation">(</span>SimpleRouter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A router for read-only APIs, which doesn&#39;t use trailing slashes.
    &quot;&quot;&quot;</span>
    routes <span class="token operator">=</span> <span class="token punctuation">[</span>
        Route<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}$&#39;</span><span class="token punctuation">,</span>
            mapping<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-list&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;suffix&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;List&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        Route<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}/{lookup}$&#39;</span><span class="token punctuation">,</span>
            mapping<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;retrieve&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-detail&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;suffix&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Detail&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        DynamicDetailRoute<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}/{lookup}/{methodnamehyphen}$&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-{methodnamehyphen}&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来看看 <code>CustomReadOnlyRouter</code> 为一个简单的视图集生成的路由。</p><p><code>views.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ReadOnlyModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A viewset that provides the standard actions
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    lookup_field <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span>

    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">group_names</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Returns a list of all the group names that the given
        user belongs to.
        &quot;&quot;&quot;</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        groups <span class="token operator">=</span> user<span class="token punctuation">.</span>groups<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">.</span>name <span class="token keyword">for</span> group <span class="token keyword">in</span> groups<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),K={href:"http://urls.py",title:"urls.py",target:"_blank",rel:"noopener noreferrer"},Q=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> CustomReadOnlyRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将生成以下映射...</p>`,2),X=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"URL"),n("th",null,"HTTP Method"),n("th",null,"Action"),n("th",null,"URL Name")])]),n("tbody",null,[n("tr",null,[n("td",null,"/users"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"user-list")]),n("tr",null,[n("td",{username:""},"/users/"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"user-detail")]),n("tr",null,[n("td",null,"/users/{username}/group-names"),n("td",null,"GET"),n("td",null,"group_names"),n("td",null,"user-group-names")])])],-1),Y=n("p",null,[s("有关设置 "),n("code",null,".routes"),s(" 属性的另一个示例，请参阅 "),n("code",null,"SimpleRouter"),s(" 类的源代码。")],-1),Z={id:"自定义路由器进阶",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#自定义路由器进阶","aria-hidden":"true"},"#",-1),sn={href:"http://drf.jiuyou.info/#/drf/routers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6",title:"自定义路由器进阶",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,[s("如果想提供完全自定义的行为，可以继承 "),n("code",null,"BaseRouter"),s(" 并覆盖 "),n("code",null,"get_urls(self)"),s(" 方法。该方法应检查已注册的视图集并返回一组 URL 模式。可以通过访问 "),n("code",null,"self.registry"),s(" 属性来检查注册的 prefix，viewset 和 basename tuples。")],-1),en=n("p",null,[s("你可能还想覆盖 "),n("code",null,"get_default_base_name（self，viewset）"),s("方法，或者在向路由注册视图集时始终显式设置 "),n("code",null,"base_name"),s(" 参数。")],-1),tn={id:"第三方软件包",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#第三方软件包","aria-hidden":"true"},"#",-1),pn={href:"http://drf.jiuyou.info/#/drf/routers?id=%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%8C%85",title:"第三方软件包",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,"以下是可用的第三方包。",-1),cn={id:"drf-nested-routers",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#drf-nested-routers","aria-hidden":"true"},"#",-1),un={href:"https://github.com/alanjds/drf-nested-routers",title:"DRF Nested Routers",target:"_blank",rel:"noopener noreferrer"},dn={id:"modelrouter-wq-db-rest",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#modelrouter-wq-db-rest","aria-hidden":"true"},"#",-1),mn={href:"https://wq.io/wq.db",title:"ModelRouter (wq.db.rest)",target:"_blank",rel:"noopener noreferrer"},vn={id:"drf-extensions",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#drf-extensions","aria-hidden":"true"},"#",-1),bn={href:"https://chibisov.github.io/drf-extensions/docs/",title:"DRF-extensions",target:"_blank",rel:"noopener noreferrer"};function gn(_n,fn){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("官方原文链接"),e(a)])])]),n("h2",d,[k,s(),n("a",m,[s("路由"),e(a)])]),v,h,n("h3",b,[g,s(),n("a",_,[s("用法"),e(a)])]),f,n("h4",y,[E,s(),n("a",w,[s("使用 "),e(a)]),n("a",R,[s("include"),e(a)]),n("a",A,[s(" 与路由"),e(a)])]),B,n("h4",x,[U,s(),n("a",S,[s("额外的链接和操作"),e(a)])]),q,n("p",null,[s("更多相关信息请看 "),n("a",L,[s("视图集：标记额外的路由行为"),e(a)]),s("。")]),n("h2",D,[F,s(),n("a",T,[s("API 参考"),e(a)])]),V,j,P,I,N,n("blockquote",null,[n("p",null,[s("附参考的博客地址："),n("a",M,[s("www.cnblogs.com/liubiao/p/6…"),e(a)])])]),n("h3",C,[$,s(),n("a",G,[s("自定义动态路由"),e(a)])]),O,n("h3",H,[z,s(),n("a",J,[s("举个栗子"),e(a)])]),W,n("p",null,[n("a",K,[s("urls.py"),e(a)]),s("：")]),Q,X,Y,n("h3",Z,[nn,s(),n("a",sn,[s("自定义路由器进阶"),e(a)])]),an,en,n("h2",tn,[on,s(),n("a",pn,[s("第三方软件包"),e(a)])]),ln,n("h3",cn,[rn,s(),n("a",un,[s("DRF Nested Routers"),e(a)])]),n("h3",dn,[kn,s(),n("a",mn,[s("ModelRouter (wq.db.rest)"),e(a)])]),n("h3",vn,[hn,s(),n("a",bn,[s("DRF-extensions"),e(a)])])])}const wn=o(i,[["render",gn],["__file","Rest-framework专栏讲解(七)：Router.html.vue"]]);export{wn as default};
