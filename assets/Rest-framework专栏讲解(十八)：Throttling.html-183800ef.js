import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,e,f as t}from"./app-967d79b2.js";const l={},r=t('<h1 id="rest-framework专栏讲解-十八-throttling" tabindex="-1"><a class="header-anchor" href="#rest-framework专栏讲解-十八-throttling" aria-hidden="true">#</a> Rest-framework专栏讲解(十八)：Throttling</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#%E9%99%90%E6%B5%81Throttling">限流（Throttling）</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E9%99%90%E6%B5%81">如何确定限流</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5">设置限流策略</a></li><li><a href="#%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E5%AE%A2%E6%88%B7%E7%AB%AF">如何识别客户端</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98">设置缓存</a></li></ul></li><li><a href="#%E9%99%90%E6%B5%81API-%E5%8F%82%E8%80%83">限流API 参考</a><ul><li><a href="#AnonRateThrottle">AnonRateThrottle</a></li><li><a href="#UserRateThrottle">UserRateThrottle</a><ul><li><a href="#ScopedRateThrottle">ScopedRateThrottle</a></li></ul></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81">自定义限流</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li></ul></li></ul><hr>',4),d={href:"http://www.django-rest-framework.org/api-guide/throttling/",title:"官方原文链接",target:"_blank",rel:"noopener noreferrer"},u={id:"限流-throttling",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#限流-throttling","aria-hidden":"true"},"#",-1),k={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E9%99%90%E6%B5%81%EF%BC%88throttling%EF%BC%89",title:"限流（Throttling）",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"限流与权限类似，因为它确定是否应该授权请求。 限流阀指示临时状态，并用于控制客户端可以对API进行的请求速率。",-1),v=n("p",null,"与权限一样，可能会使用多种限流方式。你的 API 可能对未经身份验证的请求进行限流，对经过身份验证的请求限流较少。",-1),m=n("p",null,"如果你需要对 API 的不同部分使用不同的限流策略，由于某些服务特别占用资源，你可能想要使用同时有多种限流策略的另一种方案。",-1),E=n("p",null,"如果你想要同时实现爆发限流率和持续限流率，也可以使用多个限流阀。例如，你可能希望将用户限制为每分钟最多 60 个请求，并且每天最多 1000 个请求。",-1),b=n("p",null,"限流阀不一定只限制请求频率。例如，存储服务可能还需要对带宽进行限制，而付费数据服务可能希望对正在访问的某些记录进行限制。",-1),g={id:"如何确定限流",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#如何确定限流","aria-hidden":"true"},"#",-1),T={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E9%99%90%E6%B5%81",title:"如何确定限流",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"与权限和身份验证一样，REST framework 中的限流始终定义为类的列表。",-1),R=n("p",null,[s("在运行视图的主体之前，会检查列表中的每个限流阀。如果任何限流检查失败，将引发一个 "),n("code",null,"exceptions.Throttled"),s(" 异常，并且该视图的主体将不会再执行。")],-1),w={id:"设置限流策略",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#设置限流策略","aria-hidden":"true"},"#",-1),B={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E8%AE%BE%E7%BD%AE%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5",title:"设置限流策略",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>可以使用 <code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code> setting 全局设置默认限流策略。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.throttling.AnonRateThrottle&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.throttling.UserRateThrottle&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;anon&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;100/day&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DEFAULT_THROTTLE_RATES</code> 中使用的频率描述可能包括 <code>second</code>，<code>minute</code> ，<code>hour</code> 或 <code>day</code> 作为限流期。</p><p>你还可以使用基于 <code>APIView</code> 类的视图，在每个视图或每个视图集的基础上设置限流策略。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_classes <span class="token operator">=</span> <span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在基于 <code>@api_view</code> 装饰器的函数视图上设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@throttle_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>UserRateThrottle<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),D={id:"如何识别客户端",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#如何识别客户端","aria-hidden":"true"},"#",-1),L={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E5%AE%A2%E6%88%B7%E7%AB%AF",title:"如何识别客户端",target:"_blank",rel:"noopener noreferrer"},F=t("<p><code>X-Forwarded-For</code> HTTP header 和 <code>REMOTE_ADDR</code> WSGI 变量用于唯一标识用于限流的客户端 IP 地址。如果存在 <code>X-Forwarded-For</code> header ，则会使用它，否则将使用 WSGI 环境中的 <code>REMOTE_ADDR</code> 变量的值。</p><p>如果你需要严格标识唯一的客户端 IP 地址，则需要先通过设置 <code>NUM_PROXIES</code> setting 来配置 API 运行的应用代理的数量。该设置应该是一个零或更大的整数。如果设置为非零，则一旦任何应用程序代理 IP 地址首先被排除，客户端 IP 将被标识为 <code>X-Forwarded-For</code> header 中的最后一个 IP 地址。如果设置为零，则 <code>REMOTE_ADDR</code> 值将始终用作识别 IP 地址。</p><p>重要的是要理解，如果你配置了 <code>NUM_PROXIES</code> 设置，那么在一个唯一的 NAT 的网关后面的所有客户端将被当作一个单独的客户机来对待。</p>",3),I=n("code",null,"X-Forwarded-For",-1),U={href:"http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly#Multiple_Proxies_in_front_of_the_cluster",title:"这里找到",target:"_blank",rel:"noopener noreferrer"},P={id:"设置缓存",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#设置缓存","aria-hidden":"true"},"#",-1),j={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98",title:"设置缓存",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"LocMemCache",-1),C={href:"https://docs.djangoproject.com/en/stable/topics/cache/#setting-up-the-cache",title:"Django 的缓存文档",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>如果你需要使用 <code>&#39;default&#39;</code> 以外的缓存，则可以通过创建自定义限流类并设置 <code>cache</code> 属性来实现。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> caches

<span class="token keyword">class</span> <span class="token class-name">CustomAnonRateThrottle</span><span class="token punctuation">(</span>AnonRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cache <span class="token operator">=</span> caches<span class="token punctuation">[</span><span class="token string">&#39;alternate&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您需要记住还要在 <code>&#39;DEFAULT_THROTTLE_CLASSES&#39;</code> settings key 中设置自定义的限流类，或者使用 <code>throttle_classes</code> 视图属性。</p><hr>`,4),q={id:"限流api-参考",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#限流api-参考","aria-hidden":"true"},"#",-1),N={href:"http://drf.jiuyou.info/#/drf/throttling?id=api-%E5%8F%82%E8%80%83",title:"API 参考",target:"_blank",rel:"noopener noreferrer"},X={id:"anonratethrottle",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#anonratethrottle","aria-hidden":"true"},"#",-1),G={href:"http://drf.jiuyou.info/#/drf/throttling?id=anonratethrottle",title:"AnonRateThrottle",target:"_blank",rel:"noopener noreferrer"},K=t("<p><code>AnonRateThrottle</code> 将永远限制未认证的用户。通过传入请求的 IP 地址生成一个唯一的密钥来进行限制。</p><p>允许的请求频率由以下之一决定（按优先顺序）。</p><ul><li>类的 <code>rate</code> 属性，可以通过继承 <code>AnonRateThrottle</code> 并设置属性来提供。</li><li><code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 设置.</li></ul><p>如果你想限制未知来源的请求频率，<code>AnonRateThrottle</code> 是合适的。</p>",4),z={id:"userratethrottle",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#userratethrottle","aria-hidden":"true"},"#",-1),Q={href:"http://drf.jiuyou.info/#/drf/throttling?id=userratethrottle",title:"UserRateThrottle",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p><code>UserRateThrottle</code> 通过 API 将用户请求限制为给定的请求频率。用户标识用于生成一个唯一的密钥来加以限制。未经身份验证的请求将回退到使用传入请求的 IP 地址生成一个唯一的密钥来进行限制。</p><p>允许的请求频率由以下之一决定（按优先顺序）。</p><ul><li>类的 <code>rate</code> 属性，可以通过继承 <code>UserRateThrottle</code> 并设置属性来提供。</li><li><code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 设置.</li></ul><p>一个 API 可能同时具有多个 <code>UserRateThrottles</code>。为此，请继承 <code>UserRateThrottle</code> 并为每个类设置一个唯一的“范围”。</p><p>例如，多个用户限流率可以通过使用以下类来实现......</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BurstRateThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    scope <span class="token operator">=</span> <span class="token string">&#39;burst&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">SustainedRateThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    scope <span class="token operator">=</span> <span class="token string">&#39;sustained&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...和以下设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;example.throttles.BurstRateThrottle&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;example.throttles.SustainedRateThrottle&#39;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;burst&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;60/min&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;sustained&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望对每个用户进行简单的全局速率限制，那么 <code>UserRateThrottle</code> 是合适的。</p><h3 id="scopedratethrottle" tabindex="-1"><a class="header-anchor" href="#scopedratethrottle" aria-hidden="true">#</a> ScopedRateThrottle</h3><p><code>ScopedRateThrottle</code> 类可用于限制对 API 特定部分的访问。只有当正在访问的视图包含 <code>.throttle_scope</code> 属性时才会应用此限制。然后通过将请求的 “范围” 与唯一的用户标识或 IP 地址连接起来形成唯一的限流密钥。</p><p>允许的请求频率由 <code>DEFAULT_THROTTLE_RATES</code> setting 使用请求 “范围” 中的一个键确定。</p><p>例如，给出以下视图...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ContactListView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;contacts&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">ContactDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;contacts&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">UploadView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;uploads&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及以下设置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.throttling.ScopedRateThrottle&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;contacts&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;uploads&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户对 <code>ContactListView</code> 或 <code>ContactDetailView</code> 的请求将被限制为每天 1000 次。用户对 <code>UploadView</code> 的请求将被限制为每天 20 次</p>`,17),Z={id:"自定义限流",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#自定义限流","aria-hidden":"true"},"#",-1),nn={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81",title:"自定义限流",target:"_blank",rel:"noopener noreferrer"},sn=t("<p>要自定义限流，请继承 <code>BaseThrottle</code> 类并实现 <code>.allow_request(self, request, view)</code> 方法。如果请求被允许，该方法应该返回 <code>True</code>，否则返回 <code>False</code>。</p><p>或者，你也可以重写 <code>.wait()</code> 方法。如果实现，<code>.wait()</code> 应该返回建议的秒数，在尝试下一次请求之前等待，或者返回 <code>None</code>。如果 <code>.allow_request()</code> 先前已经返回 <code>False</code>，则只会调用 <code>.wait()</code> 方法。</p><p>如果 <code>.wait()</code> 方法被实现并且请求受到限制，那么 <code>Retry-After</code> header 将包含在响应中。</p>",3),an={id:"举个栗子",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#举个栗子","aria-hidden":"true"},"#",-1),tn={href:"http://drf.jiuyou.info/#/drf/throttling?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90",title:"举个栗子",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>以下是限流的一个示例，随机地控制每 10 次请求中的 1 次。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">class</span> <span class="token class-name">RandomRateThrottle</span><span class="token punctuation">(</span>throttling<span class="token punctuation">.</span>BaseThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">allow_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function pn(cn,ln){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[s("官方原文链接"),e(a)])])]),n("h1",u,[h,s(),n("a",k,[s("限流（Throttling）"),e(a)])]),_,v,m,E,b,n("h2",g,[f,s(),n("a",T,[s("如何确定限流"),e(a)])]),A,R,n("h2",w,[y,s(),n("a",B,[s("设置限流策略"),e(a)])]),S,n("h2",D,[x,s(),n("a",L,[s("如何识别客户端"),e(a)])]),F,n("p",null,[s("关于 "),I,s(" header 如何工作以及识别远程客户端 IP 的更多内容可以在"),n("a",U,[s("这里找到"),e(a)]),s("。")]),n("h2",P,[O,s(),n("a",j,[s("设置缓存"),e(a)])]),n("p",null,[s("REST framework 提供的限流类使用 Django 的缓存后端。你应该确保你已经设置了适当的缓存 setting 。对于简单的设置，"),V,s(" 后端的默认值应该没问题。有关更多详细信息，请参阅 "),n("a",C,[s("Django 的缓存文档"),e(a)]),s("。")]),H,n("h1",q,[M,s(" 限流"),n("a",N,[s("API 参考"),e(a)])]),n("h2",X,[W,s(),n("a",G,[s("AnonRateThrottle"),e(a)])]),K,n("h2",z,[J,s(),n("a",Q,[s("UserRateThrottle"),e(a)])]),Y,n("h1",Z,[$,s(),n("a",nn,[s("自定义限流"),e(a)])]),sn,n("h2",an,[en,s(),n("a",tn,[s("举个栗子"),e(a)])]),on])}const un=o(l,[["render",pn],["__file","Rest-framework专栏讲解(十八)：Throttling.html.vue"]]);export{un as default};
