<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://vuepress-theme-hope-docs-demo.netlify.app/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://vuepress-theme-hope-docs-demo.netlify.app/</id>
  <title>暴走の海鸽</title>
  <subtitle>暴走の海鸽</subtitle>
  <icon>https://vuepress-theme-hope-docs-demo.netlify.app/logo.svg</icon>
  <updated>2023-09-14T11:06:00.583Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://vuepress-theme-hope-docs-demo.netlify.app/atom.xml"/>
  <link rel="alternate" href="https://vuepress-theme-hope-docs-demo.netlify.app/"/>
  <contributor>
    <name>暴走の海鸽</name>
  </contributor>
  <contributor>
    <name>深圳kykj-粉丝面试整理</name>
  </contributor>
  <contributor>
    <name>千巡科技-粉丝面试整理</name>
  </contributor>
  <entry>
    <title type="text">99.9%的人都会犯错的几个Python小常识！</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/%E5%87%A0%E4%B8%AA%E6%98%93%E9%94%99%E7%9A%84Python%E5%B0%8F%E5%B8%B8%E8%AF%86.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/%E5%87%A0%E4%B8%AA%E6%98%93%E9%94%99%E7%9A%84Python%E5%B0%8F%E5%B8%B8%E8%AF%86.html"/>
    <updated>2023-09-05T09:26:04.000Z</updated>
    <summary type="html"><![CDATA[<p>大家好，我是暴走の海鸽~</p>
<p>本期整理了几个基础python防坑小常识，希望对大家有所帮助。</p>
<h2> 1. type == object？</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<p>大家好，我是暴走の海鸽~</p>
<p>本期整理了几个基础python防坑小常识，希望对大家有所帮助。</p>
<h2> 1. type == object？</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>isinstance(type, object)：这个表达式返回 True，因为在 Python 中，type 是一种类型，而 object 也是一种类型，它们都是对象的基类。</p>
</li>
<li>
<p>isinstance(object, type)：同样返回 True，因为 object 是 Python 中所有对象的基类，因此它也可以被视为一种类型。</p>
</li>
<li>
<p>isinstance(object, object)：这个表达式也返回 True，因为 object 是 object 类型的实例，它自己也是一种对象。</p>
</li>
<li>
<p>isinstance(type, type)：同样返回 True，因为 type 本身也是一种类型，可以用来描述其他类型。</p>
</li>
</ul>
<p>在 Python 中，所有东西都是对象，因此对于对象的任何实例检查都将返回<code>True</code>。</p>
<ul>
<li><code>isinstance(Anything, object) --&gt; True</code></li>
</ul>
<p>Python 的 type 表示构建所有 Python 类型的元类。因此，所有类型，如 int、str、object 都是 type 类的实例，而 type 类本身也是一个对象，与 Python 中的一切一样。</p>
<p>type 是 Python 中唯一一个自身是自己实例的对象。</p>
<h2> 2. all函数、any函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据内置函数 any 的定义，我们知道它将：</p>
<p>如果 iterable 中的任何元素为 True，则返回 True。</p>
<p>Python 中的逻辑运算符是惰性的，算法是查找第一个 True 元素的出现情况，如果没有找到，则返回 False。由于序列为空，因此没有元素可以是 True，因此 any([]) 返回 False。</p>
<p>all 的例子稍微有些复杂，因为它表示真空的真实性。与链式惰性逻辑运算符类似，算法是查找第一个 False 元素，如果没有找到，则返回 True。由于在空序列中没有false 元素，因此 all([]) 返回 True。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3. 链式运算</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>
在python中，<code>==</code>运算符和<code>in</code>运算符都具有相同的优先级，并且它们都是从左到右结合的。因此<code>False == False in [False]</code>实际上是<code>(False == False) and (False in [False]</code>的简写形式。</p>
<p>加个栗子理解下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><a href="https://stackoverflow.com/questions/7479808/python-operator-precedence-of-in-and-comparison" target="_blank" rel="noopener noreferrer">'1' in '11' == True</a><br>
<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" target="_blank" rel="noopener noreferrer">python运算符优先级和结合性</a></p>
</blockquote>
<h2> 4. sorted函数和reversed函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：sorted 方法返回的是一个list，reversed 方法返回的是一个iterator。</p>
</blockquote>
<h2> 5. 布尔值</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Python 将 False 视为 0， True 视为 1</p>
</blockquote>
<h2> 6. round函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么 round(5 / 2) 返回 2 而不是 3？这里的问题在于 Python 的 round 方法实现了银行家舍入，其中所有半值都将四舍五入到最接近的偶数。<br>
即：</p>
<ul>
<li>
<p>如果小数部分小于 0.5，则舍弃小数部分，不进行舍入。</p>
</li>
<li>
<p>如果小数部分大于 0.5，则向上舍入到最接近的整数。</p>
</li>
<li>
<p>如果小数部分等于 0.5，且前一位的整数部分是奇数，则向上舍入到最接近的偶数。</p>
</li>
<li>
<p>如果小数部分等于 0.5，且前一位的整数部分是偶数，则向下舍入到最接近的偶数。</p>
</li>
</ul>
<h2> 7. python列表+和+=的区别</h2>
<p><code>+</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+=</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<ul>
<li><code>+</code>用于连接两个列表，生成一个新的列表。</li>
<li><code>+=</code>用于将一个列表与另一个列表相加，并将结果存储在原始列表中，修改原始列表。</li>
</ul>
</blockquote>
<h2> 8. 列表del元素</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们试图删除列表中的偶数元素。然而，这个代码会导致错误，因为在删除元素后，列表的长度发生变化，但循环中的索引 <code>i</code> 仍然会增加，这可能会导致索引超出列表边界的错误。</p>
<p>为了避免这种错误，可以使用以下方法之一来移除元素：</p>
<ol>
<li>创建一个新列表，只包含要保留的元素，而不删除原始列表的元素。</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>使用倒序循环，以避免索引问题。</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法可以避免在移除元素时引发错误，并确保代码正常运行。</p>
<h2> 9. 修改sum([])的默认返回值</h2>
<p>我们知道<code>sum([])</code>的返回值为0，那有没有办法修改呢，比如返回<code>0.0</code>,答案是：有的。而且就在sum函数的签名里。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 小结</h2>
<p>尽管如此，Python 仍然以其清晰透明的编程语言特性而闻名。在编写本文时，我遇到了许多这样的代码片段，它们可能在早期版本的 Python 中表现出反直觉的行为，但在新版本中得到了修复或社区的解释。上述示例代表了 Python 语法的某些边界情况，而在实际的商业项目中，遇到这些情况的机会相对较小。</p>
<p>然而，检查和理解这样的“陷阱”可以帮助您更深入地理解 Python 语言的内部结构，从而避免在编写代码时使用不常见的用例和可疑的编程做法，这可能会导致意外的错误和故障。因此，了解 Python 的行为和语法规则仍然是一个有价值的努力，尤其是对于那些希望编写高质量、可维护代码的开发人员来说。</p>
]]></content>
    <author>
      <name>暴走の海鸽</name>
    </author>
    <contributor>
      <name>暴走の海鸽</name>
    </contributor>
    <published>2023-09-05T09:26:04.000Z</published>
    <rights>Copyright by 暴走の海鸽</rights>
  </entry>
  <entry>
    <title type="text">python面试题(2)</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230830_kykj%E9%9D%A2%E8%AF%95%E9%A2%98.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230830_kykj%E9%9D%A2%E8%AF%95%E9%A2%98.html"/>
    <updated>2023-08-31T10:07:09.000Z</updated>
    <summary type="html"><![CDATA[<h2> 一、 使用python实现一个单例模式对象。</h2>
<p>在 Python 中，你可以使用多种方法来实现单例模式，其中最常见的方法是使用装饰器或者元类。下面我会为你展示两种常见的实现方式：使用装饰器和使用元类。</p>
<p><strong>1. 使用装饰器实现单例模式：</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>
            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>

    <span class="token keyword">return</span> get_instance

<span class="token decorator annotation punctuation">@singleton</span>
<span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value

<span class="token comment"># 使用</span>
instance1 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">"Instance 1"</span><span class="token punctuation">)</span>
instance2 <span class="token operator">=</span> SingletonClass<span class="token punctuation">(</span><span class="token string">"Instance 2"</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># Output: Instance 1 (same as instance1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>instance1 <span class="token keyword">is</span> instance2<span class="token punctuation">)</span>  <span class="token comment"># Output: True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2> 一、 使用python实现一个单例模式对象。</h2>
<p>在 Python 中，你可以使用多种方法来实现单例模式，其中最常见的方法是使用装饰器或者元类。下面我会为你展示两种常见的实现方式：使用装饰器和使用元类。</p>
<p><strong>1. 使用装饰器实现单例模式：</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用元类实现单例模式：</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法都可以实现单例模式，你可以根据自己的喜好选择其中一种。元类的方法在一些高级场景下可能更灵活，但装饰器的方法更为简洁。</p>
<p>当使用 <code>__new__</code> 函数来实现单例模式时，你可以在 <code>__new__</code> 方法中控制实例的创建和返回。这里我将为你展示如何使用 <code>__new__</code> 函数实现单例模式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>__new__</code> 方法首先检查 <code>_instance</code> 属性，如果该属性为 <code>None</code>，则创建一个新的实例并将其赋值给 <code>_instance</code>。如果 <code>_instance</code> 不为 <code>None</code>，则返回现有的实例。这样确保了只有一个实例被创建和使用。</p>
<p>注意，这种方法不是线程安全的。如果你需要在多线程环境下使用单例模式，你需要考虑线程安全性并可能采取额外的措施来保护 <code>_instance</code> 的访问和修改。</p>
<p><code>优化</code><br>
实现并发安全的单例模式需要考虑多线程或多进程环境下的竞争条件。以下是使用线程安全的方式来实现并发安全的单例模式的示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用了一个互斥锁 (<code>_lock</code>) 来确保在创建实例时只有一个线程能够进入临界区。这样可以防止多个线程同时创建实例，从而保证了单例模式的线程安全性。</p>
<p>请注意，这只是一个线程安全的示例。如果你需要在多进程环境中使用单例模式，你可能需要使用 <code>multiprocessing.Lock</code> 来实现进程间的同步。</p>
<p>此外，还可以考虑使用更高级的线程安全工具，例如 <code>threading.RLock</code> 或 <code>threading.Condition</code>，以便更好地满足你的并发需求。</p>
<blockquote>
<p>这里只是给出一些范例，具体使用及优化请根据实际场景适配。</p>
</blockquote>
<h2> 二、 请使用异步的方式（多进程/线程/协程等）循环交替打印A和B各50次。</h2>
<p>输出示例如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>协程版</code><br>
下面是使用异步协程的方式来实现交替打印 A 和 B 各 50 次的示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个异步函数 <code>print_a_b</code> 来循环打印指定的值（'A' 或 'B'）。我们使用 <code>asyncio.Lock</code> 来确保打印操作的互斥，从而避免同时打印 A 和 B。</p>
<p>通过创建两个异步任务（分别打印 A 和 B），我们使用 <code>asyncio.gather</code> 来等待它们完成。</p>
<p>运行以上代码，你会得到类似于你描述的交替打印 A 和 B 的输出。注意，由于异步性质，可能会有微小的延迟，但总体上会保持交替打印。</p>
<p><code>多线程版</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个 AlternatePrinter 类，其中包含两个方法 print_a 和 print_b，分别用于打印 A 和 B。我们使用条件变量 threading.Condition 来确保线程的交替执行。在每次打印完后，线程会改变 turn 变量的值，然后通过 condition.notify() 唤醒等待的线程。</p>
<p>通过创建两个线程分别执行 print_a 和 print_b，线程将会交替打印 A 和 B。</p>
<p>运行以上代码，你会得到你所期望的交替打印 A 和 B 的输出。</p>
<h2> 三、你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题可以使用二分查找来解决，以减少调用 <code>isBadVersion</code> 函数的次数。由于每个错误的版本之后的版本都是错误的，我们可以将问题转化为在版本列表中寻找第一个满足条件的版本，也就是找到最左边的 <code>True</code> 值。以下是使用二分查找的示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用二分查找来找到第一个错误的版本。我们初始化 <code>left</code> 和 <code>right</code> 分别为 1 和 n，然后在每一步中计算 <code>mid</code>，并根据 <code>isBadVersion(mid)</code> 的结果来更新 <code>left</code> 和 <code>right</code>。如果 <code>isBadVersion(mid)</code> 返回 <code>True</code>，说明当前版本是错误的，我们将搜索范围缩小到左半部分；否则，搜索范围缩小到右半部分。</p>
<p>最终，当 <code>left</code> 和 <code>right</code> 相等时，就找到了第一个错误的版本，返回该版本号即可。</p>
<p>这种方法有效地减少了对 <code>isBadVersion</code> 函数的调用次数，通过二分查找的方式快速定位到第一个错误的版本。</p>
<h2> 四、请简述下python中的__new__和__init__的区别。</h2>
<p>在Python中，<code>__new__</code> 和 <code>__init__</code> 是两个特殊的方法，用于创建和初始化对象。它们在类的实例化过程中起着不同的作用。</p>
<ol>
<li>
<p><code>__new__</code> 方法：</p>
<ul>
<li><code>__new__</code> 是一个类级别的方法，负责创建并返回实例对象。它在对象创建之前调用，并且通常是静态方法，接受一个类作为第一个参数，然后传递其他参数来创建实例。</li>
<li>该方法的主要作用是控制实例对象的创建过程，可以在创建实例之前做一些额外的处理，或者返回一个已有的实例（单例模式）。</li>
<li>如果重写了 <code>__new__</code> 方法，通常需要确保返回一个有效的实例对象，否则会导致后续的初始化（<code>__init__</code>）等步骤无法进行。</li>
</ul>
</li>
<li>
<p><code>__init__</code> 方法：</p>
<ul>
<li><code>__init__</code> 是一个实例级别的方法，负责初始化实例的属性。它在对象创建之后调用，接受实例对象作为第一个参数，然后可以传递其他参数来初始化实例的属性。</li>
<li>该方法的主要作用是设置对象的属性，进行一些必要的初始化操作。</li>
<li><code>__init__</code> 不负责创建实例对象，而是在实例已经创建之后，对其进行属性的初始化。</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><code>__new__</code> 用于创建实例对象，它是类级别的方法，控制对象的创建过程。</li>
<li><code>__init__</code> 用于初始化实例对象的属性，它是实例级别的方法，对已经创建的对象进行属性的设置。</li>
</ul>
<p>通常情况下，当你想要自定义对象的创建过程时，你会重写 <code>__new__</code> 方法；而当你需要设置对象的属性或执行其他初始化操作时，你会重写 <code>__init__</code> 方法。</p>
<h2> 五、请描述下Python的多线程管理。</h2>
<p>在 Python 中，多线程管理是通过 <code>threading</code> 模块来实现的。Python 中的多线程是基于操作系统的线程实现的，但由于 Python 全局解释器锁（GIL）的存在，多线程并不能真正实现并行运行。GIL 导致在同一时刻只有一个线程可以执行 Python 字节码，从而限制了多线程在 CPU 密集型任务中的性能表现。</p>
<p>以下是 Python 多线程管理的一些关键概念和函数：</p>
<ol>
<li>
<p><strong>线程创建：</strong> 使用 <code>threading.Thread</code> 类可以创建一个新的线程。通过传入一个函数作为参数，可以指定线程要执行的操作。</p>
</li>
<li>
<p><strong>线程启动：</strong> 调用线程对象的 <code>start()</code> 方法会启动线程，并开始执行指定的函数。</p>
</li>
<li>
<p><strong>线程同步：</strong> 在多线程环境中，由于共享资源的存在，可能会出现竞争条件。为了确保线程安全，可以使用锁（<code>threading.Lock</code>）等同步原语来协调线程之间的操作。</p>
</li>
<li>
<p><strong>锁机制：</strong> 锁（<code>threading.Lock</code>）用于防止多个线程同时访问共享资源。在一个线程获得锁之后，其他线程必须等待锁被释放后才能获取锁。</p>
</li>
<li>
<p><strong>线程间通信：</strong> 多个线程之间可能需要相互通信和协调，可以使用 <code>threading.Event</code>、<code>threading.Condition</code>、<code>threading.Semaphore</code> 等进行线程间通信。</p>
</li>
<li>
<p><strong>线程状态：</strong> 线程可以处于不同的状态，如就绪、运行、阻塞等。可以使用线程对象的 <code>is_alive()</code> 方法来检查线程是否还在运行。</p>
</li>
<li>
<p><strong>守护线程：</strong> 可以将线程设置为守护线程（<code>thread.daemon = True</code>），这样在主线程退出时，守护线程会随之结束。</p>
</li>
<li>
<p><strong>线程池：</strong> <code>concurrent.futures</code> 模块提供了线程池和进程池的高级接口，用于并行地执行函数。</p>
</li>
</ol>
<p>需要注意的是，由于 GIL 的存在，Python 中的多线程主要适用于 I/O 密集型任务，如网络请求、文件操作等。对于 CPU 密集型任务，多线程并不能充分利用多核 CPU，此时可以考虑使用多进程来实现并行运算。</p>
<p>总的来说，Python 的多线程管理提供了一些基本的线程操作和同步机制，但由于 GIL 的限制，多线程在并行计算方面可能不如其他语言或多进程方式。</p>
<h2> 六、请列出Python中可变数据类型和不可变数据类型，CPython是如何实现的？</h2>
<p>在 Python 中，数据类型分为可变和不可变两种。可变数据类型是指对象的值可以被修改，而不可变数据类型是指对象的值一旦创建就无法更改。以下是 Python 中常见的可变和不可变数据类型：</p>
<p>可变数据类型（Mutable）：</p>
<ol>
<li>列表（List）</li>
<li>字典（Dictionary）</li>
<li>集合（Set）</li>
</ol>
<p>不可变数据类型（Immutable）：</p>
<ol>
<li>数字（int、float、complex）</li>
<li>字符串（str）</li>
<li>元组（tuple）</li>
<li>冻结集合（frozenset）</li>
</ol>
<p>CPython 是 Python 的标准实现，它在内存中的数据存储方式与数据类型的可变性密切相关。下面简要描述了 CPython 如何实现可变和不可变数据类型：</p>
<p><strong>可变数据类型（如列表、字典、集合）的实现：</strong></p>
<ol>
<li>在内存中创建一个对象，对象包含了实际的数据和相关的控制信息，如对象类型、大小等。</li>
<li>对象中的数据可以被修改，例如对列表进行添加、删除、修改等操作。这些操作可能会引起对象在内存中的位置发生变化，即重新分配内存空间。</li>
<li>当对象被修改时，CPython 会确保相关的引用仍然指向这个对象，从而保证所有引用该对象的变量都能看到修改后的值。</li>
</ol>
<p><strong>不可变数据类型（如数字、字符串、元组）的实现：</strong></p>
<ol>
<li>在内存中创建一个对象，对象包含实际的数据和控制信息。</li>
<li>一旦对象被创建，它的值就无法更改。如果对一个不可变对象进行修改操作，实际上会创建一个新的对象，并将修改后的值赋予新的对象。</li>
<li>不可变对象的值在内存中是固定的，这使得可以对多个变量共享同一个对象，从而节省内存。</li>
</ol>
<p>需要注意的是，不可变对象之所以被设计成不可变的，一方面是为了避免意外修改数据，另一方面是为了在实现中可以进行一些优化，例如缓存常见的不可变对象，以减少内存占用。</p>
<p>总之，CPython 的数据类型实现方式是基于对象和引用的，根据对象的可变性来决定如何存储和操作数据。这种实现方式使得 Python 的变量和数据类型的使用变得灵活且易于理解。</p>
<h2> 七、请简述下python 协程的实现原理？协程一般适用于什么场景？</h2>
<p>Python 协程的实现原理基于生成器（Generator）和 <code>yield</code> 关键字，以及使用特定的库（如 <code>asyncio</code>）来实现异步编程。协程通过避免阻塞并允许在单个线程内切换执行，实现了高效的异步操作。</p>
<p>实现协程的关键点如下：</p>
<ol>
<li>
<p><strong>生成器（Generator）：</strong> 生成器是一种特殊的函数，它使用 <code>yield</code> 关键字来暂停函数的执行并生成一个值，然后在后续调用中恢复执行。生成器在每次调用时会执行到 <code>yield</code> 语句，并将值返回给调用者。</p>
</li>
<li>
<p><strong><code>yield</code> 关键字：</strong> <code>yield</code> 用于将控制权返回给调用者，并且保留函数的状态。调用者可以使用 <code>.send()</code> 方法向生成器发送值，这个值会被 <code>yield</code> 表达式接收。</p>
</li>
<li>
<p><strong>异步库（如 asyncio）：</strong> 在 Python 中，为了实现高效的协程，通常使用异步库，如 <code>asyncio</code>。<code>asyncio</code> 提供了协程和事件循环，允许在单个线程内执行多个协程，根据需要进行切换。</p>
</li>
</ol>
<p>协程适用于以下场景：</p>
<ol>
<li>
<p><strong>异步编程：</strong> 协程在异步编程中起到关键作用。它可以处理大量并发任务，如网络请求、数据库查询等，而不会阻塞整个程序的执行。</p>
</li>
<li>
<p><strong>事件驱动编程：</strong> 协程适用于事件驱动的编程模型。例如，在用户交互、触发事件、消息传递等情况下，协程可以很好地处理异步任务。</p>
</li>
<li>
<p><strong>I/O 密集型任务：</strong> 当任务主要涉及 I/O 操作时，如读写文件、网络通信等，协程能够在 I/O 操作时切换到其他任务，从而提高程序的效率。</p>
</li>
<li>
<p><strong>并发任务管理：</strong> 协程可以方便地管理大量并发任务，而不需要关注线程或进程的开销和同步问题。</p>
</li>
</ol>
<p>总之，协程适用于需要高效处理异步操作和并发任务的场景。通过避免阻塞，协程可以在单线程内实现多个任务的协同执行，提高了程序的并发性能和响应性。</p>
<h2> 八、请简述Python的垃圾回收机制。</h2>
<p><a href="https://zhuanlan.zhihu.com/p/108683483" target="_blank" rel="noopener noreferrer">Python语法入门之垃圾回收机制</a><br>
<a href="https://cloud.tencent.com/developer/article/2045561" target="_blank" rel="noopener noreferrer">一文读懂Python垃圾回收机制</a></p>
]]></content>
    <author>
      <name>深圳kykj-粉丝面试整理</name>
    </author>
    <contributor>
      <name>深圳kykj-粉丝面试整理</name>
    </contributor>
    <published>2023-08-29T00:00:00.000Z</published>
    <rights>Copyright by 深圳kykj-粉丝面试整理</rights>
  </entry>
  <entry>
    <title type="text">python面试题(1)</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230829_%E6%B7%B1%E5%9C%B3%E5%8D%83%E5%B7%A1%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E9%A2%98.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230829_%E6%B7%B1%E5%9C%B3%E5%8D%83%E5%B7%A1%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E9%A2%98.html"/>
    <updated>2023-08-31T10:07:09.000Z</updated>
    <summary type="html"><![CDATA[<h2> 递归知道吗？简单说说吧</h2>
<p>递归是一种算法或编程技术，它是指在解决问题时使用函数自身的调用。简单来说，递归是将一个问题分解成一个或多个与原问题类似但规模较小的子问题来解决的方法。这些子问题会不断地缩小，直到它们变得足够简单，可以直接求解。</p>
<p>递归的关键在于分解和基本情况（也称为递归基）：</p>
<ol>
<li>
<p><strong>分解（Divide）：</strong> 在解决问题时，将问题分解成更小的子问题。每次递归调用时，问题的规模会减小，直到达到基本情况。</p>
</li>
<li>
<p><strong>基本情况（Base Case）：</strong> 这是递归的终止条件。当问题变得足够小，可以直接求解时，递归不再继续，而是返回一个确定的值。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2> 递归知道吗？简单说说吧</h2>
<p>递归是一种算法或编程技术，它是指在解决问题时使用函数自身的调用。简单来说，递归是将一个问题分解成一个或多个与原问题类似但规模较小的子问题来解决的方法。这些子问题会不断地缩小，直到它们变得足够简单，可以直接求解。</p>
<p>递归的关键在于分解和基本情况（也称为递归基）：</p>
<ol>
<li>
<p><strong>分解（Divide）：</strong> 在解决问题时，将问题分解成更小的子问题。每次递归调用时，问题的规模会减小，直到达到基本情况。</p>
</li>
<li>
<p><strong>基本情况（Base Case）：</strong> 这是递归的终止条件。当问题变得足够小，可以直接求解时，递归不再继续，而是返回一个确定的值。</p>
</li>
</ol>
<p>在使用递归时，确保每次递归调用都朝着基本情况靠近，以避免无限递归。如果每次递归调用都足够接近基本情况，递归最终会收敛到基本情况并停止。</p>
<p>一个经典的递归例子是计算阶乘。阶乘 n! 的定义是 n! = n * (n-1)!，其中基本情况是 0! = 1 和 1! = 1。</p>
<p>递归在编程中非常有用，但需要小心使用，因为不正确的递归调用可能导致无限循环和性能问题。理解问题如何被分解成更小的子问题以及何时达到基本情况是掌握递归的关键。</p>
<h2> 快排会吗？写一下?</h2>
<p>当然，我可以帮你写一个快速排序算法的示例代码。快速排序是一种常用的排序算法，它的基本思想是通过选择一个基准元素，将数组分成左右两部分，使得左边的元素都小于基准，右边的元素都大于基准，然后递归地对左右两部分进行排序。</p>
<p>以下是一个用 Python 实现的快速排序示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>quick_sort</code> 函数接受一个列表 <code>arr</code> 作为输入，然后递归地对左右两部分进行排序，并将排好序的左、中、右三个部分合并起来，最终得到完整的有序数组。这个例子中的基准元素选择方法是取数组中间的元素，实际上也可以选择其他的方法。</p>
<p>请注意，虽然这个示例代码演示了快速排序的基本思想，但在实际应用中，为了避免在最坏情况下的性能问题，可能需要考虑一些优化措施，比如随机选择基准元素，使用三路快排等。</p>
<h2> s = "sdsdscdffgdfcsdsdsd", 计算字符串s中c出现的位置和次数</h2>
<p>要计算字符串中字符 "c" 出现的位置和次数，你可以使用以下 Python 代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会遍历字符串 <code>s</code> 中的每个字符，如果字符等于目标字符 <code>c</code>，就将其位置添加到 <code>positions</code> 列表中，并增加计数器 <code>count</code> 的值。最后，打印出字符 "c" 的出现位置和总次数。</p>
]]></content>
    <author>
      <name>千巡科技-粉丝面试整理</name>
    </author>
    <contributor>
      <name>千巡科技-粉丝面试整理</name>
    </contributor>
    <published>2023-08-29T00:00:00.000Z</published>
    <rights>Copyright by 千巡科技-粉丝面试整理</rights>
  </entry>
  <entry>
    <title type="text">50道SQL经典面试题(上)</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8A).html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8A).html"/>
    <updated>2023-08-24T02:21:51.000Z</updated>
    <summary type="html"><![CDATA[<h1> 50道SQL经典面试题(上)</h1>
<p>原创 丶平凡世界</p>
<p>最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。  </p>
<p>我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。  </p>
<p>由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。</p>
<p><strong>一、表结构</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>Student<span class="token punctuation">(</span>Sid<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Ssex<span class="token punctuation">)</span>
学生编号，学生姓名，出生年月，学生性别
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 50道SQL经典面试题(上)</h1>
<p>原创 丶平凡世界</p>
<p>最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。  </p>
<p>我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。  </p>
<p>由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。</p>
<p><strong>一、表结构</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二、表之间的关系</strong></p>
<p>四张表之间的关系如下图：</p>
<figure><figcaption></figcaption></figure>
<p>我们来解读一下上面的关系：  </p>
<p>1、课程表Course的课程编号(Cid)作为主键，在成绩表(SC)中可以看到一个或多个学生的课程分数，两表之间是属于<code>1：n</code>的关系。同理学生表(Student)与成绩表(SC)也是<code>1：n</code>的关系</p>
<p>2、教师表Teacher的教师编号(Tid)作为主键，在课程表(Course)中可以带一门或多门课程，两表之间也是属于1：n的关系。</p>
<p><strong>三、测试数据</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p>
<figure><figcaption></figcaption></figure>
<p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p><strong>四、面试题及参考答案</strong></p>
<p>1、查询" 01 "课程比" 02"课程成绩高的学生的信息及课程分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、查询同时存在" 01 "课程和"02 "课程的情况</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、查询存在" 01 "课程但可能不存在"02 "课程的情况(不存在时显示为 null )</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、查询不存在" 01 "课程但存在"02 "课程的情况</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、查询在 SC 表存在成绩的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、查有成绩的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9、查询「李」姓老师的数量 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10、查询学过「张三」老师授课的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>11、查询没有学全所有课程的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>12、查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>13、查询和" 01 "号的同学学习的课程完全相同的其他同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>14、查询没学过"张三"老师讲授的任一门课程的学生姓名 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>16、检索" 01 "课程分数小于 60，按分数降序排列的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>18、查询各科成绩最高分、最低分和平均分：</p>
<p>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率  </p>
<p>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（提示：可以左右滑动代码）</p>
<p>19、按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>20 按各科成绩进行排序，并显示排名， Score 重复时合并名次</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>21、查询学生的总成绩，并进行排名，总分重复时保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>22 、查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>23、统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>24、查询各科成绩前三名的记录</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>25、查询每门课程被选修的学生数 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <published>2023-08-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">50道SQL经典面试题(下)</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8B).html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8B).html"/>
    <updated>2023-08-24T02:21:51.000Z</updated>
    <summary type="html"><![CDATA[<h1> 50道SQL经典面试题(下)</h1>
<p>原创 丶平凡世界 <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/92198ca5-d9f0-4d98-ab67-d20f976da33d/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_92198ca5-d9f0-4d98-ab67-d20f976da33d" target="_blank" rel="noopener noreferrer">SQL数据库开发</a> </p>]]></summary>
    <content type="html"><![CDATA[<h1> 50道SQL经典面试题(下)</h1>
<p>原创 丶平凡世界 <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/92198ca5-d9f0-4d98-ab67-d20f976da33d/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_92198ca5-d9f0-4d98-ab67-d20f976da33d" target="_blank" rel="noopener noreferrer">SQL数据库开发</a> </p>
<p>最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。  </p>
<p>我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。  </p>
<p>由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。</p>
<p><strong>一、表结构</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二、表之间的关系</strong></p>
<p>四张表之间的关系如下图：</p>
<figure><figcaption></figcaption></figure>
<p>我们来解读一下上面的关系：  </p>
<p>1、课程表Course的课程编号(Cid)作为主键，在成绩表(SC)中可以看到一个或多个学生的课程分数，两表之间是属于<code>1：n</code>的关系。同理学生表(Student)与成绩表(SC)也是<code>1：n</code>的关系</p>
<p>2、教师表Teacher的教师编号(Tid)作为主键，在课程表(Course)中可以带一门或多门课程，两表之间也是属于1：n的关系。</p>
<p><strong>三、测试数据</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p>
<figure><figcaption></figcaption></figure>
<p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p><strong>四、面试题及参考答案</strong></p>
<p>26、查询出只选修两门课程的学生学号和姓名 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>27、查询男生、女生人数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>28、查询名字中含有「风」字的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>29、查询同名同性学生名单，并统计这些人数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>30、查询 1990 年出生的学生名单</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>31、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>32、查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>33、查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>34、查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>35、查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>36、查询不及格的课程学生姓名，课程名及分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>37、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>38、求每门课程的学生人数（假设每个学生都有参加考试且有成绩）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>39、成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>40、成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>41、查询每门功成绩最好的前两名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>42、统计每门课程的学生选修人数（超过5人的课程才统计），要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>43、检索至少选修两门课程的学生学号 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>44、查询选修了全部课程的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>45、查询各学生的年龄，只按年份来算</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>46、按照出生日期来算，当前月日小于出生日期的月日则年龄减1岁</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>47、查询本周过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>48、查询下周过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>49、查询本月过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>50、查询下月过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是50道经典SQL面试题的全部内容</p>
]]></content>
    <published>2023-08-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">golang学习路线</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_golang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_golang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html"/>
    <updated>2023-08-24T02:21:51.000Z</updated>
    <published>2023-08-22T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">python学习路线</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html"/>
    <updated>2023-08-24T02:21:51.000Z</updated>
    <published>2023-08-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">程序员面试刷题路线</title>
    <id>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF.html</id>
    <link href="https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF.html"/>
    <updated>2023-08-29T06:06:28.000Z</updated>
    <summary type="html"><![CDATA[<p>大家好，我是<code>海鸽</code></p>
<p>金九银十马上到了，海鸽在此整理下面试刷题准备路线供你参考，希望对你有所帮助~</p>
<p>程序员面试的刷题路线可以根据你的目标岗位和面试准备时间的长短来进行调整。</p>
<h2> MySQL刷题</h2>
<ul>
<li>这里推荐田螺哥开源的一个刷题仓库，这里不仅可以刷MySQL常见面试题，还囊括了JAVA开发的各种技能的面试准备，仓库的地址是：</li>
</ul>
<blockquote>
<p><a href="https://github.com/whx123/JavaHome/tree/master" target="_blank" rel="noopener noreferrer">https://github.com/whx123/JavaHome/tree/master</a></p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<p>大家好，我是<code>海鸽</code></p>
<p>金九银十马上到了，海鸽在此整理下面试刷题准备路线供你参考，希望对你有所帮助~</p>
<p>程序员面试的刷题路线可以根据你的目标岗位和面试准备时间的长短来进行调整。</p>
<h2> MySQL刷题</h2>
<ul>
<li>这里推荐田螺哥开源的一个刷题仓库，这里不仅可以刷MySQL常见面试题，还囊括了JAVA开发的各种技能的面试准备，仓库的地址是：</li>
</ul>
<blockquote>
<p><a href="https://github.com/whx123/JavaHome/tree/master" target="_blank" rel="noopener noreferrer">https://github.com/whx123/JavaHome/tree/master</a></p>
</blockquote>
<ul>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247499624&amp;idx=1&amp;sn=561b9cb7fe831ca7cb2d9fd65691e85e&amp;chksm=cf222041f855a957ac50c0a53baaec6d26be32427259b2974450620f33a8c834419fe535e83d&amp;token=767319274&amp;lang=zh_CN&amp;scene=21#wechat_redirect:~:text=%E7%9B%98%E7%82%B9MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9A%8412%E4%B8%AA%E5%8E%9F%E5%9B%A0,-%E5%8E%9F%E5%88%9B" target="_blank" rel="noopener noreferrer">盘点MySQL慢查询的12个原因</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247504369&amp;idx=1&amp;sn=8628a5aaec0dc8f85d06080e11072ce2&amp;chksm=cf220ed8f85587ce7f7dfebdaf160b7b54bdca6a773411e59f8df5f50604760a5c121c088bb5&amp;token=1211708820&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SQL优化13连问，收藏好！</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247490571&amp;idx=1&amp;sn=e8638573ec8d720fd25da5b2b0d90ed2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">看一遍就理解：order by详解</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247487972&amp;idx=1&amp;sn=cd035a7fcd7496658846ab9f914be2db&amp;chksm=cf21cecdf85647dbc53e212bf1a2b95d0eb2bffe08dc0141e01f8a9b2088abffc385a2ef584e&amp;token=1569911403&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">后端程序员必备：书写高质量SQL的30条建议</a></p>
</li>
</ul>
<h2> 算法刷题</h2>
<blockquote>
<p><code>LeetCode</code>：<a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/</a></p>
</blockquote>
<h2> Redis刷题</h2>
]]></content>
    <published>2023-08-23T00:00:00.000Z</published>
  </entry>
</feed>