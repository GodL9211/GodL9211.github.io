<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml" rel="self" type="application/rss+xml"/>
    <title>暴走の海鸽</title>
    <link>https://vuepress-theme-hope-docs-demo.netlify.app/</link>
    <description>暴走の海鸽</description>
    <language>zh-CN</language>
    <pubDate>Thu, 21 Dec 2023 10:04:34 GMT</pubDate>
    <lastBuildDate>Thu, 21 Dec 2023 10:04:34 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>数据库</category>
    <item>
      <title>DRF框架中常用的组件</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">DRF框架中常用的组件</source>
      <description>目录 1. 认证 (#1-认证); 1.1全局认证 (#11全局认证); 1.2部分认证 (#12部分认证); 2.权限 (#2权限); 2.1提供的权限 (#21提供的权限); 2.2全局配置 (#22全局配置); 2.3局部权限 (#23局部权限); 2.4自定义权限 (#24自定义权限); 3. 限流 (#3-限流); 3.1定义 (#31定义)...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> DRF框架中常用的组件</h1>
<h2> 目录</h2>
<ul>
<li><a href="#1-%E8%AE%A4%E8%AF%81">1. 认证</a>
<ul>
<li><a href="#11%E5%85%A8%E5%B1%80%E8%AE%A4%E8%AF%81">1.1全局认证</a></li>
<li><a href="#12%E9%83%A8%E5%88%86%E8%AE%A4%E8%AF%81">1.2部分认证</a></li>
</ul>
</li>
<li><a href="#2%E6%9D%83%E9%99%90">2.权限</a>
<ul>
<li><a href="#21%E6%8F%90%E4%BE%9B%E7%9A%84%E6%9D%83%E9%99%90">2.1提供的权限</a></li>
<li><a href="#22%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">2.2全局配置</a></li>
<li><a href="#23%E5%B1%80%E9%83%A8%E6%9D%83%E9%99%90">2.3局部权限</a></li>
<li><a href="#24%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90">2.4自定义权限</a></li>
</ul>
</li>
<li><a href="#3-%E9%99%90%E6%B5%81">3. 限流</a>
<ul>
<li><a href="#31%E5%AE%9A%E4%B9%89">3.1定义</a></li>
<li><a href="#32%E5%85%A8%E5%B1%80%E9%99%90%E6%B5%81">3.2全局限流</a></li>
<li><a href="#33%E5%B1%80%E9%83%A8%E9%99%90%E6%B5%81">3.3局部限流</a></li>
</ul>
</li>
<li><a href="#4-%E8%BF%87%E6%BB%A4">4. 过滤</a>
<ul>
<li><a href="#41%E5%AE%9A%E4%B9%89">4.1定义</a></li>
<li><a href="#42%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">4.2全局配置</a></li>
<li><a href="#43%E5%B1%80%E9%83%A8%E9%85%8D%E7%BD%AE">4.3局部配置</a></li>
</ul>
</li>
<li><a href="#5-%E6%8E%92%E5%BA%8F">5. 排序</a>
<ul>
<li><a href="#51%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F">5.1基本排序</a></li>
<li><a href="#2%E8%BF%87%E6%BB%A4%E6%8E%92%E5%BA%8F">2.过滤排序</a></li>
</ul>
</li>
<li><a href="#6-%E5%88%86%E9%A1%B5">6. 分页</a>
<ul>
<li><a href="#61%E5%85%A8%E5%B1%80%E5%88%86%E9%A1%B5">6.1.全局分页</a></li>
<li><a href="#2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5">2.自定义分页</a>
<ul>
<li><a href="#1%E9%A1%B5%E7%A0%81%E5%88%86%E9%A1%B5%E7%B1%BB">1.页码分页类</a></li>
<li><a href="#2%E5%81%8F%E7%A7%BB%E5%88%86%E9%A1%B5%E7%B1%BB">2.偏移分页类</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#7-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-Exceptions">7. 异常处理 Exceptions</a>
<ul>
<li><a href="#1DRF%E7%9A%84%E5%BC%82%E5%B8%B8">1.DRF的异常</a></li>
<li><a href="#2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8">2.自定义异常</a></li>
</ul>
</li>
<li><a href="#8-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3">8. 自动生成接口文档</a>
<ul>
<li><a href="#81-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">8.1. 安装依赖</a></li>
<li><a href="#82-%E8%AE%BE%E7%BD%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84">8.2. 设置接口文档访问路径</a>
<ul>
<li><a href="#83-%E6%96%87%E6%A1%A3%E6%8F%8F%E8%BF%B0%E8%AF%B4%E6%98%8E%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BD%8D%E7%BD%AE">8.3. 文档描述说明的定义位置</a></li>
</ul>
</li>
<li><a href="#84-%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%BD%91%E9%A1%B5">8.4. 访问接口文档网页</a>
<ul>
<li><a href="#%E4%B8%A4%E7%82%B9%E8%AF%B4%E6%98%8E">两点说明：</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_44689630/article/details/118079118" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_44689630/article/details/118079118</a></p>
<p>为了方便接下来的学习，我们创建一个新的子应用 opt</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提前在总路由和配置文件中注册子应用和配置总路由。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为接下来的功能中需要使用到登陆功能，所以我们使用django内置admin站点并创建一个管理员.</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>创建管理员以后，访问admin站点，先修改站点的语言配置:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>访问admin 站点效果：</p>
<figure><figcaption></figcaption></figure>
<h2> 1. 认证</h2>
<h3> 1.1全局认证</h3>
<p>可以在/rest_framework/settings.py配置文件中查询全局默认的认证方案</p>
<p>可以在项目的主应用的settings.py配置文件中加入以下配置覆盖全局默认的配置方案</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2部分认证</h3>
<p>可以在每个视图中通过设置authentication_classess类属性来设置</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>认证失败</strong>会有两种可能的返回值,这个需要我们配合<strong>权限组件</strong>来使用：</p>
<table>
<thead>
<tr>
<th>编码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>401</td>
<td>Unauthorized 未认证</td>
</tr>
<tr>
<td>403</td>
<td>Permission Denied 权限被禁止</td>
</tr>
</tbody>
</table>
<h2> 2.权限</h2>
<p>权限控制可以限制用户对于视图的访问和对于具体数据模型对象的访问。</p>
<ul>
<li>在执行视图的as_view()方法的dispatch()方法前,会先进行视图访问权限的判断</li>
<li>在通过get_object()获取具体模型对象时,会进行模型对象访问权限的判断</li>
</ul>
<h3> 2.1提供的权限</h3>
<table>
<thead>
<tr>
<th>权限</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>AllowAny</td>
<td>允许所有用户</td>
</tr>
<tr>
<td>IsAuthenticated</td>
<td>仅通过登录认证的用户</td>
</tr>
<tr>
<td>IsAdminUser</td>
<td>仅管理员用户</td>
</tr>
<tr>
<td>IsAuthenticatedOrReadOnly</td>
<td>已经登陆认证的用户可以对数据进行增删改操作，没有登陆认证的只能查看数据。</td>
</tr>
</tbody>
</table>
<h3> 2.2全局配置</h3>
<p>在配置文件settings.py中全局设置默认的权限管理类，如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未指明，则采用如下默认配置</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p>
<blockquote>
<p>drf的配置信息,需要卸载django的配置文件,而且必须写在REST_FRAMEWORK的字典中,才能被drf识别</p>
<p>chorme浏览器进入无痕模式的快捷键，Ctrl+Shift+N</p>
</blockquote>
<h3> 2.3局部权限</h3>
<p>可以在具体的视图中通过permission_classes属性来设置，如:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.4自定义权限</h3>
<p>自定义权限,需继承rest_framework.permissions.BasePermission父类,并实现以下两个任何一个方法或全部</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.has_permission(self, request, view)</code></td>
<td>是否可以访问视图,view表示当前<strong>视图对象</strong></td>
</tr>
<tr>
<td><code>.has_object_permission(self, request, view, obj)</code></td>
<td>是否可以访问数据模型对象, view表示当前<strong>视图</strong>, <strong>obj为模型数据对象</strong></td>
</tr>
</tbody>
</table>
<p>在当前子应用下,创建一个权限文件permissions.py中声明自定义权限类:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 3. 限流</h1>
<h3> 3.1定义</h3>
<p>目地:</p>
<blockquote>
<p>可以对接口访问的频次进行限制,以减轻服务器压力,或者实现特定的业务</p>
</blockquote>
<p>场景:</p>
<blockquote>
<p>一般用于付费购买次数,投票等场景使用.</p>
</blockquote>
<p><strong>Throttling限流类</strong></p>
<table>
<thead>
<tr>
<th>可选类</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>AnonRateThrottle</td>
<td>限制所有匿名未认证用户,使用IP区分用户,使用<code>DEFAULT_THROTTLE_RATES['anon']</code> 来设置频次</td>
</tr>
<tr>
<td>UserRateThrottle</td>
<td>限制认证用户,使用User id 来区分,使用<code>DEFAULT_THROTTLE_RATES['user']</code> 来设置频次</td>
</tr>
<tr>
<td>ScopedRateThrottle</td>
<td>限制用户对于每个视图的访问频次,使用ip或user id</td>
</tr>
</tbody>
</table>
<p><strong>APIView的流量控制属性</strong></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>throttle_scope</td>
<td>节流范围</td>
</tr>
<tr>
<td>throttle_classes</td>
<td>节流类</td>
</tr>
</tbody>
</table>
<h3> 3.2全局限流</h3>
<p>可以在配置文件中</p>
<p>使用<code>DEFAULT_THROTTLE_CLASSES</code>(启用的限制类)</p>
<p><code>DEFAULT_THROTTLE_RATES</code>(限制频率)进行全局配置</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3局部限流</h3>
<p><code>DEFAULT_THROTTLE_RATES</code> 可以使用 <code>second</code>, <code>minute</code>, <code>hour</code> 或<code>day</code>来指明周期.也可以在具体视图中通过throttle_classess属性来配置</p>
<p><a href="http://xn--setting-i22m.py" title="如setting.py" target="_blank" rel="noopener noreferrer">如setting.py</a></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://views.py" title="views.py" target="_blank" rel="noopener noreferrer">views.py</a></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 4. 过滤</h1>
<h3> 4.1定义</h3>
<p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置文件settings.py中增加过滤组件的设置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2全局配置</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3局部配置</h3>
<p>注意:</p>
<blockquote>
<p>局部配置的前提是进行全局配置,然后再在视图类中添加类属性filter_fields,指定可以过滤的字段</p>
</blockquote>
<h1> 5. 排序</h1>
<p>对于列表数据,按照指定字段进行排序,REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序,ordering参数的可选字段值需要在ordering_fields中指明。</p>
<p>from rest_framework.filters import OrderingFilter</p>
<h3> 5.1基本排序</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.过滤排序</h3>
<p>注意</p>
<blockquote>
<p>因为排序配置和过滤配置使用同一个类属性,如果需要在过滤以后再次进行排序,则需要两者同步,要么一起写在全局配置中,要么一起写在视图类中,否则会出现过滤组件使用无效的情况</p>
</blockquote>
<p>配置文件：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 6. 分页</h1>
<h3> 6.1.全局分页</h3>
<p>REST framework提供了分页的支持,我们可以在配置文件中设置全局的分页方式,如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.自定义分页</h3>
<p>也可通过自定义Pagination类,来为视图添加不同分页行为。在视图中通过<code>pagination_clas</code>属性来指明</p>
<h4> 1.页码分页类</h4>
<p>前端访问网址形式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>PageNumberPagination</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>page_size</td>
<td>每页数目</td>
</tr>
<tr>
<td>page_query_param</td>
<td>前端发送的<strong>页数</strong>关键字名，默认为"page"</td>
</tr>
<tr>
<td>page_size_query_param</td>
<td>前端发送的<strong>每页数目</strong>关键字名，默认为None</td>
</tr>
<tr>
<td>max_page_size</td>
<td>前端最多能设置的每页数量</td>
</tr>
</tbody>
</table>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.偏移分页类</h4>
<p>前端访问网址形式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>LimitOffsetPagination</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>default_limit</td>
<td>默认限制,默认值与<code>PAGE_SIZE</code>设置一致</td>
</tr>
<tr>
<td>limit_query_param</td>
<td>limit参数名,默认’limit’</td>
</tr>
<tr>
<td>offset_query_param</td>
<td>offset参数名,默认’offset’</td>
</tr>
<tr>
<td>max_limit</td>
<td>最大limit限制,默认None</td>
</tr>
</tbody>
</table>
<h1> 7. <a href="https://so.csdn.net/so/search?q=%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&amp;spm=1001.2101.3001.7020" title="异常处理" target="_blank" rel="noopener noreferrer">异常处理</a> Exceptions</h1>
<h3> 1.DRF的异常</h3>
<table>
<thead>
<tr>
<th>异常名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>APIException</td>
<td>drf中所有异常的父类</td>
</tr>
<tr>
<td>ParseError</td>
<td>解析错误</td>
</tr>
<tr>
<td>AuthenticationFailed</td>
<td>认证失败</td>
</tr>
<tr>
<td>NotAuthenticated</td>
<td>尚未认证</td>
</tr>
<tr>
<td>PermissionDenied</td>
<td>权限受限</td>
</tr>
<tr>
<td>NotFound</td>
<td>未找到</td>
</tr>
<tr>
<td>MethodNotAllowed</td>
<td>请求方式不支持</td>
</tr>
<tr>
<td>NotAcceptable</td>
<td>要获取的数据格式不支持</td>
</tr>
<tr>
<td>Throttled</td>
<td>超过限流次数</td>
</tr>
<tr>
<td>ValidationError</td>
<td>校验失败</td>
</tr>
</tbody>
</table>
<h3> 2.自定义异常</h3>
<p>REST framework提供了自定义异常处理,我们可以自定义的方式来编写异常处理函数.例如我们想在要创建一个自定义异常函数,这个函数,我们保存到当前主应用中[注意在实际工作中,我们可以设置一个单独的独立的公共目录来保存这种公共的函数/工具/类库,也就是说,很多的没有在上面列出来的异常,就需要我们在自定义异常中自己处理了</p>
<p>在主应用的配置文件settings.py中声明自定义的异常处理</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未声明,会采用默认的方式,如下rest_frame/settings.py</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>drfdemo/exceptions.py</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 8. 自动生成接口文档</h1>
<p>官方文档：<a href="http://core-api.github.io/python-client/" title="http://core-api.github.io/python-client/" target="_blank" rel="noopener noreferrer">http://core-api.github.io/python-client/</a></p>
<p>REST framework可以自动帮助我们生成接口文档。</p>
<p>接口文档以网页的方式呈现。</p>
<p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p>
<h2> 8.1. 安装依赖</h2>
<p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 8.2. 设置接口文档访问路径</h2>
<p>在settings.py中配置接口文档。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在总路由中添加接口文档路径。</p>
<p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p>
<p>参数<code>title</code>为接口文档网站的标题。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.3. 文档描述说明的定义位置</h3>
<p>1） 单一方法的视图，可直接使用类视图的文档字符串，如:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> help_text</p>
<h2> 8.4. 访问接口文档网页</h2>
<p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。</p>
<figure><figcaption></figcaption></figure>
<h4> 两点说明：</h4>
<p>1） 视图集ViewSet中的retrieve名称,在接口文档网站中叫做read</p>
<p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义,如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(七)：Router</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%B8%83)%EF%BC%9ARouter.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%B8%83)%EF%BC%9ARouter.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(七)：Router</source>
      <description>目录 路由 (#路由); 用法 (#用法); 使用 include 与路由 (#使用-include-与路由); 额外的链接和操作 (#额外的链接和操作); API 参考 (#API-参考); SimpleRouter (#SimpleRouter); 举个栗子 (#举个栗子); include (#include); 路由绑定其他操作 (#路由绑定其...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(七)：Router</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E8%B7%AF%E7%94%B1">路由</a>
<ul>
<li><a href="#%E7%94%A8%E6%B3%95">用法</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1">使用 include 与路由</a></li>
<li><a href="#%E9%A2%9D%E5%A4%96%E7%9A%84%E9%93%BE%E6%8E%A5%E5%92%8C%E6%93%8D%E4%BD%9C">额外的链接和操作</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#SimpleRouter">SimpleRouter</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
<li><a href="#include">include</a></li>
<li><a href="#%E8%B7%AF%E7%94%B1%E7%BB%91%E5%AE%9A%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C">路由绑定其他操作</a></li>
<li><a href="#DefaultRouter">DefaultRouter</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1">自定义路由</a>
<ul>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">自定义动态路由</a></li>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6">自定义路由器进阶</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%8C%85">第三方软件包</a>
<ul>
<li><a href="#DRF-Nested-Routers">DRF Nested Routers</a></li>
<li><a href="#ModelRouter-wqdbrest">ModelRouter (wq.db.rest)</a></li>
<li><a href="#DRF-extensions">DRF-extensions</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/routers/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E8%B7%AF%E7%94%B1" title="路由" target="_blank" rel="noopener noreferrer">路由</a></h2>
<p>一些 Web 框架（如 Rails）提供了一种能够自动确定应用程序的 URL 如何映射到处理请求的功能。</p>
<p>REST framework 增加了对 Django 自动 URL 路由的支持，并提供了一种将视图逻辑连接到一组 URL 的简单，高效和一致的方式。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E7%94%A8%E6%B3%95" title="用法" target="_blank" rel="noopener noreferrer">用法</a></h3>
<p>下面是一个使用 <code>SimpleRouter</code> 的简单 URL 配置示例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register()</code> 方法有两个必须参数：</p>
<ul>
<li><code>prefix</code> - 设置这组路由的前缀。</li>
<li><code>viewset</code> - 设置对应的视图集类。</li>
</ul>
<p>或者，您也可以指定一个附加参数：</p>
<ul>
<li><code>base_name</code> - 用于创建的 URL 名称的基础。如果未设置，将根据视图集的 <code>queryset</code> 属性自动生成。请注意，如果视图集不包含 <code>queryset</code> 属性，则在注册视图集时必须设置 <code>base_name</code>。</li>
</ul>
<p>上面的例子会生成以下 URL 模式：</p>
<ul>
<li>URL pattern: <code>^users/$</code> Name: <code>'user-list'</code></li>
<li>URL pattern: <code>^users/{pk}/$</code> Name: <code>'user-detail'</code></li>
<li>URL pattern: <code>^accounts/$</code> Name: <code>'account-list'</code></li>
<li>URL pattern: <code>^accounts/{pk}/$</code> Name: <code>'account-detail'</code></li>
</ul>
<blockquote>
<p>注意：<code>base_name</code> 参数用于指定视图名称模式的初始部分。在上面的例子中，是 <code>user</code> 或 <code>account</code> 部分。</p>
</blockquote>
<p>通常，您不需要指定 <code>base_name</code> 参数，但是如果您有一个视图集定义了自定义 <code>get_queryset</code> 方法，那么该视图集可能没有设置 <code>.queryset</code> 属性。如果此时尝试注册该视图，则会看到如下所示的错误：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><code>'base_name'</code> 参数未指定，并且无法自动确定视图中的名称，因为它没有' <code>.queryset'</code> 属性。</p>
</blockquote>
<p>这时候就需要在注册视图集时显式设置 <code>base_name</code> 参数，因为它无法从模型名称中自动确定。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1" title="使用 " target="_blank" rel="noopener noreferrer">使用 </a><a href="http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1" title="include" target="_blank" rel="noopener noreferrer">include</a><a href="http://drf.jiuyou.info/#/drf/routers?id=%E4%BD%BF%E7%94%A8-include-%E4%B8%8E%E8%B7%AF%E7%94%B1" title=" 与路由" target="_blank" rel="noopener noreferrer"> 与路由</a></h4>
<p>路由实例上的 <code>.urls</code> 属性是一个标准的 URL patterns。关于如何包含这些 URL，有许多不同的样式。</p>
<p>例如，可以将 <code>router.urls</code> 附加到现有视图的列表中...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，你也可以使用 Django 的 <code>include</code> 函数，比如...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以设置 namespace。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对超链接序列化器使用命名空间，则还需要确保序列化器上的任何 <code>view_name</code> 参数都能正确反映命名空间。在上面的示例中，您需要为超链接到用户详细信息视图的序列化程序字段包含诸如 <code>view_name='api:user-detail'</code> 之类的参数。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E9%A2%9D%E5%A4%96%E7%9A%84%E9%93%BE%E6%8E%A5%E5%92%8C%E6%93%8D%E4%BD%9C" title="额外的链接和操作" target="_blank" rel="noopener noreferrer">额外的链接和操作</a></h4>
<p>用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰的 视图上的任何方法 也将被路由。例如，在 <code>UserViewSet</code> 类中给出这样的方法：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成以下URL模式：</p>
<ul>
<li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>'user-set-password'</code></li>
</ul>
<p>如果您不想使用默认生成的 URL 模式，则可以使用 url_path 参数对其进行自定义。</p>
<p>例如，如果您想将我们的自定义操作的URL更改为 <code>^users/{pk}/change-password/$</code>，则可以编写：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子现在将生成以下URL模式：</p>
<ul>
<li>URL pattern: <code>^users/{pk}/change-password/$</code> Name: <code>'user-change-password'</code></li>
</ul>
<p>如果您不想使用生成的默认名称，则可以使用 url_name 参数对其进行自定义。</p>
<p>例如，如果您想将自定义操作的名称更改为 <code>'user-change-password'</code>，则可以编写：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子现在将生成以下URL模式：</p>
<ul>
<li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>'user-change-password'</code></li>
</ul>
<p>可以同时使用 <code>url_path</code> 和 <code>url_name</code> 参数。</p>
<p>更多相关信息请看 <a href="https://juejin.im/post/5a991807518825558a060a77#heading-3" title="视图集：标记额外的路由行为" target="_blank" rel="noopener noreferrer">视图集：标记额外的路由行为</a>。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/routers?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h2>
<h3> SimpleRouter</h3>
<blockquote>
<p><code>SimpleRouter</code> 包含标准的 <code>list</code>，<code>create</code>，<code>retrieve</code>，<code>update</code>，<code>partial_update</code> 和 <code>destroy</code> action。<code>SimpleRouter</code> 还支持视图集使用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰器标记其他要路由的方法。</p>
</blockquote>
<table methodname="">
<thead>
<tr>
<th>URL Style</th>
<th>HTTP Method</th>
<th>Action</th>
<th>URL Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>{prefix}/</td>
<td>GET</td>
<td>list</td>
<td>{basename}-list</td>
</tr>
<tr>
<td>POST</td>
<td>create</td>
<td></td>
<td></td>
</tr>
<tr methodname="">
<td>{prefix}/{methodname}/</td>
<td>GET, 或者由 <code>methods</code> 参数指定</td>
<td><code>@list_route</code> 装饰的方法</td>
<td>{basename}-</td>
</tr>
<tr>
<td>{prefix}/{lookup}/</td>
<td>GET</td>
<td>retrieve</td>
<td>{basename}-detail</td>
</tr>
<tr>
<td>PUT</td>
<td>update</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PATCH</td>
<td>partial_update</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DELETE</td>
<td>destroy</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{prefix}/{lookup}/{methodname}/</td>
<td>GET, 或者由 <code>methods</code> 参数指定</td>
<td><code>@detail_route</code> 装饰的方法</td>
<td>{basename}-</td>
</tr>
</tbody>
</table>
<p>默认情况下，由 <code>SimpleRouter</code> 创建的 URL 附加了尾部斜杠。在实例化路由器时，可以通过将 <code>trailing_slash</code> 参数设置为 <code>False</code> 来修改此行为。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尾部斜杠在 Django 中是常规的，但在其他一些框架（如 Rails）中默认不使用。选择使用哪种风格在很大程度上是一个偏好问题，尽管一些 JavaScript 框架可能会期望特定的路由风格。</p>
<p><code>SimpleRouter</code> 将匹配包含除斜杠和句点字符以外的任何字符的 lookup 值。对于更严格（或宽松）的 lookup pattern，请在视图集上设置 <code>lookup_value_regex</code> 属性。例如，您可以将 lookup 限制为有效的 UUID：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 举个栗子</h4>
<p>在我们定义好了 <code>MedusaBlogViewSet</code> 的情况下, 我们注册 URL 的时候仅需要：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register()</code> 有两个<code>强制性</code>的参数：</p>
<ul>
<li><code>prefix</code>：用于这组路由的 URL 前缀字符串, 用于路由匹配</li>
<li><code>viewset</code>：你定义的视图集</li>
</ul>
<p>如果你的视图集实现了获取列表/获取详情/新增/删除/修改的方法, 那你定义路由将会解析成这样：</p>
<table>
<thead>
<tr>
<th>URL 格式</th>
<th>请求方法</th>
<th>请求说明</th>
<th>视图集方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^medusa/blog$</code></td>
<td><code>GET</code></td>
<td>获取列表</td>
<td><code>list()</code></td>
</tr>
<tr>
<td><code>^medusa/blog/{pk}$</code></td>
<td><code>GET</code></td>
<td>获取详情</td>
<td><code>retrieve()</code></td>
</tr>
<tr>
<td><code>^medusa/blog$</code></td>
<td><code>POST</code></td>
<td>新增</td>
<td><code>create()</code></td>
</tr>
<tr>
<td><code>^medusa/blog/{pk}$</code></td>
<td><code>PUT</code></td>
<td>更新</td>
<td><code>update()</code></td>
</tr>
<tr>
<td><code>^medusa/blog/{pk}$</code></td>
<td><code>DELETE</code></td>
<td>删除</td>
<td><code>destroy()</code></td>
</tr>
</tbody>
</table>
<p>在你的视图集没有指定 <code>queryset</code> 属性或者自定义了 <code>get_queryset()</code> 方法的时候, 你可能会看到这样一条错误信息：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以你需要指定一个可选参数：<code>basename</code>, 默认情况下你不需要手动指定它的值, 它是创建 URL 名称的基础属性, 一般是用你指定的 <code>queryset</code> 属性值自动设置的。</p>
<p>默认情况下路由都需要添加 <code>/</code> 作为路由结尾, 你也可以修改该规则, 只需要修改参数 <code>trailing_slash=False</code> 即可：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该路由器生成 URL 的方式： </p>
<figure><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d1d10a5ee9a7c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> include</h3>
<p>在上面的例子中, 我们使用了 <code>urlpatterns = router.urls</code> 的方式注册了路由对象, 我们通常会使用 <code>include</code> 进行路由注册, 在 Django 中可能有一些我们自定义的视图, 不需要使用 <code>SimpleRouter</code> 进行注册：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 路由绑定其他操作</h3>
<p>例如你的项目安排上, 安排关于用户模块是在配置的界面, 那么你的路由可能是这样的：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那我对用户的配置可能有以下几个方法处理：</p>
<ul>
<li><code>GET</code>：获取用户详情/列表</li>
<li><code>PUT</code>：修改用户信息</li>
<li><code>POST</code>：新增用户信息</li>
<li><code>DELETE</code>：删除用户信息</li>
</ul>
<p>问题来了, 如果我不想创建一个新的关于用户的视图类, 但是我又想增加一个修改密码的 API 接口怎么办？ 如果你从事过其他产品 API 调度工作的时候, 你可能会浮现这样类型的接口：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很规范的接口方式, 那你在你的 ViewSet 里怎么体现呢？</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的, 使用 <code>action</code> 装饰器装饰, 并<code>指定参数</code>即可, 默认情况下你生成的 URL 是根据你的函数名称生成了, 你也可以通过 <code>url_name</code> 和 <code>url_path</code> 制定路由的后缀名称, 也可以通过 <code>permission_classes</code> 来制定用户访问权限。</p>
<h3> DefaultRouter</h3>
<p><code>DefaultRouter</code> 与上面的 <code>SimpleRouter</code> 相似，但还包含一个默认的 API 根视图，该视图返回一个包含指向所有列表视图的超链接的响应。它还为可选的 <code>.json</code> 风格格式后缀生成路由。 当然, 该路由的路径也会使用 <code>/</code> 结尾, 你可以用 <code>trailing_slash=False</code> 来弃用该规则：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该路由生成 URL 的方式： </p>
<table methodname="">
<thead>
<tr>
<th>URL Style</th>
<th>HTTP Method</th>
<th>Action</th>
<th>URL Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>[.format]</td>
<td>GET</td>
<td>自动生成的根视图</td>
<td>api-root</td>
</tr>
<tr>
<td>{prefix}/[.format]</td>
<td>GET</td>
<td>list</td>
<td>{basename}-list</td>
</tr>
<tr>
<td>POST</td>
<td>create</td>
<td></td>
<td></td>
</tr>
<tr methodname="">
<td>{prefix}/{methodname}/[.format]</td>
<td>GET, 或者由 <code>methods</code> 参数指定</td>
<td><code>@list_route</code> 装饰的方法</td>
<td>{basename}-</td>
</tr>
<tr>
<td>{prefix}/{lookup}/[.format]</td>
<td>GET</td>
<td>retrieve</td>
<td>{basename}-detail</td>
</tr>
<tr>
<td>PUT</td>
<td>update</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PATCH</td>
<td>partial_update</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DELETE</td>
<td>destroy</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{prefix}/{lookup}/{methodname}/[.format]</td>
<td>GET, 或者由 <code>methods</code> 参数指定</td>
<td><code>@detail_route</code> 装饰的方法</td>
<td>{basename}-</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：我在使用 3.7.7 版本时，发现要写成 <code>{prefix}[.format]/</code> 风格才能访问，<code>{prefix}/[.format]</code> 风格会报 404，不知道是我设置问题还是官方更新了</p>
</blockquote>
<h2> 自定义路由</h2>
<p>自定义路由并不是你经常需要做的事情，但是如果你对 API 的 URL 是如何构建的有特定的要求的话，它会很有用。这样做可以让你以可重用的方式封装 URL 结构，确保你不必为每个新视图明确编写 URL 模式。</p>
<p>实现自定义路由的最简单方法是对现有路由类之一进行子类化。<code>.routes</code> 属性用于对将映射到每个视图集的 URL 模式进行模板化。<code>.Routes</code> 属性是一个 <code>Route</code> 列表（<code>Route</code> 的是一个 namedtuple）。</p>
<p>其实在开发中这不是你使用路由器的最好方式, 但是在你需要自定义 URL 格式的时候使用这个方式将会变得很有效, 而实现自定义路由是将现有路由作为子类之一, 其 <code>.routes</code> 属性是 <code>Route</code> 的命名元组的列表数据, 功能是用于模板化将映射到每个视图集的 URL 模式。</p>
<p> <code>Route</code> 命名元祖的参数有：</p>
<ul>
<li><code>url</code>：代表需要路由的 URL 字符串, 可以包含以下格式字符串：
<ul>
<li><code>{prefix}</code>：用于这组路由器的前缀字符串</li>
<li><code>{lookup}</code>：匹配单个实例的 lookup field, 如ID</li>
<li><code>{trailing_slash}</code>：可以是 '/' 或空字符串，具体取决于 <code>trailing_slash</code> 参数</li>
</ul>
</li>
<li><code>mapping</code>：HTTP 方法名称到视图方法的映射</li>
<li><code>name</code>：用于调用 <code>reverse</code> 时的 URL 的名称。可能包含以下格式字符串：
<ul>
<li><code>{basename}</code>：创建的 URL 名称的基础</li>
</ul>
</li>
<li><code>initkwargs</code>： 实例化视图时应传递的任何其他参数的字典。注意，<code>suffix</code> 参数被保留用于标识视图集类型，在生成视图名称和 breadcrumb 链接时使用。</li>
</ul>
<p>其实以上文字内容是官方文档的描述内容加上我自己的理解装饰了一下, 但是看到这几行字的描述信息, 确实是不知道它的功能到底怎么样定义, 刚好看到某位大佬的博客, 参考并实践了一下：</p>
<blockquote>
<p>附参考的博客地址：<a href="https://link.juejin.cn/?target=https://www.cnblogs.com/liubiao/p/6567565.html" title="www.cnblogs.com/liubiao/p/6…" target="_blank" rel="noopener noreferrer">www.cnblogs.com/liubiao/p/6…</a></p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1" title="自定义动态路由" target="_blank" rel="noopener noreferrer">自定义动态路由</a></h3>
<p>你还可以自定义 <code>@list_route</code> 和 <code>@detail_route</code> 装饰器的路由方式。要路由这两个装饰器中的一个或两个，请在 <code>.routes</code> 列表中包含一个 <code>DynamicListRoute</code> 和/或 <code>DynamicDetailRoute</code>（别忘了类型是 namedtuple）。</p>
<p><code>DynamicListRoute</code> 和 <code>DynamicDetailRoute</code> 的参数是：</p>
<p><strong>url</strong>： 表示要路由的 URL 的字符串。可以包含与 <code>Route</code> 相同的格式字符串，并且还接受 <code>{methodname}</code> 和 <code>{methodnamehyphen}</code> 格式的字符串。</p>
<p><strong>name</strong>： 用于调用 <code>reverse</code> 时的名称。可以包含以下格式字符串：<code>{basename}</code> , <code>{methodname}</code> 和  <code>{methodnamehyphen}</code> 。</p>
<p><strong>initkwargs</strong>： 实例化视图时应传递的任何其他参数的字典。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h3>
<p>以下示例只会路由 <code>list</code> 和 <code>retrieve</code> action，并且不使用尾部斜杠约定。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来看看 <code>CustomReadOnlyRouter</code> 为一个简单的视图集生成的路由。</p>
<p><code>views.py</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://urls.py" title="urls.py" target="_blank" rel="noopener noreferrer">urls.py</a>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将生成以下映射...</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>HTTP Method</th>
<th>Action</th>
<th>URL Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>/users</td>
<td>GET</td>
<td>list</td>
<td>user-list</td>
</tr>
<tr>
<td username="">/users/</td>
<td>GET</td>
<td>retrieve</td>
<td>user-detail</td>
</tr>
<tr>
<td>/users/{username}/group-names</td>
<td>GET</td>
<td>group_names</td>
<td>user-group-names</td>
</tr>
</tbody>
</table>
<p>有关设置 <code>.routes</code> 属性的另一个示例，请参阅 <code>SimpleRouter</code> 类的源代码。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6" title="自定义路由器进阶" target="_blank" rel="noopener noreferrer">自定义路由器进阶</a></h3>
<p>如果想提供完全自定义的行为，可以继承 <code>BaseRouter</code> 并覆盖 <code>get_urls(self)</code> 方法。该方法应检查已注册的视图集并返回一组 URL 模式。可以通过访问 <code>self.registry</code> 属性来检查注册的 prefix，viewset 和 basename tuples。</p>
<p>你可能还想覆盖 <code>get_default_base_name（self，viewset）</code>方法，或者在向路由注册视图集时始终显式设置 <code>base_name</code> 参数。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/routers?id=%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%8C%85" title="第三方软件包" target="_blank" rel="noopener noreferrer">第三方软件包</a></h2>
<p>以下是可用的第三方包。</p>
<h3> <a href="https://github.com/alanjds/drf-nested-routers" title="DRF Nested Routers" target="_blank" rel="noopener noreferrer">DRF Nested Routers</a></h3>
<h3> <a href="https://wq.io/wq.db" title="ModelRouter (wq.db.rest)" target="_blank" rel="noopener noreferrer">ModelRouter (wq.db.rest)</a></h3>
<h3> <a href="https://chibisov.github.io/drf-extensions/docs/" title="DRF-extensions" target="_blank" rel="noopener noreferrer">DRF-extensions</a></h3>
]]></content:encoded>
      <enclosure url="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d1d10a5ee9a7c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" type="image/"/>
    </item>
    <item>
      <title>Rest-framework专栏讲解(九)：Parsers</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%B9%9D)%EF%BC%9AParsers.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%B9%9D)%EF%BC%9AParsers.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(九)：Parsers</source>
      <description>目录 解析器 (#解析器); 如何确定使用哪个解析器 (#如何确定使用哪个解析器); 配置解析器 (#配置解析器); API 参考 (#API-参考); JSONParser (#JSONParser); FormParser (#FormParser); MultiPartParser (#MultiPartParser); FileUploadPa...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(九)：Parsers</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E8%A7%A3%E6%9E%90%E5%99%A8">解析器</a>
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E8%A7%A3%E6%9E%90%E5%99%A8">如何确定使用哪个解析器</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E5%99%A8">配置解析器</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#JSONParser">JSONParser</a></li>
<li><a href="#FormParser">FormParser</a></li>
<li><a href="#MultiPartParser">MultiPartParser</a></li>
<li><a href="#FileUploadParser">FileUploadParser</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90">自定义解析</a>
<ul>
<li><a href="#stream">stream</a></li>
<li><a href="#media_type">media_type</a></li>
<li><a href="#parser_context">parser_context</a></li>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6">第三方组件</a>
<ul>
<li><a href="#YAML-%E6%94%AF%E6%8C%81">YAML 支持</a></li>
<li><a href="#XML-%E6%94%AF%E6%8C%81">XML 支持</a></li>
<li><a href="#MessagePack">MessagePack</a></li>
<li><a href="#CamelCase-JSON">CamelCase JSON</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/parsers/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/parsers?id=%E8%A7%A3%E6%9E%90%E5%99%A8" title="解析器" target="_blank" rel="noopener noreferrer">解析器</a></h2>
<p>REST framework 包含许多内置的解析器类，允许接受各种媒体类型（media types）的请求。还支持自定义解析器，这使你可以灵活地设计 API 接受的媒体类型。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E8%A7%A3%E6%9E%90%E5%99%A8" title="如何确定使用哪个解析器" target="_blank" rel="noopener noreferrer">如何确定使用哪个解析器</a></h3>
<p>视图的有效解析器集始终定义为类列表。当访问 <code>request.data</code> 时，REST framework 将检查传入请求的 <code>Content-Type</code> ，并确定使用哪个解析器来解析请求内容。</p>
<blockquote>
<p><strong>注意</strong>：在开发客户端应用程序时，请务必确保在 HTTP 请求中发送数据时设置了 <code>Content-Type</code> 。如果你不设置 content type，大多数客户端将默认使用 <code>'application / x-www-form-urlencoded'</code> ，这可能不是你想要的。 例如，如果你使用 jQuery 和 <code>.ajax()</code> 方法发送 <code>json</code> 数据，则应确保包含 <code>contentType:'application/json'</code> 设置。</p>
</blockquote>
<h3> 配置解析器</h3>
<p>可以使用 <code>DEFAULT_PARSER_CLASSES</code> 设置默认的全局解析器。例如，以下设置将只允许带有 <code>JSON</code> 内容的请求，而不是默认的 JSON 或表单数据。</p>
<p>在使用 <code>restframework</code> 框架的时候我们需要设置返回的数据为 <code>JSON</code> 格式就需要在 <code>Django</code> 项目的 <code>settings.py</code> 中做如下配置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以在基于类（<code>API​​View</code> ）的视图上设置单个视图或视图集的解析器：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者和 <code>@api_view</code> 装饰器一起使用：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/parsers?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h2>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=jsonparser" title="JSONParser" target="_blank" rel="noopener noreferrer">JSONParser</a></h3>
<p>解析 JSON 请求内容。</p>
<p><strong>.media_type</strong>： <code>application/json</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=formparser" title="FormParser" target="_blank" rel="noopener noreferrer">FormParser</a></h3>
<p>解析 HTML 表单内容。<code>request.data</code> 是一个 <code>QueryDict</code> 字典，包含所有表单参数。</p>
<p>通常需要同时使用 <code>FormParser</code> 和 <code>MultiPartParser</code>，以完全支持 HTML 表单数据。</p>
<p><strong>.media_type</strong>： <code>application/x-www-form-urlencoded</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=multipartparser" title="MultiPartParser" target="_blank" rel="noopener noreferrer">MultiPartParser</a></h3>
<p>解析文件上传的 multipart HTML 表单内容。 <code>request.data</code> 是一个 <code>QueryDict</code>（其中包含表单参数和文件）。</p>
<p>通常需要同时使用 <code>FormParser</code> 和 <code>MultiPartParser</code>，以完全支持 HTML 表单数据。</p>
<p><strong>.media_type</strong>： <code>application/form-data</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=fileuploadparser" title="FileUploadParser" target="_blank" rel="noopener noreferrer">FileUploadParser</a></h3>
<p>解析文件上传内容。 <code>request.data</code> 是一个 <code>QueryDict</code> （只包含一个存有文件的 <code>'file'</code> key）。</p>
<p>如果与 <code>FileUploadParser</code> 一起使用的视图是用 <code>filename</code> URL 关键字参数调用的，那么该参数将用作文件名。</p>
<p>如果在没有 <code>filename</code> URL 关键字参数的情况下调用，则客户端必须在 <code>Content-Disposition</code> HTTP header 中设置文件名。例如 <code>Content-Disposition: attachment; filename=upload.jpg</code>。</p>
<p><strong>.media_type</strong>： <code>*/*</code></p>
<p>请注意：</p>
<ul>
<li><code>FileUploadParser</code> 用于本地客户端，可以将文件作为原始数据请求上传。对于基于 Web 的上传，或者对于具有分段上传支持的本地客户端，您应该使用 <code>MultiPartParser</code> 解析器。</li>
<li>由于此解析器的 <code>media_type</code> 与任何 content type 都匹配，因此 <code>FileUploadParser</code> 通常应该是在 API 视图上设置的唯一解析器。</li>
<li><code>FileUploadParser</code> 遵循 Django 的标准 <code>FILE_UPLOAD_HANDLERS</code> 设置和 <code>request.upload_handlers</code> 属性。有关更多详细信息，请参阅 Django 文档。</li>
</ul>
<p>基本用法示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/parsers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90" title="自定义解析" target="_blank" rel="noopener noreferrer">自定义解析</a></h2>
<p>要实现自定义解析器，应该继承 <code>BaseParser</code>，设置 <code>.media_type</code> 属性并实现 <code>.parse(self,stream,media_type,parser_context)</code> 方法。</p>
<p>该方法应该返回将用于填充 <code>request.data</code> 属性的数据。</p>
<p>传递给 <code>.parse()</code> 的参数是：</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=stream" title="stream" target="_blank" rel="noopener noreferrer">stream</a></h3>
<p>表示请求正文的流式对象。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=media_type" title="media_type" target="_blank" rel="noopener noreferrer">media_type</a></h3>
<p>可选。如果提供，则这是传入请求内容的 media type。</p>
<p>根据请求的 <code>Content-Type:</code> header，可以比渲染器的 <code>media_type</code> 属性更具体，并且可能包含 media type 参数。比如 <code>"text/plain; charset=utf-8"</code> 。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=parser_context" title="parser_context" target="_blank" rel="noopener noreferrer">parser_context</a></h3>
<p>可选。如果提供，则该参数将是一个包含解析请求内容可能需要的任何其他上下文的字典。</p>
<p>默认情况下，这将包括以下 key：<code>view</code>，<code>request</code>，<code>args</code>，<code>kwargs</code>。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/parsers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h3>
<p>以下是一个示例纯文本解析器，它将使用表示请求正文的字符串填充 <code>request.data</code> 属性。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 第三方组件</h2>
<h4> YAML 支持</h4>
<p>REST framework YAML 提供 YAML 解析和渲染支持。它以前直接包含在 REST framework 包中，现在作为第三方包。</p>
<p>使用pip安装。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时数据以 YAML 语法作为支持和返回, 需要你在 <code>settings.py</code> 中做如下配置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> XML 支持</h4>
<p><a href="https://jpadilla.github.io/django-rest-framework-xml/" title="REST Framework XML" target="_blank" rel="noopener noreferrer">REST Framework XML</a> 提供了一种简单的非正式 XML 格式。它以前直接包含在 REST framework 包中，现在作为第三方包。</p>
<p>使用pip安装。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时数据以 XML 语法作为支持和返回, 需要你在 <code>settings.py</code> 中做如下配置:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="https://github.com/juanriaza/django-rest-framework-msgpack" title="MessagePack" target="_blank" rel="noopener noreferrer">MessagePack</a></h3>
<h3> <a href="https://github.com/vbabiy/djangorestframework-camel-case" title="CamelCase JSON" target="_blank" rel="noopener noreferrer">CamelCase JSON</a></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十)：内容协商</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81)%EF%BC%9A%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81)%EF%BC%9A%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十)：内容协商</source>
      <description>目录 内容协商 (#内容协商); 确定接受的渲染器 (#确定接受的渲染器); 自定义内容协商 (#自定义内容协商); 举个栗子 (#举个栗子); 设置内容协商 (#设置内容协商); 官方原文链接 (http://www.django-rest-framework.org/api-guide/content-negotiation/ &amp;quot;官方原文链接&amp;quot;) ...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十)：内容协商</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">内容协商</a>
<ul>
<li><a href="#%E7%A1%AE%E5%AE%9A%E6%8E%A5%E5%8F%97%E7%9A%84%E6%B8%B2%E6%9F%93%E5%99%A8">确定接受的渲染器</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">自定义内容协商</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">设置内容协商</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/content-negotiation/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/content-negotiation?id=%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86" title="内容协商" target="_blank" rel="noopener noreferrer">内容协商</a></h1>
<p>内容协商是基于客户端或服务器偏好选择多种可能的表示之一以返回客户端的过程。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/content-negotiation?id=%E7%A1%AE%E5%AE%9A%E6%8E%A5%E5%8F%97%E7%9A%84%E6%B8%B2%E6%9F%93%E5%99%A8" title="确定接受的渲染器" target="_blank" rel="noopener noreferrer">确定接受的渲染器</a></h2>
<p>REST framework 根据可用的渲染器，每个渲染器的优先级以及客户端的 <code>Accept:</code> header，使用简单的内容协商风格来确定应将哪些媒体类型返回给客户端。所使用的风格部分由客户端驱动，部分由服务器驱动。</p>
<ol>
<li>更具体的媒体类型优先于较不特定的媒体类型。</li>
<li>如果多种媒体类型具有相同的特性，则优先根据为给定视图配置的渲染器排序。</li>
</ol>
<p>例如，给出以下 <code>Accept</code> header:</p>
<p>application/json; indent=4, application/json, application/yaml, text/html, <em>/</em></p>
<p>每种给定媒体类型的优先级为：</p>
<ul>
<li><code>application/json; indent=4</code></li>
<li><code>application/json</code>, <code>application/yaml</code> 和 <code>text/html</code></li>
<li><code>*/*</code></li>
</ul>
<p>如果所请求的视图仅用 <code>YAML</code> 和 <code>HTML</code> 的渲染器配置，则 REST framework 将选择 <code>renderer_classes</code> 列表或 <code>DEFAULT_RENDERER_CLASSES</code> 设置中首先列出的渲染器。</p>
<blockquote>
<p><strong>注意</strong>: 确定偏好时，REST framework 不会考虑 "q" 值。使用 "q" 值会对缓存产生负面影响，作者认为这是对内容协商的一种不必要和过于复杂的方法。</p>
</blockquote>
<blockquote>
<p>有关 <code>HTTP Accept</code> 标题的更多信息，请参见 <a href="https://link.juejin.cn/?target=https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html" title="RFC 2616" target="_blank" rel="noopener noreferrer">RFC 2616</a>。</p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/content-negotiation?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86" title="自定义内容协商" target="_blank" rel="noopener noreferrer">自定义内容协商</a></h1>
<p>你不太可能希望为 REST framework 提供自定义内容协商方案，但如果需要，你可以这样做。要实现自定义内容协商方案，请覆盖 <code>BaseContentNegotiation</code>。</p>
<p>REST framework 的内容协商类处理选择适当的请求解析器和适当的响应渲染器，因此你应该实现 <code>.select_parser(request, parsers)</code> 和 <code>.select_renderer(request, renderers, format_suffix)</code> 方法。</p>
<p><code>select_parser()</code> 方法应从可用解析器列表中返回一个解析器实例，如果没有任何解析器可以处理传入请求，则返回 <code>None</code>。</p>
<p><code>select_renderer()</code> 方法应该返回（渲染器实例，媒体类型）的二元组，或引发 <code>NotAcceptable</code> 异常。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/content-negotiation?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>以下是自定义内容协商类，它在选择适当的解析器或渲染器时会忽略客户端请求。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/content-negotiation?id=%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86" title="设置内容协商" target="_blank" rel="noopener noreferrer">设置内容协商</a></h2>
<p>默认内容协商类可以使用 <code>DEFAULT_CONTENT_NEGOTIATION_CLASS</code> setting 全局设置。例如，以下设置将使用我们的示例 <code>IgnoreClientContentNegotiation</code> 类。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 <code>API​​View</code> 基于类的视图设置用于单个视图或视图集的内容协商：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十一)：Format suffixes</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%80)%EF%BC%9AFormat%20suffixes.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%80)%EF%BC%9AFormat%20suffixes.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十一)：Format suffixes</source>
      <description>目录 Format 后缀 (#Format-后缀); format\_suffix\_patterns (#formatsuffixpatterns); 与 i18n\_patterns 一起使用 (#与-i18n_patterns-一起使用); 查询参数格式化 (#查询参数格式化); 接受标头与格式后缀 (#接受标头与格式后缀); 官方原文链接 (h...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十一)：Format suffixes</h1>
<h2> 目录</h2>
<ul>
<li><a href="#Format-%E5%90%8E%E7%BC%80">Format 后缀</a>
<ul>
<li><a href="#format_suffix_patterns">format_suffix_patterns</a>
<ul>
<li><a href="#%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">与 i18n_patterns 一起使用</a></li>
<li><a href="#%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96">查询参数格式化</a></li>
<li><a href="#%E6%8E%A5%E5%8F%97%E6%A0%87%E5%A4%B4%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%90%8E%E7%BC%80">接受标头与格式后缀</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/format-suffixes/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/format-suffixes?id=format-%E5%90%8E%E7%BC%80" title="Format 后缀" target="_blank" rel="noopener noreferrer">Format 后缀</a></h1>
<p>Web API 的常见模式是在 URL 上使用文件扩展名来为给定的媒体类型提供端点。 例如，<code>'http://example.com/api/users.json'</code> 用于提供 JSON 表示。</p>
<p>在 URLconf 中为你的 API 添加 format-suffix 模式是容易出错和非 DRY 的，因此 REST framework 提供了将这些模式添加到 URLconf 的快捷方式。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/format-suffixes?id=format_suffix_patterns" title="format_suffix_patterns" target="_blank" rel="noopener noreferrer">format_suffix_patterns</a></h2>
<p><strong>签名</strong>: <code>format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None)</code></p>
<p>返回一个 URL pattern 列表，其中包含附加到每个 URL pattern 的格式后缀模式。</p>
<p>参数：</p>
<ul>
<li><strong>urlpatterns</strong>: 必需。一个 URL pattern 列表。</li>
<li><strong>suffix_required</strong>: 可选。一个 boolean 值，指定 URL 中的后缀是否可选或强制。默认为 <code>False</code>，这意味着后缀默认是可选的。</li>
<li><strong>allowed</strong>: 可选。有效格式后缀的列表或元组。如果没有提供，将使用通配符格式后缀模式。</li>
</ul>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 format_suffix_patterns 时，你必须确保将 <code>format</code>关键字参数添加到相应的视图。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者基于类视图：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所使用的<code> kwarg</code> 的名称可以使用 <code>FORMAT_SUFFIX_KWARG</code> 进行修改。</p>
<p>另请注意，<code>format_suffix_patterns</code> 不支持降序包含 URL patterns。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8" title="与 " target="_blank" rel="noopener noreferrer">与 </a><a href="http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8" title="i18n_patterns" target="_blank" rel="noopener noreferrer">i18n_patterns</a><a href="http://drf.jiuyou.info/#/drf/format-suffixes?id=%E4%B8%8E-i18n_patterns-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8" title=" 一起使用" target="_blank" rel="noopener noreferrer"> 一起使用</a></h3>
<p>如果使用 Django 提供的 <code>i18n_patterns</code> 函数以及 <code>format_suffix_patterns</code>，则应确保将 <code>i18n_patterns</code> 函数用作最终或最外层函数。例如：</p>
<p>如果使用 Django 提供的 <code>i18n_patterns</code> 函数, 以及 <code>format_suffix_patterns</code>, 则应确保将 <code>i18n_patterns</code> 函数应用为最终函数或最外层函数, 例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询参数格式化</h3>
<p>格式后缀的替代方法是将请求的 format 包含在查询参数中。REST framework 默认提供此选项，并且它在可浏览的 API 中用于在不同的可用表示之间切换。</p>
<p>要使用其短格式表示，请使用 <code>format</code> 查询参数。例如： <code>http://example.com/organizations/?format=csv</code>。</p>
<p>此查询参数的名称可以使用 <code>URL_FORMAT_OVERRIDE</code> 设置进行修改。将该值设置为 <code>None</code> 以禁用此行为。</p>
<h3> 接受标头与格式后缀</h3>
<p>在某些 Web 社区中似乎有人认为文件扩展名不是 RESTful 模式, 而应该始终使用 <code>HTTP Accept</code> 标头。</p>
<p>这实际上是一种误解, 例如引用 <code>Roy Fielding</code> 的话, 其中讨论了查询参数媒体类型指标与文件扩展名媒体类型指标的相对优点：</p>
<blockquote>
<p>“That's why I always prefer extensions. Neither choice has anything to do with REST.” — Roy Fielding。</p>
</blockquote>
<p>这段引文没有提到 <code>Accept headers</code>, 但它明确表示格式后缀应该被视为可接受的模式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十七): 异常</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%83)-%20%E5%BC%82%E5%B8%B8.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%83)-%20%E5%BC%82%E5%B8%B8.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十七): 异常</source>
      <description>目录 异常 (#异常); REST framework 视图中的异常处理 (#REST-framework-视图中的异常处理); 自定义异常 (#自定义异常); 自定义异常处理 (#自定义异常处理); API 参考 (#API-参考); APIException (#APIException); 检查 API 异常 (#检查-API-异常); Pars...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十七): 异常</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a>
<ul>
<li><a href="#REST-framework-%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">REST framework 视图中的异常处理</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8">自定义异常</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">自定义异常处理</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#APIException">APIException</a>
<ul>
<li><a href="#%E6%A3%80%E6%9F%A5-API-%E5%BC%82%E5%B8%B8">检查 API 异常</a></li>
</ul>
</li>
<li><a href="#ParseError">ParseError</a></li>
<li><a href="#AuthenticationFailed">AuthenticationFailed</a></li>
<li><a href="#NotAuthenticated">NotAuthenticated</a></li>
<li><a href="#PermissionDenied">PermissionDenied</a></li>
<li><a href="#NotFound">NotFound</a></li>
<li><a href="#MethodNotAllowed">MethodNotAllowed</a></li>
<li><a href="#NotAcceptable">NotAcceptable</a></li>
<li><a href="#UnsupportedMediaType">UnsupportedMediaType</a></li>
<li><a href="#Throttled">Throttled</a></li>
<li><a href="#ValidationError">ValidationError</a></li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/exceptions/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=%E5%BC%82%E5%B8%B8" title="异常" target="_blank" rel="noopener noreferrer">异常</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=rest-framework-%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" title="REST framework 视图中的异常处理" target="_blank" rel="noopener noreferrer">REST framework 视图中的异常处理</a></h2>
<p>REST framework 的视图处理各种异常，并返回适当的错误响应。</p>
<p>需要处理的异常情况有：</p>
<ul>
<li>在 REST framework 内引发的 <code>APIException</code>的子类。</li>
<li>Django 的 <code>Http404</code> 异常。</li>
<li>Django 的 <code>PermissionDenied</code> 异常。</li>
</ul>
<p>在每种情况下，REST framework 都会返回一个带有适当状态码和内容类型的响应。响应的主体将包含有关错误性质的其他细节。</p>
<p>大多数错误响应将包含响应正文中的关键 <code>detail</code>。</p>
<p>例如，以下请求：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可能会收到错误响应，指出在该资源上不允许使用 <code>DELETE</code> 方法：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证错误的处理方式稍有不同，但都是将字段名称作为响应中的关键字。如果验证错误不是特定于某个字段的，那么它将使用 “non_field_errors” 键，或者为 <code>NON_FIELD_ERRORS_KEY</code> setting 设置的字符串值。</p>
<p>示例验证错误可能如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 自定义异常</h2>
<p>这里对异常的定义主要的想法来自 <code>ValidationError</code>，统一异常返回的格式，方便前端统一处理类似异常。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" title="自定义异常处理" target="_blank" rel="noopener noreferrer">自定义异常处理</a></h2>
<p>你可以通过创建处理函数来实现自定义异常处理，该函数将 API 视图中引发的异常转换为响应对象。这使你可以控制 API 错误响应的样式。</p>
<p>该函数必须带有一对参数，第一个是要处理的异常，第二个是包含任何额外上下文（例如当前正在处理的视图）的字典。异常处理函数应该返回一个 <code>Response</code> 对象，或者如果无法处理异常，则返回 <code>None</code>。如果处理程序返回 <code>None</code>，那么异常将被重新抛出，Django 将返回一个标准的 HTTP 500 'server error' 响应。</p>
<p>例如，你可能希望确保所有错误响应都包含响应正文中的 HTTP 状态码，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了改变响应的风格，你可以编写下面的自定义异常处理程序：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>context 参数不被默认处理程序使用，但是如果异常处理程序需要更多信息，例如当前正在处理的视图（可以作为 <code>context['view']</code> 访问），则该参数可能很有用。</p>
<p>异常处理程序还必须使用 <code>EXCEPTION_HANDLER</code> setting key 在你的设置中进行配置。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未指定，则 <code>'EXCEPTION_HANDLER'</code> setting 默认为由 REST framework 提供的标准异常处理程序：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，异常处理程序只会根据由异常产生的响应调用。它不会用于视图直接返回的任何响应，例如在序列化验证失败时通用视图返回的 <code>HTTP_400_BAD_REQUEST</code> 响应。</p>
<hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=apiexception" title="APIException" target="_blank" rel="noopener noreferrer">APIException</a></h2>
<p><strong>签名:</strong> <code>APIException()</code></p>
<p>在 <code>APIView</code> 类或 <code>@api_view</code> 中引发的所有异常的基类。</p>
<p>要自定义异常，请继承 <code>APIException</code>，并在该类上设置 <code>.status_code</code>，<code>.default_detail</code> 和 <code>default_code</code> 属性。</p>
<p>例如，如果你的 API 依赖于可能无法访问的第三方服务，则可能需要为 "503 Service Unavailable" HTTP 响应码封装异常。你可以这样做：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=%E6%A3%80%E6%9F%A5-api-%E5%BC%82%E5%B8%B8" title="检查 API 异常" target="_blank" rel="noopener noreferrer">检查 API 异常</a></h4>
<p>有许多不同的属性可用于检查 API 异常的状态。你可以使用它们为你的项目构建自定义异常处理。</p>
<p>可用的属性和方法有：</p>
<ul>
<li><code>.detail</code> - 返回错误的文本描述。</li>
<li><code>.get_codes()</code> - 返回错误的代码标识符。</li>
<li><code>.get_full_details()</code> - 返回文本描述和代码标识符。</li>
</ul>
<p>在大多数情况下，错误详情将是一个简单的 item：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在验证错误的情况下，错误详情将是 item 列表或字典：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=parseerror" title="ParseError" target="_blank" rel="noopener noreferrer">ParseError</a></h2>
<p><strong>签名:</strong> <code>ParseError(detail=None, code=None)</code></p>
<p>在访问 <code>request.data</code> 时包含格式错误的数据则会引发此异常。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "400 Bad Request" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=authenticationfailed" title="AuthenticationFailed" target="_blank" rel="noopener noreferrer">AuthenticationFailed</a></h2>
<p><strong>签名:</strong> <code>AuthenticationFailed(detail=None, code=None)</code></p>
<p>当传入的请求包含不正确的身份验证时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "401 Unauthenticated" 的响应，但也可能会导致 "403 Forbidden" 响应，具体取决于所使用的身份验证方案。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=notauthenticated" title="NotAuthenticated" target="_blank" rel="noopener noreferrer">NotAuthenticated</a></h2>
<p><strong>签名:</strong> <code>NotAuthenticated(detail=None, code=None)</code></p>
<p>当未经身份验证的请求未通过权限检查时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "401 Unauthenticated" 的响应，但也可能会导致 "403 Forbidden" 响应，具体取决于所使用的身份验证方案。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=permissiondenied" title="PermissionDenied" target="_blank" rel="noopener noreferrer">PermissionDenied</a></h2>
<p><strong>签名:</strong> <code>PermissionDenied(detail=None, code=None)</code></p>
<p>当经过身份验证的请求未通过权限检查时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "403 Forbidden" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=notfound" title="NotFound" target="_blank" rel="noopener noreferrer">NotFound</a></h2>
<p><strong>签名:</strong> <code>NotFound(detail=None, code=None)</code></p>
<p>当资源不存在于给定的 URL 时引发。这个异常相当于标准的 <code>Http404</code> Django 异常。</p>
<p>默认情况下，此异常会导致 HTTP 状态码为 "404 Not Found" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=methodnotallowed" title="MethodNotAllowed" target="_blank" rel="noopener noreferrer">MethodNotAllowed</a></h2>
<p><strong>签名:</strong> <code>MethodNotAllowed(method, detail=None, code=None)</code></p>
<p>当请求发生时，找不到视图上对应的处理方法时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码为 "405 Method Not Allowed" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=notacceptable" title="NotAcceptable" target="_blank" rel="noopener noreferrer">NotAcceptable</a></h2>
<p><strong>签名:</strong> <code>NotAcceptable(detail=None, code=None)</code></p>
<p>当请求发生时，任何可用渲染器都不符合 <code>Accept</code> header 时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码为 "406 Not Acceptable" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=unsupportedmediatype" title="UnsupportedMediaType" target="_blank" rel="noopener noreferrer">UnsupportedMediaType</a></h2>
<p><strong>签名:</strong> <code>UnsupportedMediaType(media_type, detail=None, code=None)</code></p>
<p>如果在访问 <code>request.data</code> 时没有可以处理请求数据的内容类型的解析器，就会引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "415 Unsupported Media Type" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=throttled" title="Throttled" target="_blank" rel="noopener noreferrer">Throttled</a></h2>
<p><strong>签名:</strong> <code>Throttled(wait=None, detail=None, code=None)</code></p>
<p>传入的请求未通过限流检查时引发。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "429 Too Many Requests" 的响应。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/6b5a9fa5-2926-459a-8ce8-58cdb462d207/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_6b5a9fa5-2926-459a-8ce8-58cdb462d207#/drf/exceptions?id=validationerror" title="ValidationError" target="_blank" rel="noopener noreferrer">ValidationError</a></h2>
<p><strong>签名:</strong> <code>ValidationError(detail, code=None)</code></p>
<p><code>ValidationError</code> 异常与其他 <code>APIException</code> 类略有不同：</p>
<ul>
<li><code>detail</code> 参数是必需的，不是可选的。</li>
<li><code>detail</code> 参数可以是错误详情列表或字典，也可以是嵌套的数据结构。</li>
<li>按照惯例，你应该导入 serializers 模块并使用完全限定的 <code>ValidationError</code> 样式，以区别于 Django 内置的验证错误。例如： <code>raise serializers.ValidationError('This field must be an integer value.')</code></li>
</ul>
<p><code>ValidationError</code> 类应该用于序列化类和字段验证以及验证器类。使用 <code>raise_exception</code> 关键字参数调用 <code>serializer.is_valid</code> 时也会引发此问题：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通用视图使用 <code>raise_exception=True</code> 标志，意味着你可以在 API 中全局覆盖验证错误响应的样式。为此，请使用自定义异常处理程序，如上所述。</p>
<p>默认情况下，此异常会导致 HTTP 状态码 "400 Bad Request" 的响应。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十三)：Pagination</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%89)%EF%BC%9APagination.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B8%89)%EF%BC%9APagination.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十三)：Pagination</source>
      <description>目录 分页 (#分页); 设置分页样式 (#设置分页样式); 修改分页样式 (#修改分页样式); 分页API 参考 (#分页API-参考); PageNumberPagination (#PageNumberPagination); 请求 (#请求); 响应 (#响应); 配置 (#配置); 注意事项 (#注意事项); LimitOffsetPagin...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十三)：Pagination</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E5%88%86%E9%A1%B5">分页</a>
<ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F">设置分页样式</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F">修改分页样式</a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E9%A1%B5API-%E5%8F%82%E8%80%83">分页API 参考</a>
<ul>
<li><a href="#PageNumberPagination">PageNumberPagination</a>
<ul>
<li><a href="#%E8%AF%B7%E6%B1%82">请求</a></li>
<li><a href="#%E5%93%8D%E5%BA%94">响应</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
</li>
<li><a href="#LimitOffsetPagination">LimitOffsetPagination</a>
<ul>
<li><a href="#%E8%AF%B7%E6%B1%82">请求</a></li>
<li><a href="#%E5%93%8D%E5%BA%94">响应</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
</li>
<li><a href="#CursorPagination">CursorPagination</a>
<ul>
<li><a href="#%E7%BB%86%E8%8A%82%E5%92%8C%E9%99%90%E5%88%B6">细节和限制</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F">自定义分页样式</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%BD%A0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E7%B1%BB">使用你的自定义分页类</a></li>
<li><a href="#%E5%88%86%E9%A1%B5%E5%92%8C%E6%A8%A1%E5%BC%8F">分页和模式</a></li>
</ul>
</li>
<li><a href="#HTML-%E5%88%86%E9%A1%B5%E6%8E%A7%E4%BB%B6">HTML 分页控件</a>
<ul>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6">自定义控件</a>
<ul>
<li><a href="#%E4%BD%8E%E7%BA%A7-API">低级 API</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/pagination/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E5%88%86%E9%A1%B5" title="分页" target="_blank" rel="noopener noreferrer">分页</a></h1>
<p>REST framework 包含对可定制分页样式的支持。这使你可以将较大的结果集分成单独的数据页面。</p>
<p>分页 API 支持：</p>
<ul>
<li>以分页链接的形式作为响应内容的一部分。</li>
<li>以分页链接的形式包含在响应的 header 中，如 <code>Content-Range</code> 或 <code>Link</code>.</li>
</ul>
<p>内置的样式目前是以分页链接的形式作为响应内容的一部分。使用可浏览的 API 时，此样式更易于访问。</p>
<p>分页仅在你使用通用视图或视图集时自动执行。如果你使用的是常规 <code>APIView</code>，则需要自己调用分页 API 以确保返回分页响应。示例请参阅 <code>mixins.ListModelMixin</code> 和 <code>generics.GenericAPIView</code> 类的源代码。</p>
<p>可以通过将分页类设置为 <code>None</code>，关闭分页。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F" title="设置分页样式" target="_blank" rel="noopener noreferrer">设置分页样式</a></h2>
<p>分页样式可以使用 <code>DEFAULT_PAGINATION_CLASS</code> 和 <code>PAGE_SIZE</code>在settings文件中全局设置。例如，要使用内置的 <code>limit/offset 分页</code>，你可以这样做：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，你需要设置分页类和应使用的页面大小。默认情况下，<code>DEFAULT_PAGINATION_CLASS</code> 和 <code>PAGE_SIZE</code> 都是 <code>None</code>。</p>
<p>你还可以使用 <code>pagination_class</code> 属性在单个视图上设置分页类。通常，你希望在整个 API 中使用相同的分页样式，但你可能希望在每个视图的基础上更改分页的各个方面，例如默认或最大页面大小。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E4%BF%AE%E6%94%B9%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F" title="修改分页样式" target="_blank" rel="noopener noreferrer">修改分页样式</a></h2>
<p>如果要修改分页样式的特定方面，则需要继承其中一个分页类，并设置要更改的属性。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以使用 <code>.pagination_class</code> 属性将新样式应用于视图：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用 <code>DEFAULT_PAGINATION_CLASS</code> 在settings文件中配置以全局应用样式。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 分页<a href="http://drf.jiuyou.info/#/drf/pagination?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=pagenumberpagination" title="PageNumberPagination" target="_blank" rel="noopener noreferrer">PageNumberPagination</a></h2>
<p>此分页样式在请求查询参数中接受一个页码值。</p>
<h4> 请求</h4>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 响应</h4>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 配置</h4>
<p>如果要全局启用 <code>PageNumberPagination</code> 样式，请使用以下配置，并根据需要设置 <code>PAGE_SIZE</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用的是 <code>GenericAPIView</code> 的子类，还可以设置 <code>pagination_class</code> 属性以在每个视图的基础上选择 <code>PageNumberPagination</code>。</p>
<h4> 注意事项</h4>
<p><code>PageNumberPagination</code> 类包含一些可以被覆盖以修改分页样式的属性。</p>
<p>要设置这些属性，你应该继承 <code>PageNumberPagination</code> 类，然后像上面那样启用你的自定义分页类。</p>
<ul>
<li><code>django_paginator_class</code> - 要使用的 Django Paginator 类。默认是 <code>django.core.paginator.Paginator</code>，对于大多数用例来说应该没问题。</li>
<li><code>page_size</code> - 指定页面大小的数字值。如果设置，则会覆盖 <code>PAGE_SIZE</code> setting。默认值与 <code>PAGE_SIZE</code> setting key 相同。</li>
<li><code>page_query_param</code> - 一个字符串值，指定用于分页控件的查询参数的名称。</li>
<li><code>page_size_query_param</code> - 一个字符串值，指定查询参数的名称，允许客户端根据每个请求设置页面大小。默认为 <code>None</code>，表示客户端可能无法控制所请求的页面大小。</li>
<li><code>max_page_size</code> - 一个数字值，表示允许的最大页面大小。该属性仅在 <code>page_size_query_param</code> 也被设置时有效。</li>
<li><code>last_page_strings</code> - 字符串列表或元组，用于指定可能与 <code>page_query_param</code> 一起使用的值，用以请求集合中的最终页面。默认为 <code>('last',)</code></li>
<li><code>template</code> - 在可浏览 API 中渲染分页控件时使用的模板的名称。可能会被覆盖以修改渲染样式，或设置为 <code>None</code> 以完全禁用 HTML 分页控件。默认为 <code>"rest_framework/pagination/numbers.html"</code>。</li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=limitoffsetpagination" title="LimitOffsetPagination" target="_blank" rel="noopener noreferrer">LimitOffsetPagination</a></h2>
<p>这种分页样式反映了查找多个数据库记录时使用的语法。客户端包含 “limit” 和 “offset” 查询参数。limit 表示要返回的 item 的最大数量，并且等同于其他样式中的 <code>page_size</code>。offset 指定查询的起始位置与完整的未分类 item 集的关系。</p>
<h4> 请求</h4>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 响应</h4>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 配置</h4>
<p>若是你需要全局性启用 <code>LimitOffsetPagination</code> 样式, 请使用以下配置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你也可以设置一个 <code>PAGE_SIZE</code> 键。如果使用了 <code>PAGE_SIZE</code> 参数，则 <code>limit</code> 查询参数将是可选的，并且可能会被客户端忽略。</p>
<p>如果使用的是 <code>GenericAPIView</code> 子类，还可以设置 <code>pagination_class</code> 属性以基于每个视图选择 <code>LimitOffsetPagination</code>。</p>
<h4> 注意事项</h4>
<p><code>LimitOffsetPagination</code> 类包含一些可以被覆盖以修改分页样式的属性。</p>
<p>要设置这些属性，应该继承 <code>LimitOffsetPagination</code> 类，然后像上面那样启用你的自定义分页类。</p>
<ul>
<li><code>default_limit</code> - 一个数字值，指定客户端在查询参数中未提供的 limit 。默认值与 <code>PAGE_SIZE</code> setting key 相同。</li>
<li><code>limit_query_param</code> - 一个字符串值，指示 “limit” 查询参数的名称。默认为 <code>'limit'</code>。</li>
<li><code>offset_query_param</code> - 一个字符串值，指示 “offset” 查询参数的名称。默认为 <code>'offset'</code>。</li>
<li><code>max_limit</code> - 一个数字值，表示客户端可以要求的最大允许 limit。默认为 <code>None</code>。</li>
<li><code>template</code> - 在可浏览 API 中渲染分页控件时使用的模板的名称。可能会被覆盖以修改渲染样式，或设置为 <code>None</code> 以完全禁用 HTML 分页控件。默认为 <code>"rest_framework/pagination/numbers.html"</code>。</li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=cursorpagination" title="CursorPagination" target="_blank" rel="noopener noreferrer">CursorPagination</a></h2>
<p>基于游标的分页提供了一个不透明的 “游标” 指示器，客户端可以使用该指示器来翻阅结果集。此分页样式仅提供前向和反向控件，并且不允许客户端导航到任意位置。</p>
<p>基于游标的分页需要在结果集中存在唯一的，不变的 item 顺序。这种排序通常可以是记录上的创建时间戳，因为这确保了排序的一致性。</p>
<p>基于游标的分页比其他方案更复杂。它还要求结果集渲染固定顺序，并且不允许客户端任意索引结果集。但它确实提供了以下好处：</p>
<ul>
<li>提供一致的分页视图。正确使用时 <code>CursorPagination</code> 确保客户端在分页时不会看到同一个 item，即使在分页过程中其他客户端正在插入新 item。</li>
<li>支持使用非常大的数据集。使用极大数据集分页时，使用基于偏移量的分页样式可能会变得效率低下或无法使用。基于游标的分页方案具有固定时间属性，并且不会随着数据集大小的增加而减慢。</li>
</ul>
<h4> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E7%BB%86%E8%8A%82%E5%92%8C%E9%99%90%E5%88%B6" title="细节和限制" target="_blank" rel="noopener noreferrer">细节和限制</a></h4>
<p>正确使用基于游标的分页需要稍微注意细节。你需要考虑希望将该方案应用于何种顺序。默认是按 <code>"-created"</code> 排序。这假设在模型实例上必须有一个 “created” 时间戳字段，并且会渲染一个 “时间轴” 样式分页视图，其中最近添加的 item 是第一个。</p>
<p>你可以通过重写分页类上的 <code>'ordering'</code> 属性或者将 <code>OrderingFilter</code> 过滤器类与 <code>CursorPagination</code> 一起使用来修改排序。与 <code>OrderingFilter</code> 一起使用时，你应该考虑限制用户可以排序的字段。</p>
<p>正确使用游标分页应该有一个满足以下条件的排序字段：</p>
<ul>
<li>在创建时应该是一个不变的值，例如时间戳，slug，或其他只设置一次的字段。</li>
<li>应该是独特的，或几乎独一无二的。毫秒精度时间戳就是一个很好的例子。这种游标分页的实现使用了一种智能的 “位置 + 偏移” 风格，允许它正确地支持非严格唯一的值作为排序。</li>
<li>应该是可以强制为字符串的非空值。</li>
<li>不应该是一个 float。精度错误很容易导致错误的结果。提示：改用小数。（如果你已经有一个 float 字段并且必须对其进行分页，则可以在此处找到<a href="https://gist.github.com/keturn/8bc88525a183fd41c73ffb729b8865be#file-fpcursorpagination-py" title="使用小数来限定精度的示例" target="_blank" rel="noopener noreferrer">使用小数来限定精度的示例</a>。）</li>
<li>该字段应该有一个数据库索引。</li>
</ul>
<p>使用不满足这些约束条件的排序字段通常仍然有效，但是你将失去游标分页的一些好处。</p>
<h4> 配置</h4>
<p>要全局启用 <code>CursorPagination</code> 样式, 请使用以下配置, <code>PAGE_SIZE</code> 根据需要进行修改：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用的是 <code>GenericAPIView</code> 子类，还可以设置 <code>pagination_class</code> 属性以基于每个视图选择 <code>CursorPagination</code>。</p>
<h4> 注意事项</h4>
<p><code>CursorPagination</code> 类包含一些可以被覆盖以修改分页样式的属性。</p>
<p>要设置这些属性，你应该继承 <code>CursorPagination</code> 类，然后像上面那样启用你的自定义分页类。</p>
<ul>
<li><code>page_size</code> = 指定页面大小的数字值。如果设置，则会覆盖 <code>PAGE_SIZE</code> 设置。默认值与 <code>PAGE_SIZE</code> setting key 相同。</li>
<li><code>cursor_query_param</code> = 一个字符串值，指定 “游标” 查询参数的名称。默认为 <code>'cursor'</code>.</li>
<li><code>ordering</code> = 这应该是一个字符串或字符串列表，指定将应用基于游标的分页的字段。例如： <code>ordering = 'slug'</code>。默认为 <code>-created</code>。该值也可以通过在视图上使用 <code>OrderingFilter</code> 来覆盖。</li>
<li><code>template</code> = 在可浏览 API 中渲染分页控件时使用的模板的名称。可能会被覆盖以修改渲染样式，或设置为 <code>None</code> 以完全禁用 HTML 分页控件。默认为 <code>"rest_framework/pagination/previous_and_next.html"</code>。</li>
</ul>
<h1> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E6%A0%B7%E5%BC%8F" title="自定义分页样式" target="_blank" rel="noopener noreferrer">自定义分页样式</a></h1>
<p>要创建自定义分页序列化类，你应该继承 <code>pagination.BasePagination</code> 并覆盖 <code>paginate_queryset(self, queryset, request, view=None)</code> 和 <code>get_paginated_response(self, data)</code> 方法：</p>
<ul>
<li><code>paginate_queryset</code> 方法被传递给初始查询集，并且应该返回一个只包含请求页面中的数据的可迭代对象。</li>
<li><code>get_paginated_response</code> 方法传递序列化的页面数据，并返回一个 <code>Response</code> 实例。</li>
</ul>
<p>请注意，<code>paginate_queryset</code> 方法可以在分页实例上设置状态，而后 <code>get_paginated_response</code> 方法可以使用它。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>假设我们想用一个修改后的格式替换默认的分页输出样式，该样式包含嵌套的 “links” key（包含上一页，下一页链接）。我们可以像这样指定一个自定义分页类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要在配置中设置自定义类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果你关心如何在可浏览的 API 中显示键的顺序，则可以在构建分页响应的主体时选择使用 <code>OrderedDict</code>，这是可选的。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E4%BD%BF%E7%94%A8%E4%BD%A0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E7%B1%BB" title="使用你的自定义分页类" target="_blank" rel="noopener noreferrer">使用你的自定义分页类</a></h2>
<p>要默认使用你的自定义分页类，请修改 <code>DEFAULT_PAGINATION_CLASS</code>设置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表端点的 API 响应现在将包含一个 <code>Link</code> header，而不是将分页链接包含为响应主体的一部分。 </p>
<figure><figcaption></figcaption></figure>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E5%88%86%E9%A1%B5%E5%92%8C%E6%A8%A1%E5%BC%8F" title="分页和模式" target="_blank" rel="noopener noreferrer">分页和模式</a></h2>
<p>通过实现 <code>get_schema_fields()</code> 方法，你还可以使分页控件可用于 REST framework 提供的模式自动生成。此方法应具有以下签名：</p>
<p><code>get_schema_fields(self, view)</code></p>
<p>该方法应该返回一个 <code>coreapi.Field</code> 实例列表。</p>
<figure><figcaption></figcaption></figure>
<h1> <a href="http://drf.jiuyou.info/#/drf/pagination?id=html-%E5%88%86%E9%A1%B5%E6%8E%A7%E4%BB%B6" title="HTML 分页控件" target="_blank" rel="noopener noreferrer">HTML 分页控件</a></h1>
<p>默认情况下，使用分页类将导致 HTML 分页控件显示在可浏览的 API 中。有两种内置显示样式。 <code>PageNumberPagination</code> 和 <code>LimitOffsetPagination</code> 类显示包含上一页和下一页控件的页码列表。 <code>CursorPagination</code> 类显示更简单的样式，只显示上一页和下一页控件。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6" title="自定义控件" target="_blank" rel="noopener noreferrer">自定义控件</a></h2>
<p>你可以覆盖渲染 HTML 分页控件的模板。这两种内置式样是：</p>
<ul>
<li><code>rest_framework/pagination/numbers.html</code></li>
<li><code>rest_framework/pagination/previous_and_next.html</code></li>
</ul>
<p>在全局模板目录中提供具有这些路径的模板将覆盖相关分页类的默认渲染。</p>
<p>或者，你可以通过在现有类的子类上完全禁用 HTML 分页控件，将 <code>template=None</code> 设置为该类的属性。然后，你需要配置你的 <code>DEFAULT_PAGINATION_CLASS</code> setting key，以将你的自定义类用作默认分页样式。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/pagination?id=%E4%BD%8E%E7%BA%A7-api" title="低级 API" target="_blank" rel="noopener noreferrer">低级 API</a></h4>
<p>用于确定分页类是否应显示控件的低级 API 作为分页实例上的 <code>display_page_controls</code> 属性公开。如果需要显示HTML 分页控件，自定义分页类应该在 <code>paginate_queryset</code> 方法中设置为 <code>True</code> 。</p>
<p><code>.to_html()</code> 和 <code>.get_html_context()</code> 方法也可以在自定义分页类中重写，以便进一步自定义控件的渲染方式。</p>
<h1> 扩展</h1>
<ul>
<li>
<p><code>DRF-extensions</code></p>
<p>该 <a href="https://link.juejin.cn/?target=https://chibisov.github.io/drf-extensions/docs/" title="DRF-extensions" target="_blank" rel="noopener noreferrer">DRF-extensions</a><a href="https://link.juejin.cn/?target=https://chibisov.github.io/drf-extensions/docs/" title=" 软件包" target="_blank" rel="noopener noreferrer"> 软件包</a>包括一个 <code>PaginateByMaxMixinmixin</code> 类, 该类允许您的 API 客户端指定 <code>?page_size=max</code> 以获得最大允许页面大小</p>
</li>
<li>
<p><code>drf-proxy-pagination</code></p>
<p>该 <a href="https://link.juejin.cn/?target=https://github.com/tuffnatty/drf-proxy-pagination" title="drf-proxy-pagination" target="_blank" rel="noopener noreferrer">drf-proxy-pagination</a><a href="https://link.juejin.cn/?target=https://github.com/tuffnatty/drf-proxy-pagination" title=" 软件包" target="_blank" rel="noopener noreferrer"> 软件包</a>包括一个 <code>ProxyPagination</code> 类, 该类允许选择带有查询参数的分页类</p>
</li>
<li>
<p><code>link-header-pagination</code></p>
<p>该 <a href="https://link.juejin.cn/?target=https://github.com/tbeadle/django-rest-framework-link-header-pagination" title="django-rest-framework-link-header-pagination" target="_blank" rel="noopener noreferrer">django-rest-framework-link-header-pagination</a><a href="https://link.juejin.cn/?target=https://github.com/tbeadle/django-rest-framework-link-header-pagination" title=" 软件包" target="_blank" rel="noopener noreferrer"> 软件包</a>包括一个 <code>LinkHeaderPagination</code> 类, 该类通过 Github 开发人员文档中 Link 描述的 HTTP 标头提供分页</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十九): 测试</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B9%9D)-%20%E6%B5%8B%E8%AF%95.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%B9%9D)-%20%E6%B5%8B%E8%AF%95.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十九): 测试</source>
      <description>目录 测试 (#测试); APIRequestFactory (#APIRequestFactory); 创建测试请求 (#创建测试请求); 使用 format 参数 (#使用-format-参数); 显式编码请求主体 (#显式编码请求主体); PUT 和 PATCH 与表单数据 (#PUT-和-PATCH-与表单数据); 强制认证 (#强制认证); ...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十九): 测试</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li>
<li><a href="#APIRequestFactory">APIRequestFactory</a>
<ul>
<li><a href="#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E8%AF%B7%E6%B1%82">创建测试请求</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-format-%E5%8F%82%E6%95%B0">使用 format 参数</a></li>
<li><a href="#%E6%98%BE%E5%BC%8F%E7%BC%96%E7%A0%81%E8%AF%B7%E6%B1%82%E4%B8%BB%E4%BD%93">显式编码请求主体</a></li>
<li><a href="#PUT-%E5%92%8C-PATCH-%E4%B8%8E%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE">PUT 和 PATCH 与表单数据</a></li>
</ul>
</li>
<li><a href="#%E5%BC%BA%E5%88%B6%E8%AE%A4%E8%AF%81">强制认证</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6-CSRF-%E9%AA%8C%E8%AF%81">强制 CSRF 验证</a></li>
</ul>
</li>
<li><a href="#APIClient">APIClient</a>
<ul>
<li><a href="#%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82">发出请求</a></li>
<li><a href="#%E8%AE%A4%E8%AF%81">认证</a>
<ul>
<li><a href="#loginkwargs">.login(**kwargs)</a></li>
<li><a href="#credentialskwargs">.credentials(**kwargs)</a></li>
<li><a href="#force_authenticateuserNone-tokenNone">.force_authenticate(user=None, token=None)</a></li>
</ul>
</li>
<li><a href="#CSRF-%E9%AA%8C%E8%AF%81">CSRF 验证</a></li>
</ul>
</li>
<li><a href="#RequestsClient">RequestsClient</a>
<ul>
<li><a href="#RequestsClient-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%B5%B7%E5%B7%A5%E4%BD%9C">RequestsClient 与数据库一起工作</a></li>
<li><a href="#Headers--%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">Headers &amp; 身份验证</a></li>
<li><a href="#CSRF">CSRF</a></li>
<li><a href="#Live-tests">Live tests</a></li>
</ul>
</li>
<li><a href="#CoreAPIClient">CoreAPIClient</a>
<ul>
<li><a href="#Headers--%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">Headers &amp; 身份验证</a></li>
</ul>
</li>
<li><a href="#API-Test-cases">API Test cases</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
<li><a href="#URLPatternsTestCase">URLPatternsTestCase</a>
<ul>
<li><a href="#%E4%BE%8B%E5%A6%82">例如</a></li>
</ul>
</li>
<li><a href="#%E6%B5%8B%E8%AF%95%E5%93%8D%E5%BA%94">测试响应</a>
<ul>
<li><a href="#%E6%A3%80%E6%9F%A5%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE">检查响应数据</a></li>
<li><a href="#%E6%B8%B2%E6%9F%93%E5%93%8D%E5%BA%94">渲染响应</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AE">配置</a>
<ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%A0%BC%E5%BC%8F">设置默认格式</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%8F%AF%E7%94%A8%E7%9A%84%E6%A0%BC%E5%BC%8F">设置可用的格式</a></li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/testing/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E6%B5%8B%E8%AF%95" title="测试" target="_blank" rel="noopener noreferrer">测试</a></h1>
<p>REST framework 包含一些扩展 Django 现有测试框架的助手类，并改进对 API 请求的支持。</p>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=apirequestfactory" title="APIRequestFactory" target="_blank" rel="noopener noreferrer">APIRequestFactory</a></h1>
<p>扩展了 Django 现有的 <code>RequestFactory</code> 类。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E8%AF%B7%E6%B1%82" title="创建测试请求" target="_blank" rel="noopener noreferrer">创建测试请求</a></h2>
<p><code>APIRequestFactory</code> 类支持与 Django 的标准 <code>RequestFactory</code> 类几乎完全相同的 API。这意味着标准的 <code>.get()</code>, <code>.post()</code>, <code>.put()</code>, <code>.patch()</code>, <code>.delete()</code>, <code>.head()</code> 和 <code>.options()</code> 方法都可用。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E4%BD%BF%E7%94%A8-format-%E5%8F%82%E6%95%B0" title="使用 " target="_blank" rel="noopener noreferrer">使用 </a><a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E4%BD%BF%E7%94%A8-format-%E5%8F%82%E6%95%B0" title="format" target="_blank" rel="noopener noreferrer">format</a><a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E4%BD%BF%E7%94%A8-format-%E5%8F%82%E6%95%B0" title=" 参数" target="_blank" rel="noopener noreferrer"> 参数</a></h4>
<p>创建请求主体（如 <code>post</code>，<code>put</code> 和 <code>patch</code>）的方法包括 <code>format</code> 参数，这使得使用除 multipart 表单数据以外的内容类型生成请求变得容易。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，可用的格式是 <code>'multipart'</code> 和 <code>'json'</code> 。为了与 Django 现有的 <code>RequestFactory</code> 兼容，默认格式是 <code>'multipart'</code>。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E6%98%BE%E5%BC%8F%E7%BC%96%E7%A0%81%E8%AF%B7%E6%B1%82%E4%B8%BB%E4%BD%93" title="显式编码请求主体" target="_blank" rel="noopener noreferrer">显式编码请求主体</a></h4>
<p>如果你需要显式编码请求正文，则可以通过设置 <code>content_type</code> 标志来完成。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=put-%E5%92%8C-patch-%E4%B8%8E%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE" title="PUT 和 PATCH 与表单数据" target="_blank" rel="noopener noreferrer">PUT 和 PATCH 与表单数据</a></h4>
<p>Django 的 <code>RequestFactory</code> 和 REST framework 的 <code>APIRequestFactory</code> 之间值得注意的一个区别是 multipart 表单数据将被编码为除 <code>.post()</code> 以外的方法。</p>
<p>例如，使用 <code>APIRequestFactory</code>，你可以像这样做一个表单 PUT 请求：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Django 的 <code>RequestFactory</code>，你需要自己显式编码数据：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E5%BC%BA%E5%88%B6%E8%AE%A4%E8%AF%81" title="强制认证" target="_blank" rel="noopener noreferrer">强制认证</a></h2>
<p>当使用请求工厂直接测试视图时，能够直接验证请求通常很方便，而不必构造正确的验证凭证。</p>
<p>要强制验证请求，请使用 <code>force_authenticate()</code> 方法。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的签名是 <code>force_authenticate(request, user=None, token=None)</code>。调用时，可以设置 user 和 token 中的任一个或两个。</p>
<p>例如，当使用令牌强行进行身份验证时，你可能会执行以下操作：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>注意</strong>: <code>force_authenticate</code> 直接将 <code>request.user</code> 设置为内存中的 <code>user</code> 实例。如果跨多个测试重新使用同一个 <code>user</code> 实例来更新已保存的 <code>user</code> 状态，则可能需要在测试之间调用 <code>refresh_from_db()</code>。</p>
<hr>
<p><strong>注意</strong>: 使用 <code>APIRequestFactory</code> 时，返回的对象是 Django 的标准 <code>HttpRequest</code>，而不是 REST framework 的 <code>Request</code> 对象，只有在调用视图后才会生成该对象。</p>
<p>这意味着直接在请求对象上设置属性可能并不总是有你期望的效果。例如，直接设置 <code>.token</code> 将不起作用，并且仅在使用会话身份验证时直接设置 <code>.user</code> 才会起作用。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E5%BC%BA%E5%88%B6-csrf-%E9%AA%8C%E8%AF%81" title="强制 CSRF 验证" target="_blank" rel="noopener noreferrer">强制 CSRF 验证</a></h2>
<p>默认情况下，使用 <code>APIRequestFactory</code> 创建的请求在传递给 REST framework 视图时不会应用 CSRF 验证。如果你需要明确打开 CSRF 验证，则可以通过在实例化工厂时设置 <code>enforce_csrf_checks</code> 标志来实现。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<p><strong>注意</strong>: 值得注意的是，Django 的标准 <code>RequestFactory</code> 不需要包含这个选项，因为当使用常规的 Django 时，CSRF 验证发生在中间件中，当直接测试视图时该中间件不运行。在使用 REST framework 时，CSRF 验证发生在视图内，因此请求工厂需要禁用视图级 CSRF 检查。</p>
<hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=apiclient" title="APIClient" target="_blank" rel="noopener noreferrer">APIClient</a></h1>
<p>扩展了 Django 现有的 <code>Client</code> 类。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82" title="发出请求" target="_blank" rel="noopener noreferrer">发出请求</a></h2>
<p><code>APIClient</code> 类支持与 Django 标准 <code>Client</code> 类相同的请求接口。这意味着标准的 <code>.get()</code>, <code>.post()</code>, <code>.put()</code>, <code>.patch()</code>, <code>.delete()</code>, <code>.head()</code> 和 <code>.options()</code> 方法都可用。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E8%AE%A4%E8%AF%81" title="认证" target="_blank" rel="noopener noreferrer">认证</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=loginkwargs" title=".login(**kwargs)" target="_blank" rel="noopener noreferrer">.login(**kwargs)</a></h4>
<p><code>login</code> 方法的功能与 Django 的常规 <code>Client</code> 类一样。这使你可以对任何包含 <code>SessionAuthentication</code> 的视图进行身份验证。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要登出，请照常调用 <code>logout</code> 方法。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>login</code> 方法适用于测试使用会话认证的 API，例如包含 AJAX 与 API 交互的网站。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=credentialskwargs" title=".credentials(**kwargs)" target="_blank" rel="noopener noreferrer">.credentials(**kwargs)</a></h4>
<p><code>credentials</code> 方法可用于设置 header，这些 header 将包含在测试客户端的所有后续请求中。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，第二次调用 <code>credentials</code> 会覆盖任何现有凭证。你可以通过调用没有参数的方法来取消任何现有的凭证。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>credentials</code> 方法适用于测试需要验证 header 的 API，例如 basic 验证，OAuth1 和 OAuth2 验证以及简单令牌验证方案。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=force_authenticateusernone-tokennone" title=".force_authenticate(user=None, token=None)" target="_blank" rel="noopener noreferrer">.force_authenticate(user=None, token=None)</a></h4>
<p>有时你可能想完全绕过认证，强制测试客户端的所有请求被自动视为已认证。</p>
<p>如果你正在测试 API 但是不想构建有效的身份验证凭据以进行测试请求，则这可能是一个有用的捷径。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要对后续请求进行身份验证，请调用 <code>force_authenticate</code> 将 user 和(或) token 设置为 <code>None</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=csrf-%E9%AA%8C%E8%AF%81" title="CSRF 验证" target="_blank" rel="noopener noreferrer">CSRF 验证</a></h2>
<p>默认情况下，使用 <code>APIClient</code> 时不应用 CSRF 验证。如果你需要明确启用 CSRF 验证，则可以通过在实例化客户端时设置 <code>enforce_csrf_checks</code> 标志来实现。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>像往常一样，CSRF 验证将仅适用于任何会话验证视图。这意味着 CSRF 验证只有在客户端通过调用 <code>login()</code> 登录后才会发生。</p>
<hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=requestsclient" title="RequestsClient" target="_blank" rel="noopener noreferrer">RequestsClient</a></h1>
<p>REST framework 还包含一个客户端，用于使用流行的 Python 库 <code>requests</code> 与应用程序进行交互。 这可能是有用的，如果：</p>
<ul>
<li>你期望主要从另一个 Python 服务与 API 进行交互，并且希望在与客户端相同的级别测试该服务。</li>
<li>你希望以这样的方式编写测试，以便它们也可以在分段或实时环境中运行。</li>
</ul>
<p>它暴露了与直接使用请求会话完全相同的接口。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，requests client 要求你传递完全限定的 URL。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=requestsclient-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%B5%B7%E5%B7%A5%E4%BD%9C" title="RequestsClient" target="_blank" rel="noopener noreferrer">RequestsClient</a><a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=requestsclient-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%B5%B7%E5%B7%A5%E4%BD%9C" title=" 与数据库一起工作" target="_blank" rel="noopener noreferrer"> 与数据库一起工作</a></h2>
<p>如果你想编写仅与服务接口交互的测试，则 <code>RequestsClient</code> 类很有用。这比使用标准的 Django 测试客户端要严格一些，因为这意味着所有的交互必须通过 API。</p>
<p>如果你使用的是 <code>RequestsClient</code>，你需要确保测试设置和结果断言以常规 API 调用的方式执行，而不是直接与数据库模型进行交互。例如，不是检查 <code>Customer.objects.count() == 3</code>，而是列出 customers 端点，并确保它包含三条记录。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=headers-amp-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81" title="Headers &amp; 身份验证" target="_blank" rel="noopener noreferrer">Headers &amp; 身份验证</a></h2>
<p>自定义 header 和身份验证凭证的提供方式与使用标准 <code>requests.Session</code> 实例时的方式相同。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=csrf" title="CSRF" target="_blank" rel="noopener noreferrer">CSRF</a></h2>
<p>如果你使用 <code>SessionAuthentication</code> ，那么你需要为 <code>POST</code>, <code>PUT</code>, <code>PATCH</code> 或 <code>DELETE</code> 请求包含一个 CSRF 令牌。</p>
<p>你可以通过遵循基于 JavaScript 的客户端使用的相同流程来实现。首先进行 <code>GET</code> 请求以获取 CRSF 令牌，然后在以下请求中呈现该令牌。</p>
<p>例如...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=live-tests" title="Live tests" target="_blank" rel="noopener noreferrer">Live tests</a></h2>
<p>使用 <code>RequestsClient</code> 和 <code>CoreAPIClient</code> 可以编写在开发环境中运行的测试用例，也可以直接根据测试服务器或生产环境运行测试用例。</p>
<p>使用这种风格来创建几个核心功能的基本测试是验证你的实时服务的有效方法。这样做可能需要仔细注意安装和卸载（setup and teardown），以确保测试的运行方式不会直接影响客户数据。</p>
<hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=coreapiclient" title="CoreAPIClient" target="_blank" rel="noopener noreferrer">CoreAPIClient</a></h1>
<p>CoreAPIClient 允许你使用 Python <code>coreapi</code> 客户端库与你的 API 进行交互。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=headers-amp-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81-1" title="Headers &amp; 身份验证" target="_blank" rel="noopener noreferrer">Headers &amp; 身份验证</a></h2>
<p>自定义 header 和身份验证可以与 <code>RequestsClient</code> 类似的方式和 <code>CoreAPIClient</code> 一起使用。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=api-test-cases" title="API Test cases" target="_blank" rel="noopener noreferrer">API Test cases</a></h1>
<p>REST framework 包含以下测试用例类，它们类似现有的 Django 测试用例类，但使用 <code>APIClient</code> 而不是 Django 的默认 <code>Client</code>。</p>
<ul>
<li><code>APISimpleTestCase</code></li>
<li><code>APITransactionTestCase</code></li>
<li><code>APITestCase</code></li>
<li><code>APILiveServerTestCase</code></li>
</ul>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>你可以像使用常规 Django 测试用例类一样使用任何 REST framework 的测试用例类。 <code>self.client</code> 属性将是一个 <code>APIClient</code> 实例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=urlpatternstestcase" title="URLPatternsTestCase" target="_blank" rel="noopener noreferrer">URLPatternsTestCase</a></h1>
<p>REST framework 还提供了一个用于隔离每个类的 <code>urlpatterns</code> 的测试用例类。请注意，它继承自 Django 的 <code>SimpleTestCase</code>，并且很可能需要与另一个测试用例类混合使用。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E4%BE%8B%E5%A6%82" title="例如" target="_blank" rel="noopener noreferrer">例如</a></h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E6%B5%8B%E8%AF%95%E5%93%8D%E5%BA%94" title="测试响应" target="_blank" rel="noopener noreferrer">测试响应</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E6%A3%80%E6%9F%A5%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE" title="检查响应数据" target="_blank" rel="noopener noreferrer">检查响应数据</a></h2>
<p>在检查测试响应的有效性时，检查响应的创建数据通常比较方便，而不是检查完全渲染的响应。</p>
<p>例如，检查 <code>response.data</code> 更容易：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而不是检查解析 <code>response.content</code> 的结果：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E6%B8%B2%E6%9F%93%E5%93%8D%E5%BA%94" title="渲染响应" target="_blank" rel="noopener noreferrer">渲染响应</a></h2>
<p>如果你使用 <code>APIRequestFactory</code> 直接测试视图，则返回的响应将不会渲染，因为模板响应的渲染由 Django 的内部请求 - 响应循环执行。为了访问 <code>response.content</code>，你首先需要渲染响应。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E9%85%8D%E7%BD%AE" title="配置" target="_blank" rel="noopener noreferrer">配置</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%A0%BC%E5%BC%8F" title="设置默认格式" target="_blank" rel="noopener noreferrer">设置默认格式</a></h2>
<p>用于创建测试请求的默认格式可以使用 <code>TEST_REQUEST_DEFAULT_FORMAT</code> setting key 进行设置。例如，默认情况下总是对测试请求使用 JSON 而不是标准的 multipart 表单请求，请在 <code>settings.py</code> 文件中设置以下内容：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/124a8dac-eead-4114-a3a6-b68772043a01/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_124a8dac-eead-4114-a3a6-b68772043a01#/drf/testing?id=%E8%AE%BE%E7%BD%AE%E5%8F%AF%E7%94%A8%E7%9A%84%E6%A0%BC%E5%BC%8F" title="设置可用的格式" target="_blank" rel="noopener noreferrer">设置可用的格式</a></h2>
<p>如果你需要使用除 multipart 或 json 请求之外的其他方法来测试请求，则可以通过设置 <code>TEST_REQUEST_RENDERER_CLASSES</code> setting 来完成。</p>
<p>例如，要在测试请求中添加对 <code>format ='html'</code> 的支持，您可能在 <code>settings.py</code> 文件中有这样的内容。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十二)：Returning URLs</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%BA%8C)%EF%BC%9AReturning%20URLs.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%BA%8C)%EF%BC%9AReturning%20URLs.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十二)：Returning URLs</source>
      <description>目录 返回 URL (#返回-URL); reverse (#reverse); reverse\_lazy (#reverse_lazy); 官方原文链接 (http://www.django-rest-framework.org/api-guide/reverse/ &amp;quot;官方原文链接&amp;quot;) 通常，从 Web API（例如 http://example....</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十二)：Returning URLs</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E8%BF%94%E5%9B%9E-URL">返回 URL</a>
<ul>
<li><a href="#reverse">reverse</a></li>
<li><a href="#reverse_lazy">reverse_lazy</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/reverse/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/reverse?id=%E8%BF%94%E5%9B%9E-url" title="返回 URL" target="_blank" rel="noopener noreferrer">返回 URL</a></h1>
<p>通常，从 Web API（例如 <code>http://example.com/foobar</code>）返回绝对 URI 可能是更好的做法，而不是返回相对 URI，例如 <code>/foobar</code>。</p>
<p>这样做的好处有：</p>
<ul>
<li>它更明确。</li>
<li>它为你的 API 客户端留下更少的工作。</li>
<li>当字符串在诸如 JSON 这样的表示中没有本地 URI 类型时，它的含义是没有歧义的。</li>
<li>它使得使用超链接标记 HTML 表示等事情变得很容易。</li>
</ul>
<p>REST framework 提供了两个实用函数，可以更简单地从 Web API 返回绝对 URI。</p>
<p>使用它们不是必须的，但是如果你这样做，自描述 API 将能够自动为你输出超链接，这使得浏览 API 变得更容易。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/reverse?id=reverse" title="reverse" target="_blank" rel="noopener noreferrer">reverse</a></h2>
<p><strong>签名:</strong> <code>reverse(viewname, *args, **kwargs)</code></p>
<p>具有与 <code>django.urls.reverse</code> 相同的行为，除了它返回一个完全限定的 URL，使用 request 来确定主机和端口。</p>
<p>你应该将 request 作为关键字参数包含在该函数中，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/reverse?id=reverse_lazy" title="reverse_lazy" target="_blank" rel="noopener noreferrer">reverse_lazy</a></h2>
<p><strong>签名:</strong> <code>reverse_lazy(viewname, *args, **kwargs)</code></p>
<p>具有与 <code>django.urls.reverse_lazy</code> 相同的行为，除了它返回一个完全限定的 URL，使用 request 来确定主机和端口。</p>
<p>与 <code>reverse</code> 函数一样，你应该将 <code>request</code> 作为关键字参数包含在函数中，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十五): 元数据</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%BA%94)-%20%E5%85%83%E6%95%B0%E6%8D%AE.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E4%BA%94)-%20%E5%85%83%E6%95%B0%E6%8D%AE.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十五): 元数据</source>
      <description>目录 元数据 (#元数据); 设置元数据 scheme (#设置元数据-scheme); 创建 schema 端点 (#创建-schema-端点); 自定义元数据类 (#自定义元数据类); 举个栗子 (#举个栗子); 官方原文链接 (http://www.django-rest-framework.org/api-guide/metadata/ &amp;quot;官方...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十五): 元数据</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E5%85%83%E6%95%B0%E6%8D%AE">元数据</a>
<ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%85%83%E6%95%B0%E6%8D%AE-scheme">设置元数据 scheme</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA-schema-%E7%AB%AF%E7%82%B9">创建 schema 端点</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E6%95%B0%E6%8D%AE%E7%B1%BB">自定义元数据类</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/metadata/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/metadata?id=%E5%85%83%E6%95%B0%E6%8D%AE" title="元数据" target="_blank" rel="noopener noreferrer">元数据</a></h1>
<p>REST framework 包含一个可配置的机制，用于确定 API 如何响应 <code>OPTIONS</code> 请求。这使你可以返回 API schema 或其他资源信息。</p>
<p>对于 HTTP <code>OPTIONS</code> 请求应该返回哪种风格的响应，目前还没有任何被广泛采用的约定，所以我们提供了一种专门的风格来返回一些有用的信息。</p>
<p>下面是一个示例响应，演示默认返回的信息。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/metadata?id=%E8%AE%BE%E7%BD%AE%E5%85%83%E6%95%B0%E6%8D%AE-scheme" title="设置元数据 scheme" target="_blank" rel="noopener noreferrer">设置元数据 scheme</a></h2>
<p>你可以使用 <code>DEFAULT_METADATA_CLASS</code> 在settings文件中全局设置元数据类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者你可以单独设置一个视图的元数据类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>REST framework 包只包含一个名为 <code>SimpleMetadata</code> 的元数据类实现。如果你想使用另一种风格，你需要实现一个自定义的元数据类。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/metadata?id=%E5%88%9B%E5%BB%BA-schema-%E7%AB%AF%E7%82%B9" title="创建 schema 端点" target="_blank" rel="noopener noreferrer">创建 schema 端点</a></h2>
<p>如果你对创建通过常规 GET 请求访问的 schema 端点有特定要求，则可以考虑重新使用元数据 API 来实现此目的。</p>
<p>例如，可以在视图集上使用以下附加路由来提供可链接的 schema 端点。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几个原因可以选择采用这种方法，包括 <code>OPTIONS</code> 响应不能缓存。</p>
<hr>
<h1> <a href="http://drf.jiuyou.info/#/drf/metadata?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E6%95%B0%E6%8D%AE%E7%B1%BB" title="自定义元数据类" target="_blank" rel="noopener noreferrer">自定义元数据类</a></h1>
<p>如果你想提供一个自定义的元数据类，你应该继承 <code>BaseMetadata</code> 并且实现 <code>determine_metadata(self, request, view)</code> 方法。</p>
<p>你可能想要做的事情包括返回 schema 信息，使用 JSON schema 等格式，或将调试信息返回给管理员用户。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/metadata?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>以下类可用于限定返回到 <code>OPTIONS</code> 请求的信息。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后配置你的设置以使用此自定义类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十八): settings</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E5%85%AB)-%20settings.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E5%85%AB)-%20settings.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十八): settings</source>
      <description>目录 Settings (#Settings); 访问 settings (#访问-settings); API 参考 (#API-参考); API 策略设置 (#API-策略设置); DEFAULT\_RENDERER\_CLASSES (#DEFAULTRENDERERCLASSES); DEFAULT\_PARSER\_CLASSES (#DEF...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十八): settings</h1>
<h2> 目录</h2>
<ul>
<li><a href="#Settings">Settings</a>
<ul>
<li><a href="#%E8%AE%BF%E9%97%AE-settings">访问 settings</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#API-%E7%AD%96%E7%95%A5%E8%AE%BE%E7%BD%AE">API 策略设置</a>
<ul>
<li><a href="#DEFAULT_RENDERER_CLASSES">DEFAULT_RENDERER_CLASSES</a></li>
<li><a href="#DEFAULT_PARSER_CLASSES">DEFAULT_PARSER_CLASSES</a></li>
<li><a href="#DEFAULT_AUTHENTICATION_CLASSES">DEFAULT_AUTHENTICATION_CLASSES</a></li>
<li><a href="#DEFAULT_PERMISSION_CLASSES">DEFAULT_PERMISSION_CLASSES</a></li>
<li><a href="#DEFAULT_THROTTLE_CLASSES">DEFAULT_THROTTLE_CLASSES</a></li>
<li><a href="#DEFAULT_CONTENT_NEGOTIATION_CLASS">DEFAULT_CONTENT_NEGOTIATION_CLASS</a></li>
<li><a href="#DEFAULT_SCHEMA_CLASS">DEFAULT_SCHEMA_CLASS</a></li>
</ul>
</li>
<li><a href="#Generic-view-settings">Generic view settings</a>
<ul>
<li><a href="#DEFAULT_FILTER_BACKENDS">DEFAULT_FILTER_BACKENDS</a></li>
<li><a href="#PAGE_SIZE">PAGE_SIZE</a></li>
<li><a href="#SEARCH_PARAM">SEARCH_PARAM</a>
<ul>
<li><a href="#ORDERING_PARAM">ORDERING_PARAM</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%AE%BE%E7%BD%AE">版本控制设置</a>
<ul>
<li><a href="#DEFAULT_VERSION">DEFAULT_VERSION</a></li>
<li><a href="#ALLOWED_VERSIONS">ALLOWED_VERSIONS</a></li>
<li><a href="#VERSION_PARAM">VERSION_PARAM</a></li>
</ul>
</li>
<li><a href="#%E8%AE%A4%E8%AF%81%E8%AE%BE%E7%BD%AE">认证设置</a>
<ul>
<li><a href="#UNAUTHENTICATED_USER">UNAUTHENTICATED_USER</a></li>
<li><a href="#UNAUTHENTICATED_TOKEN">UNAUTHENTICATED_TOKEN</a></li>
</ul>
</li>
<li><a href="#%E6%B5%8B%E8%AF%95%E8%AE%BE%E7%BD%AE">测试设置</a>
<ul>
<li><a href="#TEST_REQUEST_DEFAULT_FORMAT">TEST_REQUEST_DEFAULT_FORMAT</a></li>
<li><a href="#TEST_REQUEST_RENDERER_CLASSES">TEST_REQUEST_RENDERER_CLASSES</a></li>
</ul>
</li>
<li><a href="#Schema-%E7%94%9F%E6%88%90%E6%8E%A7%E5%88%B6">Schema 生成控制</a>
<ul>
<li><a href="#SCHEMA_COERCE_PATH_PK">SCHEMA_COERCE_PATH_PK</a></li>
<li><a href="#SCHEMA_COERCE_METHOD_NAMES">SCHEMA_COERCE_METHOD_NAMES</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E5%AE%B9%E7%B1%BB%E5%9E%8B%E6%8E%A7%E5%88%B6">内容类型控制</a>
<ul>
<li><a href="#URL_FORMAT_OVERRIDE">URL_FORMAT_OVERRIDE</a></li>
<li><a href="#FORMAT_SUFFIX_KWARG">FORMAT_SUFFIX_KWARG</a></li>
</ul>
</li>
<li><a href="#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F">日期和时间格式</a>
<ul>
<li><a href="#DATETIME_FORMAT">DATETIME_FORMAT</a></li>
<li><a href="#DATETIME_INPUT_FORMATS">DATETIME_INPUT_FORMATS</a></li>
<li><a href="#DATE_FORMAT">DATE_FORMAT</a></li>
<li><a href="#DATE_INPUT_FORMATS">DATE_INPUT_FORMATS</a></li>
<li><a href="#TIME_FORMAT">TIME_FORMAT</a></li>
<li><a href="#TIME_INPUT_FORMATS">TIME_INPUT_FORMATS</a></li>
</ul>
</li>
<li><a href="#%E7%BC%96%E7%A0%81">编码</a>
<ul>
<li><a href="#UNICODE_JSON">UNICODE_JSON</a></li>
<li><a href="#COMPACT_JSON">COMPACT_JSON</a></li>
<li><a href="#STRICT_JSON">STRICT_JSON</a></li>
<li><a href="#COERCE_DECIMAL_TO_STRING">COERCE_DECIMAL_TO_STRING</a></li>
</ul>
</li>
<li><a href="#View-names-and-descriptions">View names and descriptions</a>
<ul>
<li><a href="#VIEW_NAME_FUNCTION">VIEW_NAME_FUNCTION</a></li>
<li><a href="#VIEW_DESCRIPTION_FUNCTION">VIEW_DESCRIPTION_FUNCTION</a></li>
</ul>
</li>
<li><a href="#HTML-Select-%E5%AD%97%E6%AE%B5%E6%88%AA%E5%8F%96">HTML Select 字段截取</a>
<ul>
<li><a href="#HTML_SELECT_CUTOFF">HTML_SELECT_CUTOFF</a></li>
<li><a href="#HTML_SELECT_CUTOFF_TEXT">HTML_SELECT_CUTOFF_TEXT</a></li>
</ul>
</li>
<li><a href="#%E6%9D%82%E9%A1%B9%E8%AE%BE%E7%BD%AE">杂项设置</a>
<ul>
<li><a href="#EXCEPTION_HANDLER">EXCEPTION_HANDLER</a></li>
<li><a href="#NON_FIELD_ERRORS_KEY">NON_FIELD_ERRORS_KEY</a></li>
<li><a href="#URL_FIELD_NAME">URL_FIELD_NAME</a></li>
<li><a href="#NUM_PROXIES">NUM_PROXIES</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/settings/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=settings" title="Settings" target="_blank" rel="noopener noreferrer">Settings</a></h1>
<blockquote>
<p>Namespaces are one honking great idea - let's do more of those!  — [The Zen of Python][cite]</p>
</blockquote>
<p>REST framework 的配置是在名为 <code>REST_FRAMEWORK</code> 的单个 Django 设置中的所有命名空间。</p>
<p>例如，你的项目的 <code>settings.py</code> 文件可能包含如下所示的内容：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E8%AE%BF%E9%97%AE-settings" title="访问 settings" target="_blank" rel="noopener noreferrer">访问 settings</a></h2>
<p>如果你需要访问项目中 REST framework 的 API 设置值，则应使用 <code>api_settings</code> 对象。例如。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>api_settings</code> 对象将检查用户定义的设置，否则将回退到默认值。任何使用字符串导入路径引用类的设置都会自动导入并返回被引用的类，而不是字符串文字。</p>
<hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=api-%E7%AD%96%E7%95%A5%E8%AE%BE%E7%BD%AE" title="API 策略设置" target="_blank" rel="noopener noreferrer">API 策略设置</a></h2>
<p><em>以下设置控制基本 API 策略，并应用于每个基于 <strong><code>APIView</code></strong> 类的视图或基于 <strong><code>@api_view</code></strong> 函数的视图。</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_renderer_classes" title="DEFAULT_RENDERER_CLASSES" target="_blank" rel="noopener noreferrer">DEFAULT_RENDERER_CLASSES</a></h4>
<p>渲染器类的列表或元组，用于确定返回 <code>Response</code> 对象时可能使用的默认渲染器集。</p>
<p>默认值：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_parser_classes" title="DEFAULT_PARSER_CLASSES" target="_blank" rel="noopener noreferrer">DEFAULT_PARSER_CLASSES</a></h4>
<p>解析器类的列表或元组，用于确定访问 <code>request.data</code> 属性时使用的默认解析器集。</p>
<p>默认值：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_authentication_classes" title="DEFAULT_AUTHENTICATION_CLASSES" target="_blank" rel="noopener noreferrer">DEFAULT_AUTHENTICATION_CLASSES</a></h4>
<p>身份验证类的列表或元组，用于确定在访问 <code>request.user</code> 或 <code>request.auth</code> 属性时使用的默认身份验证集。</p>
<p>默认值：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_permission_classes" title="DEFAULT_PERMISSION_CLASSES" target="_blank" rel="noopener noreferrer">DEFAULT_PERMISSION_CLASSES</a></h4>
<p>权限类的列表或元组，用于确定在视图开始时检查的默认权限集。权限必须由列表中的每个类授予。</p>
<p>默认值：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_throttle_classes" title="DEFAULT_THROTTLE_CLASSES" target="_blank" rel="noopener noreferrer">DEFAULT_THROTTLE_CLASSES</a></h4>
<p>限流类的列表或元组，用于确定在视图开始时检查的默认限流类集。</p>
<p>默认值： <code>()</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_content_negotiation_class" title="DEFAULT_CONTENT_NEGOTIATION_CLASS" target="_blank" rel="noopener noreferrer">DEFAULT_CONTENT_NEGOTIATION_CLASS</a></h4>
<p>内容协商类，用于确定如何为响应选择渲染器，并给定传入请求。</p>
<p>默认值：<code>'rest_framework.negotiation.DefaultContentNegotiation'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_schema_class" title="DEFAULT_SCHEMA_CLASS" target="_blank" rel="noopener noreferrer">DEFAULT_SCHEMA_CLASS</a></h4>
<p>将用于 schema 生成的视图检查类。</p>
<p>默认值：<code>'rest_framework.schemas.AutoSchema'</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=generic-view-settings" title="Generic view settings" target="_blank" rel="noopener noreferrer">Generic view settings</a></h2>
<p><em>以下设置控制通用基于类的视图的行为。</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_filter_backends" title="DEFAULT_FILTER_BACKENDS" target="_blank" rel="noopener noreferrer">DEFAULT_FILTER_BACKENDS</a></h4>
<p>用于通用过滤的过滤器后端类列表。如果设置为 <code>None</code>，则禁用通用过滤。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=page_size" title="PAGE_SIZE" target="_blank" rel="noopener noreferrer">PAGE_SIZE</a></h4>
<p>用于分页的默认页面大小。如果设置为 <code>None</code>，则默认情况下禁用分页。</p>
<p>默认值：<code>None</code></p>
<h3> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=search_param" title="SEARCH_PARAM" target="_blank" rel="noopener noreferrer">SEARCH_PARAM</a></h3>
<p>查询参数的名称，可用于指定 <code>SearchFilter</code> 使用的搜索词。</p>
<p>默认值：<code>search</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=ordering_param" title="ORDERING_PARAM" target="_blank" rel="noopener noreferrer">ORDERING_PARAM</a></h4>
<p>排序参数的名称，可用于指定 <code>OrderingFilter</code> 返回结果的排序。</p>
<p>默认值：<code>ordering</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%AE%BE%E7%BD%AE" title="版本控制设置" target="_blank" rel="noopener noreferrer">版本控制设置</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=default_version" title="DEFAULT_VERSION" target="_blank" rel="noopener noreferrer">DEFAULT_VERSION</a></h4>
<p>当没有版本信息存在时，默认的 <code>request.version</code> 值。</p>
<p>默认值：<code>None</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=allowed_versions" title="ALLOWED_VERSIONS" target="_blank" rel="noopener noreferrer">ALLOWED_VERSIONS</a></h4>
<p>如果设置，则此值将限制版本控制方案可能返回的版本集合，如果提供的版本不在此集合中，则会引发错误。</p>
<p>默认值：<code>None</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=version_param" title="VERSION_PARAM" target="_blank" rel="noopener noreferrer">VERSION_PARAM</a></h4>
<p>用于版本控制参数的字符串，例如媒体类型或 URL 查询参数。</p>
<p>默认值：<code>'version'</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E8%AE%A4%E8%AF%81%E8%AE%BE%E7%BD%AE" title="认证设置" target="_blank" rel="noopener noreferrer">认证设置</a></h2>
<p><em>以下设置控制未经身份验证的请求的行为。</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=unauthenticated_user" title="UNAUTHENTICATED_USER" target="_blank" rel="noopener noreferrer">UNAUTHENTICATED_USER</a></h4>
<p>用于初始化未经身份验证的请求的 <code>request.user</code>的类。（如果要完全删除验证，可以通过从 <code>INSTALLED_APPS</code> 中除去 <code>django.contrib.auth</code>，将 <code>UNAUTHENTICATED_USER</code> 设置为 <code>None</code>。）</p>
<p>默认值： <code>django.contrib.auth.models.AnonymousUser</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=unauthenticated_token" title="UNAUTHENTICATED_TOKEN" target="_blank" rel="noopener noreferrer">UNAUTHENTICATED_TOKEN</a></h4>
<p>用于初始化未经身份验证的请求的 <code>request.auth</code> 的类。</p>
<p>默认值：<code>None</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E6%B5%8B%E8%AF%95%E8%AE%BE%E7%BD%AE" title="测试设置" target="_blank" rel="noopener noreferrer">测试设置</a></h2>
<p><em>以下设置控制 APIRequestFactory 和 APIClient 的行为</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=test_request_default_format" title="TEST_REQUEST_DEFAULT_FORMAT" target="_blank" rel="noopener noreferrer">TEST_REQUEST_DEFAULT_FORMAT</a></h4>
<p>进行测试请求时应使用的默认格式。</p>
<p>这应该与 <code>TEST_REQUEST_RENDERER_CLASSES</code> 设置中的其中一个渲染器类的格式相匹配。</p>
<p>默认值： <code>'multipart'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=test_request_renderer_classes" title="TEST_REQUEST_RENDERER_CLASSES" target="_blank" rel="noopener noreferrer">TEST_REQUEST_RENDERER_CLASSES</a></h4>
<p>构建测试请求时支持的渲染器类。</p>
<p>构建测试请求时可以使用任何这些渲染器类的格式，例如：<code>client.post('/users', {'username': 'jamie'}, format='json')</code></p>
<p>默认值：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=schema-%E7%94%9F%E6%88%90%E6%8E%A7%E5%88%B6" title="Schema 生成控制" target="_blank" rel="noopener noreferrer">Schema 生成控制</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=schema_coerce_path_pk" title="SCHEMA_COERCE_PATH_PK" target="_blank" rel="noopener noreferrer">SCHEMA_COERCE_PATH_PK</a></h4>
<p>如果设置，则在生成 schema 路径参数时，会将 URL conf 中的 <code>'pk'</code> 标识符映射到实际字段名称上。通常这将是 <code>'id'</code> 。由于 “primary key” 是实现细节，因此这提供了更适合的表示，而 “identifier” 是更一般的概念。</p>
<p>默认值：<code>True</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=schema_coerce_method_names" title="SCHEMA_COERCE_METHOD_NAMES" target="_blank" rel="noopener noreferrer">SCHEMA_COERCE_METHOD_NAMES</a></h4>
<p>如果设置，则用于将内部视图方法名称映射到 schema 生成中使用的外部操作名称。这使我们能够生成比代码库中内部使用的名称更适合外部表示的名称。</p>
<p>默认值： <code>{'retrieve': 'read', 'destroy': 'delete'}</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E5%86%85%E5%AE%B9%E7%B1%BB%E5%9E%8B%E6%8E%A7%E5%88%B6" title="内容类型控制" target="_blank" rel="noopener noreferrer">内容类型控制</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=url_format_override" title="URL_FORMAT_OVERRIDE" target="_blank" rel="noopener noreferrer">URL_FORMAT_OVERRIDE</a></h4>
<p>通过在请求 URL 中使用 <code>format=…</code> 查询参数，可用于覆盖默认内容协商 <code>Accept</code> header 行为的 URL 参数的名称。</p>
<p>例如： <code>http://example.com/organizations/?format=csv</code></p>
<p>如果此设置的值为 <code>None</code>，则 URL 格式覆盖将被禁用。</p>
<p>默认值： <code>'format'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=format_suffix_kwarg" title="FORMAT_SUFFIX_KWARG" target="_blank" rel="noopener noreferrer">FORMAT_SUFFIX_KWARG</a></h4>
<p>URL conf 中用于提供格式后缀的参数名称。使用 <code>format_suffix_patterns</code> 包含后缀 URL patterns 时应用此设置。</p>
<p>例如：<code>http://example.com/organizations.csv/</code></p>
<p>默认值：<code>'format'</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F" title="日期和时间格式" target="_blank" rel="noopener noreferrer">日期和时间格式</a></h2>
<p><em>以下设置用于控制如何分析和渲染日期和时间表示。</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=datetime_format" title="DATETIME_FORMAT" target="_blank" rel="noopener noreferrer">DATETIME_FORMAT</a></h4>
<p>格式字符串，默认情况下用于渲染 <code>DateTimeField</code> 序列化字段的输出。如果为 <code>None</code>，那么 <code>DateTimeField</code> 序列化字段将返回 Python <code>datetime</code> 对象，并且日期时间编码将由渲染器决定。</p>
<p>可以是 <code>None</code>，<code>'iso-8601'</code> 或 Python strftime 格式字符串中的任何一个。</p>
<p>默认值：<code>'iso-8601'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=datetime_input_formats" title="DATETIME_INPUT_FORMATS" target="_blank" rel="noopener noreferrer">DATETIME_INPUT_FORMATS</a></h4>
<p>默认使用的格式字符串列表，用于解析 <code>DateTimeField</code> 序列化字段的输入。</p>
<p>可以是包含字符串 <code>'iso-8601'</code> 或 Python strftime 格式字符串的列表。</p>
<p>默认值： <code>['iso-8601']</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=date_format" title="DATE_FORMAT" target="_blank" rel="noopener noreferrer">DATE_FORMAT</a></h4>
<p>格式字符串，默认情况下用于渲染 <code>DateField</code> 序列化字段的输出。如果为 <code>None</code>，那么 <code>DateField</code> 序列化字段将返回 Python <code>date</code> 对象，并且日期编码将由渲染器决定。</p>
<p>可以是 <code>None</code>，<code>'iso-8601'</code> 或 Python strftime 格式字符串中的任何一个。</p>
<p>默认值：<code>'iso-8601'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=date_input_formats" title="DATE_INPUT_FORMATS" target="_blank" rel="noopener noreferrer">DATE_INPUT_FORMATS</a></h4>
<p>默认使用的格式字符串列表，用于解析 <code>DateField</code> 序列化字段的输入。</p>
<p>可以是包含字符串 <code>'iso-8601'</code> 或 Python strftime 格式字符串的列表。</p>
<p>默认值：<code>['iso-8601']</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=time_format" title="TIME_FORMAT" target="_blank" rel="noopener noreferrer">TIME_FORMAT</a></h4>
<p>格式字符串，默认情况下用于渲染 <code>imeField</code> 序列化字段的输出。如果为 <code>None</code>，那么 <code>TimeField</code> 序列化字段将返回 Python <code>time</code> 对象，并且时间编码将由渲染器决定。</p>
<p>可以是 <code>None</code>，<code>'iso-8601'</code> 或 Python strftime 格式字符串中的任何一个。</p>
<p>默认值： <code>'iso-8601'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=time_input_formats" title="TIME_INPUT_FORMATS" target="_blank" rel="noopener noreferrer">TIME_INPUT_FORMATS</a></h4>
<p>默认使用的格式字符串列表，用于解析 <code>TimeField</code> 序列化字段的输入。</p>
<p>可以是包含字符串 <code>'iso-8601'</code> 或 Python strftime 格式字符串的列表。</p>
<p>默认值：<code>['iso-8601']</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E7%BC%96%E7%A0%81" title="编码" target="_blank" rel="noopener noreferrer">编码</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=unicode_json" title="UNICODE_JSON" target="_blank" rel="noopener noreferrer">UNICODE_JSON</a></h4>
<p>设置为 <code>True</code> 时，JSON 响应将允许 unicode 字符作为响应。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当设置为 <code>False</code> 时，JSON 响应将转义非ascii字符，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两种样式都符合 RFC 4627，并且在语法上都是有效 JSON。在检查 API 响应时，unicode 样式更受用户欢迎。</p>
<p>默认值： <code>True</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=compact_json" title="COMPACT_JSON" target="_blank" rel="noopener noreferrer">COMPACT_JSON</a></h4>
<p>当设置为 <code>True</code> 时，JSON 响应将返回紧凑表示，<code>':'</code> 和 <code>','</code> 字符之后没有间隔。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当设置为 <code>False</code> 时，JSON 响应将返回稍微更冗长的表示，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认样式是返回缩小的响应，符合 Heroku 的 API 设计准则。</p>
<p>默认值： <code>True</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=strict_json" title="STRICT_JSON" target="_blank" rel="noopener noreferrer">STRICT_JSON</a></h4>
<p>当设置为 <code>True</code> 时，JSON 渲染和解析只会遵循语法上有效的 JSON，而 Python 的 <code>json</code> 模块接受的扩展浮点值（<code>nan</code>，<code>inf</code>，<code>-inf</code>）会引发异常。这是推荐的设置，因为通常不支持这些值。例如，Javascript 的 <code>JSON.Parse</code> 和 PostgreSQL 的 JSON 数据类型都不接受这些值。</p>
<p>当设置为 <code>False</code> 时，JSON 的渲染和解析将是宽松的。但是，这些值仍然无效，需要在代码中专门处理。</p>
<p>默认值：<code>True</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=coerce_decimal_to_string" title="COERCE_DECIMAL_TO_STRING" target="_blank" rel="noopener noreferrer">COERCE_DECIMAL_TO_STRING</a></h4>
<p>在不支持原生十进制类型的 API 表示形式中返回小数对象时，通常最好将该值作为字符串返回。这样可以避免二进制浮点实现所带来的精度损失。</p>
<p>设置为 <code>True</code> 时，序列化 <code>DecimalField</code> 类将返回字符串而不是 <code>Decimal</code> 对象。设置为 <code>False</code> 时，序列化将返回 <code>Decimal</code> 对象，默认 JSON 编码器将作为浮点数返回。</p>
<p>默认值： <code>True</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=view-names-and-descriptions" title="View names and descriptions" target="_blank" rel="noopener noreferrer">View names and descriptions</a></h2>
<p><em>以下设置用于生成视图名称和描述，如 <strong><code>OPTIONS</code></strong> 请求的响应中所使用的，以及可浏览 API 中使用的设置。</em></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=view_name_function" title="VIEW_NAME_FUNCTION" target="_blank" rel="noopener noreferrer">VIEW_NAME_FUNCTION</a></h4>
<p>表示生成视图名称时应使用的函数的字符串。</p>
<p>这应该是一个具有以下签名的函数：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>cls</code>: 视图类。通常，名称函数会在生成描述性名称时通过访问 <code>cls .__ name__</code> 来检查类的名称。</li>
<li><code>suffix</code>: 区分视图中各个视图时使用的可选后缀。</li>
</ul>
<p>默认值：<code>'rest_framework.views.get_view_name'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=view_description_function" title="VIEW_DESCRIPTION_FUNCTION" target="_blank" rel="noopener noreferrer">VIEW_DESCRIPTION_FUNCTION</a></h4>
<p>表示生成视图描述时应使用的函数的字符串。</p>
<p>此设置可以更改为支持除默认 markdown 以外的标记样式。例如，你可以使用它支持在可浏览的 API 中输出的视图文档字符串中的 <code>rst</code> 标记。</p>
<p>这应该是一个具有以下签名的函数：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>cls</code>: 视图类。通常，description 函数会在生成描述时检查类的文档字符串，方法是访问 <code>cls .__ doc__</code></li>
<li><code>html</code>: 指示是否需要 HTML 输出的布尔值。在可浏览的 API 中使用时为 <code>true</code>，在生成 <code>OPTIONS</code> 响应时使用 <code>False</code>。</li>
</ul>
<p>默认值： <code>'rest_framework.views.get_view_description'</code></p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=html-select-%E5%AD%97%E6%AE%B5%E6%88%AA%E5%8F%96" title="HTML Select 字段截取" target="_blank" rel="noopener noreferrer">HTML Select 字段截取</a></h2>
<p>用于在可浏览 API 中渲染关系字段的 select 字段截取的全局设置。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=html_select_cutoff" title="HTML_SELECT_CUTOFF" target="_blank" rel="noopener noreferrer">HTML_SELECT_CUTOFF</a></h4>
<p><code>html_cutoff</code> 值的全局设置。必须是整数。</p>
<p>默认值： 1000</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=html_select_cutoff_text" title="HTML_SELECT_CUTOFF_TEXT" target="_blank" rel="noopener noreferrer">HTML_SELECT_CUTOFF_TEXT</a></h4>
<p>代表 <code>html_cutoff_text</code> 全局设置的字符串。</p>
<p>默认值： <code>"More than {count} items..."</code></p>
<hr>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=%E6%9D%82%E9%A1%B9%E8%AE%BE%E7%BD%AE" title="杂项设置" target="_blank" rel="noopener noreferrer">杂项设置</a></h2>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=exception_handler" title="EXCEPTION_HANDLER" target="_blank" rel="noopener noreferrer">EXCEPTION_HANDLER</a></h4>
<p>一个字符串，表示在返回任何给定异常的响应时应使用的函数。如果该函数返回 <code>None</code>，则会引发 500 错误。</p>
<p>此设置可以更改为支持默认 <code>{"detail": "Failure..."}</code> 响应以外的错误响应。例如，你可以使用它来提供 API 响应，如 <code>{"errors": [{"message": "Failure...", "code": ""} ...]}</code>.</p>
<p>这应该是一个具有以下签名的函数：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>exc</code>: 异常。</li>
</ul>
<p>默认值： <code>'rest_framework.views.exception_handler'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=non_field_errors_key" title="NON_FIELD_ERRORS_KEY" target="_blank" rel="noopener noreferrer">NON_FIELD_ERRORS_KEY</a></h4>
<p>表示应该用于序列化错误的关键字的字符串，该字符串不引用特定字段，而代表一般错误。</p>
<p>默认值：<code>'non_field_errors'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=url_field_name" title="URL_FIELD_NAME" target="_blank" rel="noopener noreferrer">URL_FIELD_NAME</a></h4>
<p>一个字符串，表示用于由 <code>HyperlinkedModelSerializer</code> 生成的 URL 字段的键</p>
<p>默认值： <code>'url'</code></p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/32ce72e8-bf1a-4f1b-9b5e-71f991930e61/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_32ce72e8-bf1a-4f1b-9b5e-71f991930e61#/drf/settings?id=num_proxies" title="NUM_PROXIES" target="_blank" rel="noopener noreferrer">NUM_PROXIES</a></h4>
<p>一个 0 或更大的整数，可用于指定 API 在后台运行的应用程序代理的数量。这允许限流器更准确地识别客户端 IP 地址。如果设置为 <code>None</code>，那么限流器将使用宽松的 IP 匹配方式。</p>
<p>默认值：<code>None</code></p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(二十四): 版本控制</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E5%9B%9B)-%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%8C%E5%8D%81%E5%9B%9B)-%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(二十四): 版本控制</source>
      <description>目录 版本控制 (#版本控制); 使用 REST framework 进行版本控制 (#使用-REST-framework-进行版本控制); 基于版本的变化行为 (#基于版本的变化行为); 反向解析版本化 API 的 URL (#反向解析版本化-API-的-URL); 版本化的 API 和超链接序列化类 (#版本化的-API-和超链接序列化类); 配置...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(二十四): 版本控制</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">版本控制</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-REST-framework-%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">使用 REST framework 进行版本控制</a>
<ul>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%98%E5%8C%96%E8%A1%8C%E4%B8%BA">基于版本的变化行为</a></li>
<li><a href="#%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90%E7%89%88%E6%9C%AC%E5%8C%96-API-%E7%9A%84-URL">反向解析版本化 API 的 URL</a></li>
<li><a href="#%E7%89%88%E6%9C%AC%E5%8C%96%E7%9A%84-API-%E5%92%8C%E8%B6%85%E9%93%BE%E6%8E%A5%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB">版本化的 API 和超链接序列化类</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AE%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%B9%E6%A1%88">配置版本控制方案</a>
<ul>
<li><a href="#%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E8%AE%BE%E7%BD%AE">其他版本设置</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#AcceptHeaderVersioning">AcceptHeaderVersioning</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-accept-header-%E5%92%8C-vendor-media-type">使用 accept header 和 vendor media type</a></li>
</ul>
</li>
<li><a href="#URLPathVersioning">URLPathVersioning</a></li>
<li><a href="#NamespaceVersioning">NamespaceVersioning</a></li>
<li><a href="#HostNameVersioning">HostNameVersioning</a></li>
<li><a href="#QueryParameterVersioning">QueryParameterVersioning</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%B9%E6%A1%88">自定义版本控制方案</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/versioning/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" title="版本控制" target="_blank" rel="noopener noreferrer">版本控制</a></h1>
<p>API 版本控制允许你更改不同客户端之间的行为。 REST framework 提供了许多不同的版本控制方案。</p>
<p>版本控制由传入的客户端请求决定，可能基于请求 URL 或请求 header。</p>
<p>有几种有效的方法来处理版本控制。非版本化的系统也可能是合适的，特别是如果你正在为超出控制范围的多个客户端的非常长期的系统进行工程设计。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E4%BD%BF%E7%94%A8-rest-framework-%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" title="使用 REST framework 进行版本控制" target="_blank" rel="noopener noreferrer">使用 REST framework 进行版本控制</a></h2>
<p>当启用 API 版本控制时， <code>request.version</code> 属性将包含一个对应于传入客户端请求的版本的字符串。</p>
<p>默认情况下，版本控制未启用，<code>request.version</code> 将始终返回 <code>None</code>。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E5%9F%BA%E4%BA%8E%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%98%E5%8C%96%E8%A1%8C%E4%B8%BA" title="基于版本的变化行为" target="_blank" rel="noopener noreferrer">基于版本的变化行为</a></h4>
<p>如何改变 API 的行为取决于你，但你可能通常需要的一个示例是在新版本中切换到不同的序列化样式。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90%E7%89%88%E6%9C%AC%E5%8C%96-api-%E7%9A%84-url" title="反向解析版本化 API 的 URL" target="_blank" rel="noopener noreferrer">反向解析版本化 API 的 URL</a></h4>
<p>REST framework 包含的 <code>reverse</code> 函数与版本控制方案相关联。你需要确保将当前请求包含为关键字参数，如下所示。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述功能将应用适合请求版本的任何 URL 转换。例如：</p>
<ul>
<li>如果正在使用 <code>NamespacedVersioning</code>，并且 API 版本为 'v1'，则使用的 URL lookup 将为 <code>'v1:bookings-list'</code>，可能会解析为像 <code>http://example.org/v1/bookings/</code> 这样的 URL。</li>
<li>如果正在使用 <code>QueryParameterVersioning</code>，并且 API 版本为 <code>1.0</code>，则返回的 URL 可能与 <code>http://example.org/bookings/?version=1.0</code> 类似</li>
</ul>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E7%89%88%E6%9C%AC%E5%8C%96%E7%9A%84-api-%E5%92%8C%E8%B6%85%E9%93%BE%E6%8E%A5%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB" title="版本化的 API 和超链接序列化类" target="_blank" rel="noopener noreferrer">版本化的 API 和超链接序列化类</a></h4>
<p>将超链接序列化样式与基于 URL 的版本控制方案一起使用时，请确保将请求作为上下文包含在序列化类中。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做将允许任何返回的 URL 包含合适的版本。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E9%85%8D%E7%BD%AE%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%B9%E6%A1%88" title="配置版本控制方案" target="_blank" rel="noopener noreferrer">配置版本控制方案</a></h2>
<p>版本控制方案由 <code>DEFAULT_VERSIONING_CLASS</code> setting key 定义。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除非明确设置，否则 <code>DEFAULT_VERSIONING_CLASS</code> 的值将为 <code>None</code>。在这种情况下，<code>request.version</code> 属性将始终返回 <code>None</code>。</p>
<p>你还可以在单个视图上设置版本控制方案。通常，您不需要这样做，因为全局使用单个版本控制方案更有意义。如果你确实需要这样做，请使用 <code>versioning_class</code> 属性。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E8%AE%BE%E7%BD%AE" title="其他版本设置" target="_blank" rel="noopener noreferrer">其他版本设置</a></h4>
<p>以下 settings key 也用于控制版本控制：</p>
<ul>
<li><code>DEFAULT_VERSION</code>. 当没有版本信息存在时，用于 <code>request.version</code> 的值。默认为 <code>None</code>。</li>
<li><code>ALLOWED_VERSIONS</code>. 如果设置，则此值将限制版本控制方案可能返回的版本集，如果提供的版本不在此集中，则会引发错误。请注意，用于 <code>DEFAULT_VERSION</code> 设置的值始终被认为是 <code>ALLOWED_VERSIONS</code> 集的一部分（除非它是 <code>None</code>）。默认为 <code>None</code>。</li>
<li><code>VERSION_PARAM</code>. 应该用于任何版本控制参数的字符串，例如媒体类型或 URL 查询参数。默认为 <code>'version'</code>。</li>
</ul>
<p>你还可以通过定义自己的版本控制方案并使用 <code>default_version</code>，<code>allowed_versions</code> 和 <code>version_param</code> 类变量，在每个视图或每个视图集的基础上设置版本控制类以及这三个值。例如，如果你想使用 <code>URLPathVersioning</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=acceptheaderversioning" title="AcceptHeaderVersioning" target="_blank" rel="noopener noreferrer">AcceptHeaderVersioning</a></h2>
<p>此方案要求客户端将版本指定为 <code>Accept</code> header 中媒体类型的一部分。该版本作为媒体类型参数包含在内，它补充了主要媒体类型。</p>
<p>这是一个使用 accept header 版本风格的示例 HTTP 请求。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例请求中 <code>request.version</code> 属性将返回字符串 <code>'1.0'</code>。</p>
<p>基于 Accept header 的版本控制通常被认为是最佳实践，尽管其他样式可能更适合你的客户端需求。</p>
<h4> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E4%BD%BF%E7%94%A8-accept-header-%E5%92%8C-vendor-media-type" title="使用 accept header 和 vendor media type" target="_blank" rel="noopener noreferrer">使用 accept header 和 vendor media type</a></h4>
<p>严格地说，<code>json</code> media type 不能被指定为包含附加参数。如果你正在构建精心指定的公共 API，则可以考虑使用vendor media type。为此，请将你的渲染器配置为使用基于 JSON 的渲染器和自定义 media type：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端请求现在看起来像这样：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=urlpathversioning" title="URLPathVersioning" target="_blank" rel="noopener noreferrer">URLPathVersioning</a></h2>
<p>该方案要求客户端将版本指定为 URL 路径的一部分。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你的 URL conf 必须包含一个与 <code>'version'</code> 关键字参数相匹配的模式，以便版本控制方案可以使用此信息。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=namespaceversioning" title="NamespaceVersioning" target="_blank" rel="noopener noreferrer">NamespaceVersioning</a></h2>
<p>对于客户端来说，这个方案与 <code>URLPathVersioning</code> 相同。唯一的区别是，它是如何在 Django 应用程序中配置的，因为它使用 URL 命名空间而不是 URL 关键字参数。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用此方案，<code>request.version</code> 属性是根据与传入请求路径匹配的 <code>namespace</code> 确定的。</p>
<p>在下面的例子中，我们给出了一组视图两个不同的可能的 URL 前缀，每个前缀在不同的命名空间下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你只需要简单的版本控制方案，那么 <code>URLPathVersioning</code> 和 <code>NamespaceVersioning</code> 都是可以的。 <code>URLPathVersioning</code>方法可能更适合于小型项目，<code>NamespaceVersioning</code> 可能更容易管理大型项目。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=hostnameversioning" title="HostNameVersioning" target="_blank" rel="noopener noreferrer">HostNameVersioning</a></h2>
<p>hostname 版本控制方案要求客户端将请求的版本指定为 URL 中 hostname 的一部分。</p>
<p>例如，以下是对 <code>http://v1.example.com/bookings/</code> URL 的 HTTP 请求：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，这个实现期望 hostname 匹配这个简单的正则表达式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，第一组用括号括起来，表示这是 hostname 的匹配部分。</p>
<p><code>HostNameVersioning</code> 方案在调试模式下可能会很笨拙，因为你通常会访问诸如 <code>127.0.0.1</code> 的原始 IP 地址。</p>
<p>如果你有要求根据版本将传入请求路由到不同的服务器，那么基于 hostname 的版本控制就会特别有用，因为你可以为不同的 API 版本配置不同的 DNS 记录。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=queryparameterversioning" title="QueryParameterVersioning" target="_blank" rel="noopener noreferrer">QueryParameterVersioning</a></h2>
<p>该方案是一种简单的风格，其中包含版本作为 URL 中的查询参数。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h1> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%B9%E6%A1%88" title="自定义版本控制方案" target="_blank" rel="noopener noreferrer">自定义版本控制方案</a></h1>
<p>要实现自定义版本控制方案，请继承 <code>BaseVersioning</code>并覆盖 <code>.determine_version</code> 方法。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/f77c1f67-5d8b-46d6-bc82-1c5085ea7482/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_f77c1f67-5d8b-46d6-bc82-1c5085ea7482#/drf/versioning?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>以下示例使用自定义的 <code>X-API-Version</code> header 来确定所请求的版本。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的版本控制方案基于请求 URL，则还需要更改版本化 URL 的确定方式。为了做到这一点，你应该重写类的 <code>.reverse()</code>方法。有关示例，请参阅源代码。</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(五)：Request</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%94)%EF%BC%9ARequest.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E4%BA%94)%EF%BC%9ARequest.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(五)：Request</source>
      <description>目录 点击跳转到 Rest-Framework 专栏目录 (#点击跳转到-Rest-Framework-专栏目录); Request 解析 (#Request-解析); .data (#data); .query\_params (#query_params); .parsers (#parsers); 内容协商 (#内容协商); .accepted\...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(五)：Request</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li>
<li><a href="#Request-%E8%A7%A3%E6%9E%90">Request 解析</a>
<ul>
<li><a href="#data">.data</a></li>
<li><a href="#query_params">.query_params</a></li>
<li><a href="#parsers">.parsers</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">内容协商</a>
<ul>
<li><a href="#accepted_renderer">.accepted_renderer</a></li>
<li><a href="#accepted_media_type">.accepted_media_type</a></li>
</ul>
</li>
<li><a href="#%E8%AE%A4%E8%AF%81Authentication">认证（Authentication）</a>
<ul>
<li><a href="#user">.user</a></li>
<li><a href="#auth">.auth</a></li>
<li><a href="#authenticators">.authenticators</a></li>
</ul>
</li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A2%9E%E5%BC%BA">浏览器增强</a>
<ul>
<li><a href="#method">.method</a></li>
<li><a href="#content_type">.content_type</a></li>
<li><a href="#stream">.stream</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E5%87%86%E7%9A%84-HttpRequest-%E5%B1%9E%E6%80%A7">标准的 HttpRequest 属性</a></li>
</ul>
<hr>
<h4> <a href="https://juejin.cn/post/6844904185163415566" title="点击跳转到 Rest-Framework 专栏目录" target="_blank" rel="noopener noreferrer">点击跳转到 Rest-Framework 专栏目录</a></h4>
<p><a href="http://www.django-rest-framework.org/api-guide/requests/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
<p>框架的 <code>request</code> 给予了很标准的属性, 并拓展了标准 <code>HTTPRequest</code> 对象, 比如更加灵活的请求解析<code>（request parsing）</code>和认证<code>（request authentication）</code>，你会在开发中很方便的使用它。</p>
<blockquote>
<p>🐍如果你正在开发基于 REST 的 web API 服务...... 应该忽略 request.POST。 — <em>Malcom Tredinnick，Django 开发组</em></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/requests?id=request-%E8%A7%A3%E6%9E%90" title="Request 解析" target="_blank" rel="noopener noreferrer">Request 解析</a></h2>
<p>REST framwork 的 <code>Request</code> 对象提供了灵活的请求解析，允许你使用 <code>JSON data </code>或 <code>其他 media types </code>像通常处理表单数据一样处理请求。</p>
<h3> .data</h3>
<p>在 <code>request.data</code> 中你可以很方便的获取客户端传递给你的 json 数据或者表单提交, 不需要像 <code>request.POST.get()</code> 一样很麻烦的操作, 并且能解析文件传输，这跟标准的 <code>request.POST</code> 和 <code>request.FILES</code> 类似，并且还具有以下特点：</p>
<ul>
<li>包括所有解析的内容，文件（file） 和 非文件（non-file inputs）。</li>
<li>支持解析 <code>POST</code> 以外的 HTTP method ， 比如 <code>PUT</code>， <code>PATCH</code>。</li>
<li>更加灵活，不仅仅支持表单数据，传入同样的 JSON 数据一样可以正确解析，并且不用做额外的处理（意思是前端不管提交的是表单数据，还是 JSON 数据，<code>.data</code> 都能够正确解析）。</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> .query_params</h3>
<p>在 <code>GET</code> 请求中, <code>query_params</code> 的命名方式才更加凸显传参的方式, 当然, <code>request.query_params.get('params')</code> 和 <code>request.GET.get('params')</code> 是等价的。</p>
<p><code>为了代码更加清晰可读</code>，推荐使用 <code>request.query_params</code> ，而不是 Django 中的 <code>request.GET</code>，这样那够让你的代码更加明显的体现出 ----- 任何 HTTP method 类型都可能包含查询参数（query parameters），而不仅仅只是 'GET' 请求。</p>
<h3> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=parsers" title=".parsers" target="_blank" rel="noopener noreferrer">.parsers</a></h3>
<p><code>APIView</code> 类或者 <code>@api_view</code> 装饰器将根据视图上设置的 <code>parser_classes</code> 或 <code>settings</code> 文件中的 <code>DEFAULT_PARSER_CLASSES</code> 设置来确保此属性（<code>.parsers</code>）自动设置为 <code>Parser</code> 实例列表。</p>
<p><strong>通常不需要关注该属性......</strong></p>
<p>如果你非要看看它里面是什么，可以打印出来看看，大概长这样：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>恩，包含三个解析器 <code>JSONParser</code>，<code>FormParser</code>，<code>MultiPartParser</code>。</p>
<blockquote>
<p>注意： 如果客户端发送格式错误的内容，则访问 <code>request.data</code> 可能会引发 <code>ParseError</code> 。默认情况下， REST framework 的 <code>APIView</code> 类或者 <code>@api_view</code> 装饰器将捕获错误并返回 <code>400 Bad Request</code> 响应。 如果客户端发送的请求内容无法解析（不同于格式错误），则会引发 <code>UnsupportedMediaType</code> 异常，默认情况下会被捕获并返回 <code>415 Unsupported Media Type</code> 响应。</p>
</blockquote>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86" title="内容协商" target="_blank" rel="noopener noreferrer">内容协商</a></h2>
<p>该请求公开了一些属性，允许你确定内容协商阶段的结果。这使你可以实施一些行为，例如为不同媒体类型选择不同的序列化方案。</p>
<h3> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=accepted_renderer" title=".accepted_renderer" target="_blank" rel="noopener noreferrer">.accepted_renderer</a></h3>
<p>渲染器实例是由内容协商阶段选择的。</p>
<h3> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=accepted_media_type" title=".accepted_media_type" target="_blank" rel="noopener noreferrer">.accepted_media_type</a></h3>
<p>表示内容协商阶段接受的 media type 的字符串。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/requests?id=%E8%AE%A4%E8%AF%81%EF%BC%88authentication%EF%BC%89" title="认证（Authentication）" target="_blank" rel="noopener noreferrer">认证（Authentication）</a></h2>
<p>REST framework 提供了灵活的认证方式：</p>
<ul>
<li>可以在 API 的不同部分使用不同的认证策略。</li>
<li>支持同时使用多个身份验证策略。</li>
<li>提供与传入请求关联的用户（user）和令牌（token）信息。</li>
</ul>
<h3> .user</h3>
<p><code>request.user</code> 通常会返回 <code>django.contrib.auth.models.User</code> 的一个实例，但其行为取决于正在使用的身份验证策略。</p>
<p>在你已认证的情况下, 访问该属性得到的是你用户模型的一个实例对象, 你可以通过 <code>request.user.id</code> 的方式获取用户 ID 属性, 但在未验证, 或者未通过验证的情况下该属性返回的是 <code>django.contrib.auth.models.AnonymousUser</code> 的一个实例对象。</p>
<h3> .auth</h3>
<p><code>request.auth</code> 返回任何附加的认证上下文（authentication context）。<code>request.auth</code> 的确切行为取决于正在使用的身份验证策略，但它通常可能是请求经过身份验证的令牌（token）实例。</p>
<p>如果请求未经身份验证，或者没有附加上下文（context），则 <code>request.auth</code> 的默认值为 <code>None</code>。</p>
<h3> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=authenticators" title=".authenticators" target="_blank" rel="noopener noreferrer">.authenticators</a></h3>
<p><code>APIView</code> 类或 <code>@api_view</code> 装饰器将确保根据视图上设置的 <code>authentication_classes</code> 或基于 <code>settings</code> 文件中的 <code>DEFAULT_AUTHENTICATORS</code> 设置将此属性（<code>.authenticators</code>）自动设置为 <code>Authentication</code> 实例列表。</p>
<p>**通常不需要关注该属性...... **</p>
<blockquote>
<p>注意：调用 <code>.user</code> 或 <code>.auth</code> 属性时可能会引发 <code>WrappedAttributeError</code> 异常。这些错误源于 authenticator 作为一个标准的 <code>AttributeError</code> ，为了防止它们被外部属性访问修改，有必要重新提升为不同的异常类型。Python 无法识别来自 authenticator 的 <code>AttributeError</code>，并会立即假定请求对象没有 <code>.user</code> 或 <code>.auth</code> 属性。authenticator 需要修复。</p>
</blockquote>
<p>多说几句</p>
<p><code>.authenticators</code> 其实存的就是当前使用的认证器（authenticator）列表，打印出来大概是这样：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到这里使用的认证器（authenticator）包括 <code>SessionAuthentication</code> 和 <code>BasicAuthentication</code>。</p>
<h2> <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/88812cbe-312e-4398-be81-6b799c703363/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_88812cbe-312e-4398-be81-6b799c703363#/drf/requests?id=%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A2%9E%E5%BC%BA" title="浏览器增强" target="_blank" rel="noopener noreferrer">浏览器增强</a></h2>
<p>REST framework 支持基于浏览器的 <code>PUT</code>，<code>PATCH</code>，<code>DELETE</code> 表单。</p>
<h3> .method</h3>
<p>该属性能返回请求方式的大写字符串, 如 <code>GET</code>。</p>
<p><code>request.method</code> 返回请求 HTTP 方法的大写字符串表示形式。如 <code>GET</code>,<code>POST</code>...。</p>
<p>透明地支持基于浏览器的 <code>PUT</code>，<code>PATCH</code> 和 <code>DELETE</code> 表单。</p>
<p>在请求中, 如果不需要重写框架的方法, 或者实现自定义返回数据、校验等, 这些属性一般是不会被使用到的。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/requests?id=content_type" title=".content_type" target="_blank" rel="noopener noreferrer">.content_type</a></h3>
<p><code>request.content_type</code> 返回表示 HTTP 请求正文的媒体类型（media type）的字符串对象（比如： <code>text/plain</code> , <code>text/html</code> 等），如果没有提供媒体类型，则返回空字符串。</p>
<p>通常不需要直接访问此属性，一般都依赖与 REST 框架的默认请求解析行为。</p>
<p>不建议使用 <code>request.META.get('HTTP_CONTENT_TYPE')</code> 来获取 content type 。</p>
<p><em>更多相关信息以后再说～</em></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/requests?id=stream" title=".stream" target="_blank" rel="noopener noreferrer">.stream</a></h3>
<p><code>request.stream</code> 返回一个代表请求主体内容的流。</p>
<p>通常不需要直接访问此属性，一般都依赖与 REST 框架的默认请求解析行为。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/requests?id=%E6%A0%87%E5%87%86%E7%9A%84-httprequest-%E5%B1%9E%E6%80%A7" title="标准的 HttpRequest 属性" target="_blank" rel="noopener noreferrer">标准的 HttpRequest 属性</a></h2>
<p>由于 REST framework 的 <code>Request</code> 扩展于 Django 的 <code>HttpRequest</code>，所有其他标准属性和方法也可用。例如<code>request.META</code> 和 <code>request.session</code> 字典都可以正常使用。</p>
<p>请注意，由于实现原因，<code>Request</code> 类不会从 <code>HttpRequest</code> 类继承，而是使用组合扩展类（优先使用组合，而非继承，恩，老铁没毛病 0.0）</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(八)：ViewSet</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%85%AB)%EF%BC%9AViewSet.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%85%AB)%EF%BC%9AViewSet.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(八)：ViewSet</source>
      <description>目录 点击跳转到 Rest-Framework 专栏目录 (#点击跳转到-Rest-Framework-专栏目录); 视图集 (#视图集); 举个栗子 (#举个栗子); 操作视图集 (#操作视图集); 标记额外的路由行为 (#标记额外的路由行为); action 跳转 (#action-跳转); API 参考 (#API-参考); ViewSet (#...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(八)：ViewSet</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li>
<li><a href="#%E8%A7%86%E5%9B%BE%E9%9B%86">视图集</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E6%93%8D%E4%BD%9C%E8%A7%86%E5%9B%BE%E9%9B%86">操作视图集</a></li>
<li><a href="#%E6%A0%87%E8%AE%B0%E9%A2%9D%E5%A4%96%E7%9A%84%E8%B7%AF%E7%94%B1%E8%A1%8C%E4%B8%BA">标记额外的路由行为</a></li>
<li><a href="#action-%E8%B7%B3%E8%BD%AC">action 跳转</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#ViewSet-">ViewSet </a></li>
<li><a href="#GenericViewSet">GenericViewSet</a></li>
<li><a href="#ModelViewSet">ModelViewSet</a></li>
<li><a href="#ReadOnlyModelViewSet">ReadOnlyModelViewSet</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E9%9B%86%E5%9F%BA%E7%B1%BB">自定义视图集基类</a></li>
</ul>
<hr>
<h4> <a href="https://juejin.cn/post/6844904185163415566" title="点击跳转到 Rest-Framework 专栏目录" target="_blank" rel="noopener noreferrer">点击跳转到 Rest-Framework 专栏目录</a></h4>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/viewsets/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=%E8%A7%86%E5%9B%BE%E9%9B%86" title="视图集" target="_blank" rel="noopener noreferrer">视图集</a></h2>
<blockquote>
<p>在路由决定了哪个控制器用于请求后，控制器负责理解请求并产生适当的输出。— <em>Ruby on Rails 文档</em></p>
</blockquote>
<p>Django REST framework 允许将一组相关视图的逻辑组合到一个称为 <code>ViewSet</code> 的类中。在其他框架中，您可能会发现概念上类似的实现，名为 “Resources” 或 “Controllers” 。</p>
<p><code>ViewSet</code> 类只是一种基于类的 View，它不提供任何处理方法，如 <code>.get()</code> 或 <code>.post()</code>，而是提供诸如 <code>.list()</code> 和 <code>.create()</code> 之类的操作。</p>
<p><code>ViewSet</code> 只在用 <code>.as_view()</code> 方法绑定到最终化视图时做一些相应操作。</p>
<p>通常，不是在 urlconf 中的视图集中明确注册视图，而是使用路由器类注册视图集，这会自动为您确定 urlconf。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h3>
<p>定义一个简单的视图集，可以用来列出或检索系统中的所有用户。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要，可以将这个视图集合成两个单独的视图，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情况下，我们不会这样做，而是用路由器注册视图集，并允许自动生成 urlconf。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不用自己编写视图集，通常使用默认提供的现有基类。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ViewSet</code> 类比使用 View 类有两个主要优点。</p>
<ul>
<li><code>重复的逻辑可以合并成一个类</code>。在上面的例子中，我们只需要指定一次查询集，它将在多个视图中使用。</li>
<li>通过<code>使用 routers</code>，我们不再需要处理自己的 URL 配置。</li>
</ul>
<p>这两者各有优缺点。使用常规视图和 URL 配置文件更加明确，并为您提供更多控制。如果想要更快速的开发出一个应用，或者需要使大型 API 的 URL 配置始终保持一致，视图集会非常有用。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=%E6%93%8D%E4%BD%9C%E8%A7%86%E5%9B%BE%E9%9B%86" title="操作视图集" target="_blank" rel="noopener noreferrer">操作视图集</a></h3>
<p>REST framework 中包含的默认 routes 将为一组标准的 create / retrieve / update / destroy 风格 action 提供路由，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调度期间，当前 action 的名称可以通过 <code>.action</code> 属性获得。您可以检查 <code>.action</code> 以根据当前 action 调整行为。</p>
<p>例如，您可以将权限限制为只有 admin 才能访问 <code>list</code> 以外的其他 action，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=%E6%A0%87%E8%AE%B0%E9%A2%9D%E5%A4%96%E7%9A%84%E8%B7%AF%E7%94%B1%E8%A1%8C%E4%B8%BA" title="标记额外的路由行为" target="_blank" rel="noopener noreferrer">标记额外的路由行为</a></h3>
<p>如果需要路由特定方法，则可以用 <code>@detail_route</code> 或 <code>@list_route</code> 装饰器进行修饰。</p>
<p><code>@detail_route</code> 装饰器在其 URL 模式中包含 <code>pk</code>，用于支持需要获取单个实例的方法。<code>@list_route</code> 修饰器适用于在对象列表上操作的方法。</p>
<p>举个栗子：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，装饰器可以为路由视图设置额外的参数。例如...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些装饰器默认路由 <code>GET</code> 请求，但也可以使用 <code>methods</code> 参数接受其他 HTTP 方法。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个新操作将在 urls <code>^users/{pk}/set_password/$</code> 和 <code>^users/{pk}/unset_password/$</code> 上。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=action-%E8%B7%B3%E8%BD%AC" title="action 跳转" target="_blank" rel="noopener noreferrer">action 跳转</a></h3>
<p>如果你需要获取 action 的 URL ，请使用 <code>.reverse_action()</code> 方法。这是 <code>.reverse()</code> 的一个便捷包装，它会自动传递视图的请求对象，并将 <code>url_name</code> 与 <code>.basename</code> 属性挂接。</p>
<p>请注意，<code>basename</code> 是在 <code>ViewSet</code> 注册过程中由路由器提供的。如果您不使用路由器，则必须提供<code>.as_view()</code> 方法的 <code>basename</code> 参数。</p>
<p>使用上一节中的示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>url_name</code> 参数应该与 <code>@list_route</code> 和 <code>@detail_route</code> 装饰器的相同参数匹配。另外，这可以用来反转默认 <code>list</code> 和 <code>detail</code> 路由。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h2>
<h3> ViewSet </h3>
<p><code>ViewSet</code> 类继承自 <code>APIView</code>。您可以使用任何标准属性（如 <code>permission_classes</code>，<code>authentication_classes</code>）来控制视图上的 API 策略。</p>
<p><code>ViewSet</code> 类不提供任何 action 的实现。为了使用 <code>ViewSet</code> 类，必须继承该类并明确定义 action 实现。</p>
<p>在标准的接口中, 提供了标准的创建/检索/更新/删除实例对象的路由, 如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在分发期间你可以使用以下属性：</p>
<ul>
<li><code>basename</code>：用于创建 URL 的基础名称</li>
<li><code>action</code>：当前操作的动作名称字符串(如 <code>list</code>)</li>
<li><code>detail</code>：是否返回列表/详情信息的布尔值</li>
<li><code>suffix</code>：视图集类型的显示后缀</li>
<li><code>name</code>：视图集的显示名称, 会与 <code>suffix</code> 参数互斥</li>
<li><code>description</code>：单个试图的显示描述</li>
</ul>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=genericviewset" title="GenericViewSet" target="_blank" rel="noopener noreferrer">GenericViewSet</a></h3>
<p><code>GenericViewSet</code> 类继承自 <code>GenericAPIView</code>，并提供默认的 <code>get_object</code>，<code>get_queryset</code> 方法和其他通用视图基础行为，但默认情况下不包含任何操作。</p>
<p>为了使用 <code>GenericViewSet</code> 类，必须继承该类并混合所需的 mixin 类，或明确定义操作实现。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=modelviewset" title="ModelViewSet" target="_blank" rel="noopener noreferrer">ModelViewSet</a></h3>
<p><code>ModelViewSet</code> 类继承自 <code>GenericAPIView</code>，并通过混合各种 mixin 类的行为来包含各种操作的实现。</p>
<p><code>ModelViewSet</code> 提供的操作有 <code>.list()</code> , <code>.retrieve()</code> , <code>.create()</code> , <code>.update()</code> , <code>.partial_update()</code>, 和 <code>.destroy()</code> 。</p>
<p>举个栗子：</p>
<p>由于 <code>ModelViewSet</code> 类继承自 <code>GenericAPIView</code>，因此通常需要提供至少 <code>queryset</code> 和 <code>serializer_class</code> 属性。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，您可以覆盖 <code>GenericAPIView</code> 提供的任何标准属性或方法。例如，要动态确定它应该操作的查询集的<code>ViewSet</code>，可以这样做：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但请注意，从 <code>ViewSet</code> 中删除 <code>queryset</code> 属性后，任何关联的 router 将无法自动导出模型的 <code>base_name</code>，因此您必须将 <code>base_name</code> kwarg 指定为 router 注册的一部分。</p>
<p>还要注意，虽然这个类默认提供了完整的 create / list / retrieve / update / destroy 操作集，但您可以通过使用标准权限类来限制可用操作。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=readonlymodelviewset" title="ReadOnlyModelViewSet" target="_blank" rel="noopener noreferrer">ReadOnlyModelViewSet</a></h3>
<p><code>ReadOnlyModelViewSet</code> 类也从 <code>GenericAPIView</code> 继承。与 <code>ModelViewSet</code> 一样，它也包含各种操作的实现，但与 <code>ModelViewSet</code> 不同的是它只提供 “只读” 操作，<code>.list()</code> 和 <code>.retrieve()</code>。</p>
<p>举个栗子：</p>
<p>与 <code>ModelViewSet</code> 一样，您通常需要提供至少 <code>queryset</code> 和 <code>serializer_class</code> 属性。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，与 <code>ModelViewSet</code> 一样，您可以覆盖<code>GenericAPIView</code> 可用的任何标准属性和方法。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/viewsets?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E9%9B%86%E5%9F%BA%E7%B1%BB" title="自定义视图集基类" target="_blank" rel="noopener noreferrer">自定义视图集基类</a></h2>
<p>您可能需要使用没有完整 <code>ModelViewSet</code> 操作集的自定义 <code>ViewSet</code> 类，或其他自定义行为。</p>
<p>举个栗子：</p>
<p>要创建提供 <code>create</code>， <code>list</code> 和 <code>retrieve</code> 操作的基本视图集类，请从 <code>GenericViewSet</code> 继承，并混合（mixin ）所需的操作：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过创建自己的基本 ViewSet 类，能够提供可在 API 中的多个视图集中重用的常见行为。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(六)：Response</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%85%AD)%EF%BC%9AResponse.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%85%AD)%EF%BC%9AResponse.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(六)：Response</source>
      <description>目录 点击跳转到 Rest-Framework 专栏目录 (#点击跳转到-Rest-Framework-专栏目录); Response (#Response); 创建 response (#创建-response); 属性 (#属性); .data (#data); .status\_code (#status_code); .content (#co...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(六)：Response</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li>
<li><a href="#Response">Response</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA-response">创建 response</a></li>
<li><a href="#%E5%B1%9E%E6%80%A7">属性</a>
<ul>
<li><a href="#data">.data</a></li>
<li><a href="#status_code">.status_code</a></li>
<li><a href="#content">.content</a></li>
<li><a href="#template_name">.template_name</a></li>
<li><a href="#accepted_renderer">.accepted_renderer</a></li>
<li><a href="#accepted_media_type">.accepted_media_type</a></li>
<li><a href="#renderer_context">.renderer_context</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E5%87%86-HttpResponse-%E5%B1%9E%E6%80%A7">标准 HttpResponse 属性</a>
<ul>
<li><a href="#rander">rander()</a></li>
</ul>
</li>
</ul>
<hr>
<h4> <a href="https://juejin.cn/post/6844904185163415566" title="点击跳转到 Rest-Framework 专栏目录" target="_blank" rel="noopener noreferrer">点击跳转到 Rest-Framework 专栏目录</a></h4>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/responses/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/responses?id=responses" title="Response" target="_blank" rel="noopener noreferrer">Response</a></h2>
<blockquote>
<p>与基本的 HttpResponse 对象不同，TemplateResponse 对象保留了视图提供的用于计算响应的上下文的详细信息。直到需要时才会计算最终的响应输出，也就是在后面的响应过程中进行计算。 — <em>Django 文档</em></p>
</blockquote>
<p>REST framework 通过提供一个 <code>Response</code> 类来支持 HTTP 内容协商，该类允许你根据客户端请求返回不同的表现形式（如： JSON ，HTML 等）。</p>
<p><code>Response</code> 是 Django 的 <code>SimpleTemplateResponse</code> 的子类。<code>Response</code> 对象使用数据进行初始化，数据应由 Python 对象（native Python primitives）组成。然后 REST framework 使用标准的 HTTP 内容协商来确定它应该如何渲染最终响应的内容。</p>
<p>当然，您也可以不使用 <code>Response</code> 类，直接返回常规 <code>HttpResponse</code> 或 <code>StreamingHttpResponse</code> 对象。 使用 <code>Response</code> 类只是提供了一个更好的交互方式，它可以返回多种格式。</p>
<p>除非由于某种原因需要大幅度定制 REST framework ，否则应该始终对返回 <code>Response</code> 对象的视图使用 <code>APIView</code> 类或 <code>@api_view</code> 装饰器。这样做可以确保视图执行内容协商，并在视图返回之前为响应选择适当的渲染器。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/responses?id=%E5%88%9B%E5%BB%BA-response" title="创建 response" target="_blank" rel="noopener noreferrer">创建 response</a></h2>
<p>与普通 <code>HttpResponse</code> 对象不同，您不会使用渲染的内容实例化 <code>Response</code> 对象。相反，您传递的是未渲染的数据，可能包含任何 Python 对象。</p>
<p>由于 <code>Response</code> 类使用的渲染器不能处理复杂的数据类型（比如 Django 的模型实例），所以需要在创建 <code>Response</code> 对象之前将数据序列化为基本的数据类型。</p>
<p>你可以使用 REST framework 的 <code>Serializer</code> 类来执行序列化的操作，也可以用自己的方式来序列化。</p>
<p>当你需要自定义返回响应对象的时候, 你可能需要用到 <code>Response</code> 类, 你只需要从框架中导入到需要的服务模块中：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构造方法: <code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p>
<p>实例化对象你可能需要以下参数：</p>
<ul>
<li><code>data</code>：响应的序列化数据。</li>
<li><code>status</code>：响应的状态码，默认为200。</li>
<li><code>template_name</code>：选择 <code>HTMLRenderer</code> 时使用的模板名称。</li>
<li><code>headers</code>：设置响应中需要添加的 HTTP  header，字典类型。</li>
<li><code>content_type</code>：响应内容的类型, 通常会自动设置, 但有些时候需要手动指定。</li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/responses?id=%E5%B1%9E%E6%80%A7" title="属性" target="_blank" rel="noopener noreferrer">属性</a></h2>
<h3> .data</h3>
<p>获取响应实例对象的序列化数据。</p>
<p>还没有渲染，但已经序列化的响应数据。</p>
<h3> .status_code</h3>
<p>获取响应实例的状态码。</p>
<h3> .content</h3>
<p>当你优先调用了 <code>.render()</code> 方法后, 你可以使用该属性获取响应呈现的内容数据。</p>
<h3> .template_name</h3>
<p>当你使用了模板渲染器的时候, 可以使用该属性访问模板名称。</p>
<p>只有在 response 的渲染器是 <code>HTMLRenderer</code> 或其他自定义模板渲染器时才需要提供。</p>
<h3> .accepted_renderer</h3>
<p>用于呈现响应的实例对象。</p>
<p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p>
<h3> .accepted_media_type</h3>
<p>用于获取数据内容的类型。</p>
<p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p>
<h3> .renderer_context</h3>
<p>附加上下文信息的字典数据, 该字典将传递给渲染器的 <code>.render()</code> 方法。</p>
<p>从视图返回响应之前由 <code>APIView</code> 或 <code>@api_view</code> 自动设置。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/responses?id=%E6%A0%87%E5%87%86-httpresponse-%E5%B1%9E%E6%80%A7" title="标准 HttpResponse 属性" target="_blank" rel="noopener noreferrer">标准 HttpResponse 属性</a></h2>
<p><code>Response</code> 类扩展于 <code>SimpleTemplateResponse</code>，并且响应中也提供了所有常用的属性和方法。例如，您可以用标准方式在响应中设置 header：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> rander()</h3>
<p>与任何的 <code>TemplateResponse</code> 方法一样, 调用此方法可将响应的序列化数据呈现为最终响应内容, 当 <code>.render()</code> 被调用时, 响应内容将被设置为 <code>.render(data, accepted_media_type, renderer_context)</code> 对 <code>accepted_renderer</code> 实例调用的结果。</p>
<p>通常不需要自己调用 <code>.render()</code> ，因为它是由 Django 处理的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十)：Renderers</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81)%EF%BC%9ARenderers.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81)%EF%BC%9ARenderers.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十)：Renderers</source>
      <description>目录 渲染 (#渲染); 如何确定使用哪个渲染器 (#如何确定使用哪个渲染器); 设置渲染器 (#设置渲染器); 渲染器类的优先级 (#渲染器类的优先级); API 参考 (#API-参考); 渲染器罗列 (#渲染器罗列); JSONRenderer (#JSONRenderer); TemplateHTMLRenderer (#TemplateHTM...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十)：Renderers</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E6%B8%B2%E6%9F%93">渲染</a>
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8">如何确定使用哪个渲染器</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%99%A8">设置渲染器</a></li>
<li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%B1%BB%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7">渲染器类的优先级</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%BD%97%E5%88%97">渲染器罗列</a></li>
<li><a href="#JSONRenderer">JSONRenderer</a></li>
<li><a href="#TemplateHTMLRenderer">TemplateHTMLRenderer</a></li>
<li><a href="#StaticHTMLRenderer">StaticHTMLRenderer</a></li>
<li><a href="#BrowsableAPIRenderer">BrowsableAPIRenderer</a></li>
<li><a href="#AdminRenderer">AdminRenderer</a></li>
<li><a href="#HTMLFormRenderer">HTMLFormRenderer</a></li>
<li><a href="#MultiPartRenderer">MultiPartRenderer</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B8%B2%E6%9F%93%E5%99%A8">自定义渲染器</a>
<ul>
<li><a href="#data">data</a></li>
<li><a href="#media_typeNone">media_type=None</a></li>
<li><a href="#renderer_contextNone">renderer_context=None</a></li>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE-charset">设置 charset</a></li>
</ul>
</li>
<li><a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">渲染器的高级用法</a>
<ul>
<li><a href="#media-type-%E7%9A%84%E5%8F%98%E5%8C%96">media type 的变化</a></li>
<li><a href="#%E4%B8%8D%E6%98%8E%E7%A1%AE%E7%9A%84-media-type">不明确的 media type</a></li>
<li><a href="#HTML-error-%E8%A7%86%E5%9B%BE">HTML error 视图</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6">第三方组件</a>
<ul>
<li><a href="#YAML">YAML</a></li>
<li><a href="#XML">XML</a></li>
<li><a href="#JSONP">JSONP</a></li>
<li><a href="#MessagePack">MessagePack</a></li>
<li><a href="#XLSX">XLSX</a></li>
<li><a href="#CSV">CSV</a></li>
<li><a href="#UltraJSON">UltraJSON</a></li>
<li><a href="#Pandas-CSV-Excel-PNG">Pandas (CSV, Excel, PNG)</a></li>
<li><a href="#LaTeX">LaTeX</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/renderers/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93" title="渲染" target="_blank" rel="noopener noreferrer">渲染</a></h2>
<p>REST framework 包含许多内置的渲染器类，允许您使用各种 media type 返回响应。同时也支持自定义渲染器。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8" title="如何确定使用哪个渲染器" target="_blank" rel="noopener noreferrer">如何确定使用哪个渲染器</a></h3>
<p>视图的渲染器集合始终被定义为类列表。当调用视图时，REST framework 将对请求内容进行分析，并确定最合适的渲染器以满足请求。内容分析的基本过程包括检查请求的 <code>Accept</code> header，以确定它在响应中期望的 media type。或者，用 URL 上的格式后缀明确表示。例如，URL <code>http://example.com/api/users_count.json</code> 可能始终返回 JSON 数据。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%99%A8" title="设置渲染器" target="_blank" rel="noopener noreferrer">设置渲染器</a></h3>
<p>可以使用 <code>DEFAULT_RENDERER_CLASSES</code> 设置全局的默认渲染器集。例如，以下设置将使用JSON作为主要 media type，并且还包含自描述 API。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含了返回 JSON 数据以外, 还包括了自述 API 的返回。 当然, 如果你不想在全局中设置渲染的方式, 还可以使用基于 <code>API​​View</code> 的视图类来设置单个视图或视图集的渲染器：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再或者是在基于 <code>@api_view</code> 装饰器的函数视图上设置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用多种渲染器的时候, 默认使用的是下标为 <code>0</code> 的首选渲染器, 当然你可以在你的请求头中指定 <code>Accept</code>。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93%E5%99%A8%E7%B1%BB%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7" title="渲染器类的优先级" target="_blank" rel="noopener noreferrer">渲染器类的优先级</a></h3>
<p>在为 API 指定渲染器类时，需要考虑它们处理每种媒体类型时的优先级，这点很重要。如果客户端没有指定接受数据的表现形式，例如发送 <code>Accept：*/*</code> header，或者根本不包含 <code>Accept</code> header，则 REST framework 将选择列表中的第一个渲染器用于响应。</p>
<p>例如，如果你的 API 提供 JSON 响应和可浏览的 HTML API，则可能需要将 <code>JSONRenderer</code> 作为默认渲染器，以便将 <code>JSON</code> 响应发送给未指定 <code>Accept</code> header 的客户端。</p>
<p>如果你的 API 包含可根据请求同时处理常规网页和 API 响应的视图，那么你可以考虑将 <code>TemplateHTMLRenderer</code> 设置为默认渲染器，以便与发送 broken accept headers 的老式浏览器很好地配合使用。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/renderers?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h2>
<h3> 渲染器罗列</h3>
<table>
<thead>
<tr>
<th>渲染器类</th>
<th>渲染类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>JSONRenderer</code></td>
<td><code>application/json</code></td>
<td>将返回数据渲染成 JSON 数据样式, 并且你可以使用 <code>indent</code> 媒体类型参数制定你的缩进方式, 例如 <code>Accept: application/json; indent=4</code></td>
</tr>
<tr>
<td><code>TemplateHTMLRenderer</code></td>
<td><code>text/html</code></td>
<td>使用 Django 模板数据返回时, 将返回 HTML 类型数据, 并与其他返回数据不一样的是, 使用此渲染器返回数据不需要序列化, 但是在你创建并返回 Response 实例对象时需要制定 <code>template_name</code> 关键字参数</td>
</tr>
<tr>
<td><code>StaticHTMLRenderer</code></td>
<td><code>text/html</code></td>
<td>一个将渲染的 HTML 作为字符渲染的方式传递的渲染器</td>
</tr>
<tr>
<td><code>BrowsableAPIRenderer</code></td>
<td><code>text/html</code></td>
<td>将数据呈现为 Browsable API 的 HTML</td>
</tr>
<tr>
<td><code>AdminRenderer</code></td>
<td><code>text/html</code></td>
<td>该渲染器适用于 CRUD 样式的 WebAPI, 这些 API 也应提供用户友好的界面来管理数据</td>
</tr>
<tr>
<td><code>HTMLFormRenderer</code></td>
<td><code>text/html</code></td>
<td>将序列化数据呈现为 HTML, 次渲染器的输出不包含封闭的 <code>&lt;from&gt;</code> 标签以及隐藏的 CSRF 输入或任何提交按钮</td>
</tr>
<tr>
<td><code>MultiPartRenderer</code></td>
<td><code>multipart/form-data; boundary=BoUnDaRyStRiNg</code></td>
<td>该渲染器用于渲染 HTML 多部分表单数据, 它不适合用作响应渲染器, 而是用于使用 REST 框架的测试客户端和测试请求工厂创建测试请求</td>
</tr>
</tbody>
</table>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=jsonrenderer" title="JSONRenderer" target="_blank" rel="noopener noreferrer">JSONRenderer</a></h3>
<p>使用 utf-8 编码将请求数据呈现为 <code>JSON</code>。</p>
<p>请注意，默认风格包含 unicode 字符，并使用紧凑风格呈现（没有多余的空白）响应：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端可能还会包含 “缩进” media type 参数，在这种情况下，返回的 JSON 将会缩进。</p>
<p>比如： Accept: application/json; indent=4。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>UNICODE_JSON</code> 和 <code>COMPACT_JSON</code> 设置键可以更改默认的 JSON 编码风格。</p>
<p><strong>.media_type</strong>： <code>application/json</code></p>
<p><strong>.format</strong>： <code>'.json'</code></p>
<p><strong>.charset</strong>： <code>None</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=templatehtmlrenderer" title="TemplateHTMLRenderer" target="_blank" rel="noopener noreferrer">TemplateHTMLRenderer</a></h3>
<p>使用 Django 的标准模板将数据呈现为 HTML。与其他渲染器不同，传递给 <code>Response</code> 的数据不需要序列化。另外，创建 <code>Response</code> 时可能需要包含 <code>template_name</code> 参数。</p>
<p>TemplateHTMLRenderer 将创建一个 <code>RequestContext</code>，使用 <code>response.data</code> 作为上下文字典，并确定用于呈现上下文的模板名称。</p>
<p>模板名称由（按优先顺序）确定：</p>
<ol>
<li>传递给 response 的显式 <code>template_name</code> 参数。</li>
<li>在此类上设置明确的 <code>.template_name</code> 属性。</li>
<li>调用 <code>view.get_template_names()</code> 的返回结果。</li>
</ol>
<p>使用 <code>TemplateHTMLRenderer</code> 的视图示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>TemplateHTMLRenderer</code> 来使 REST framework 返回常规 HTML 页面，或者从单个端点（a single endpoint）返回 HTML 和 API 响应。</p>
<p>如果你正在构建使用 <code>TemplateHTMLRenderer</code> 以及其他渲染器类的网站，则应考虑将 <code>TemplateHTMLRenderer</code> 列为 <code>renderer_classes</code> 列表中的第一个类，以便即使对于发送格式错误的 <code>ACCEPT:</code> header 的浏览器，也会优先考虑它。</p>
<p><strong>.media_type</strong>： <code>text/html</code></p>
<p><strong>.format</strong>： <code>'.html'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=statichtmlrenderer" title="StaticHTMLRenderer" target="_blank" rel="noopener noreferrer">StaticHTMLRenderer</a></h3>
<p>一个简单的渲染器，它只是返回预渲染的 HTML。与其他渲染器不同，传递给响应对象的数据应该是表示要返回的内容的字符串。</p>
<p>使用 <code>StaticHTMLRenderer</code> 的视图示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>StaticHTMLRenderer</code> 来使 REST framework 返回常规 HTML 页面，或者从单个端点（a single endpoint）返回 HTML 和 API 响应。</p>
<p><strong>.media_type</strong>： <code>text/html</code></p>
<p><strong>.format</strong>： <code>'.html'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=browsableapirenderer" title="BrowsableAPIRenderer" target="_blank" rel="noopener noreferrer">BrowsableAPIRenderer</a></h3>
<p>将数据呈现为可浏览的 HTML API：</p>
<figure><figcaption></figcaption></figure>
<p>该渲染器将确定哪个其他渲染器被赋予最高优先级，并使用该渲染器在 HTML 页面中显示 API 风格响应。</p>
<p><strong>.media_type</strong>： <code>text/html</code></p>
<p><strong>.format</strong>： <code>'.api'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<p><strong>.template</strong>： <code>'rest_framework/api.html'</code></p>
<p><strong>自定义 BrowsableAPIRenderer</strong></p>
<p>默认情况下，除 <code>BrowsableAPIRenderer</code> 之外，响应内容将使用最高优先级的渲染器渲染。如果你需要自定义此行为，例如，将 HTML 用作默认返回格式，但在可浏览的 API 中使用 JSON，则可以通过覆盖 <code>get_default_renderer()</code> 方法来实现。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=adminrenderer" title="AdminRenderer" target="_blank" rel="noopener noreferrer">AdminRenderer</a></h3>
<p>将数据呈现为 HTML，以显示类似管理员的内容：</p>
<figure><figcaption></figcaption></figure>
<p>该渲染器适用于 CRUD 风格的 Web API，该 API 还应提供用于管理数据的用户友好界面。</p>
<p>请注意， <code>AdminRenderer</code> 对于嵌套或列出序列化输入的视图不起作用，因为 HTML 表单无法正确支持它们。</p>
<p><strong>注意</strong>：当数据中存在正确配置的 <code>URL_FIELD_NAME</code> （默认为 <code>url</code>）属性时， <code>AdminRenderer</code> 仅能够包含指向详细页面的链接。对于 <code>HyperlinkedModelSerializer</code> ，情况就是这样，但对于 <code>ModelSerializer</code> 类或普通 <code>Serializer</code> 类，你需要确保明确包含该字段。例如，在这里我们使用模型 <code>get_absolute_url</code> 方法：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.media_type</strong>： <code>text/html</code></p>
<p><strong>.format</strong>： <code>'.admin'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<p><strong>.template</strong>： <code>'rest_framework/admin.html'</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=htmlformrenderer" title="HTMLFormRenderer" target="_blank" rel="noopener noreferrer">HTMLFormRenderer</a></h3>
<p>将序列化返回的数据呈现为 HTML 表单。该渲染器的输出不包含封闭的 <code>&lt;form&gt;</code> 标签，隐藏的 CSRF 输入或任何提交按钮。</p>
<p>这个渲染器不是直接使用，而是可以通过将一个序列化器实例传递给 <code>render_form</code> 模板标签来在模板中使用。</p>
<p>render_form 模板标签在模板中使用, 参考 <a href="https://link.juejin.cn/?target=https://www.django-rest-framework.org/topics/html-and-forms/" title="HTML＆Forms 文档" target="_blank" rel="noopener noreferrer">HTML＆Forms 文档</a>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.media_type</strong>： <code>text/html</code></p>
<p><strong>.format</strong>： <code>'.form'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<p><strong>.template</strong>： <code>'rest_framework/horizontal/form.html'</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=multipartrenderer" title="MultiPartRenderer" target="_blank" rel="noopener noreferrer">MultiPartRenderer</a></h3>
<p>该渲染器用于呈现 HTML multipart form 数据。它不适合作为响应渲染器，而是用于创建测试请求，使用REST framework 的测试客户端和测试请求工厂。</p>
<p><strong>.media_type</strong>： <code>multipart/form-data; boundary=BoUnDaRyStRiNg</code></p>
<p><strong>.format</strong>： <code>'.multipart'</code></p>
<p><strong>.charset</strong>： <code>utf-8</code></p>
<h2> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B8%B2%E6%9F%93%E5%99%A8" title="自定义渲染器" target="_blank" rel="noopener noreferrer">自定义渲染器</a></h2>
<p>要实现自定义渲染器，您应该继承 <code>BaseRenderer</code> ，设置 <code>.media_type</code> 和 <code>.format</code> 属性，并实现 <code>.render(self, data, media_type=None, renderer_context=None)</code> 方法。</p>
<p>该方法应返回一个字符串，它将用作 HTTP 响应的主体。</p>
<p>传递给 <code>.render()</code> 方法的参数是：</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=data" title="data" target="_blank" rel="noopener noreferrer">data</a></h3>
<p>请求数据，由 <code>Response()</code> 实例化时设置。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=media_typenone" title="media_type=None" target="_blank" rel="noopener noreferrer">media_type=None</a></h3>
<p>可选的。如果提供，这是接受的媒体类型，由内容协商（content negotiation）阶段确定。</p>
<p>依赖于客户端的 <code>Accept:</code> header，它可以比渲染器的 <code>media_type</code> 属性更具体，并且可能包含媒体类型参数。比如 <code>"application/json; nested=true"</code> 。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=renderer_contextnone" title="renderer_context=None" target="_blank" rel="noopener noreferrer">renderer_context=None</a></h3>
<p>可选的。如果提供，它是视图提供的上下文信息字典。</p>
<p>默认情况下，这将包括以下键：<code>view</code> , <code>request</code> , <code>response</code> , <code>args</code> , <code>kwargs</code> 。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h3>
<p>以下是一个示例纯文本渲染器，它将返回带有数据参数的响应作为响应的内容。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E8%AE%BE%E7%BD%AE-charset" title="设置 charset" target="_blank" rel="noopener noreferrer">设置 charset</a></h3>
<p>默认情况下，渲染器类被假定为使用 UTF-8 编码。要使用不同的编码，请在渲染器上设置 <code>charset</code> 属性。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果渲染器类返回一个 unicode 字符串，则响应内容将被 <code>Response</code> 类强制为一个 bytestring，请在渲染器上设置 <code>charset</code> 属性用于确定编码。</p>
<p>如果渲染器返回代表原始二进制内容的字符串，则应将 <code>charset</code> 值设置为 <code>None</code>，这将确保响应的 <code>Content-Type</code> header 不会设置 <code>charset</code> 值。</p>
<p>在某些情况下，你可能还想将 <code>render_style</code> 属性设置为 <code>'binary'</code>。这样做也将确保可浏览的 API 不会尝试将二进制内容显示为字符串。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95" title="渲染器的高级用法" target="_blank" rel="noopener noreferrer">渲染器的高级用法</a></h2>
<p>你可以使用 REST framework 的渲染器来做一些非常灵活的事情。例如...</p>
<ul>
<li>根据请求的 media type，提供来自同一端点的平面或嵌套（flat or nested）表示。</li>
<li>同时处理常规 HTML 网页和来自相同端点的基于 JSON 的 API 响应。</li>
<li>指定 API 客户端使用的多种 HTML 表示形式。</li>
<li>不用明确指定渲染器的 media type，例如使用 <code>media_type ='image/*'</code>，并使用 <code>Accept</code> header 改变响应的编码。</li>
</ul>
<h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=media-type-%E7%9A%84%E5%8F%98%E5%8C%96" title="media type 的变化" target="_blank" rel="noopener noreferrer">media type 的变化</a></h3>
<p>在某些情况下，可能希望视图根据接受的 media type 使用不同的序列化风格。如果需要这样做，可以访问 <code>request.accepted_renderer</code> 以确定将用于响应的协商（negotiate）渲染器。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=%E4%B8%8D%E6%98%8E%E7%A1%AE%E7%9A%84-media-type" title="不明确的 media type" target="_blank" rel="noopener noreferrer">不明确的 media type</a></h3>
<p>在某些情况下，可能需要渲染器来提供一系列 media type 。在这种情况下，可以通过使用 <code>media_type</code> 值（如 <code>image/*</code>或<code>*/*</code>）来指定它应该响应的 media type 。</p>
<p>如果没有明确指定渲染器的 media type ，则应确保在返回响应时使用 <code>content_type</code> 属性明确指定 media type 。比如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/renderers?id=html-error-%E8%A7%86%E5%9B%BE" title="HTML error 视图" target="_blank" rel="noopener noreferrer">HTML error 视图</a></h3>
<p>通常情况下，无论处理常规响应还是引发异常的响应（例如 <code>Http404</code> 或 <code>PermissionDenied</code> 异常）或 <code>APIException</code> 的子类引起的响应，渲染器都会有相同的表现。</p>
<p>如果您使用的是 <code>TemplateHTMLRenderer</code> 或 <code>StaticHTMLRenderer</code>，并且引发异常，则行为会稍有不同，反映了 Django 对错误视图的默认处理。</p>
<p>由 HTML 渲染器引发和处理的异常将尝试使用以下方法之一（按优先顺序）进行渲染。</p>
<ul>
<li>加载并渲染模板 <code>{status_code}.html</code>。</li>
<li>加载并渲染模板 <code>api_exception.html</code>。</li>
<li>渲染 HTTP 状态码和文本，例如 "404 Not Found"。</li>
</ul>
<p>模板将使用 <code>RequestContext</code> 进行渲染，其中包含 <code>status_code</code> 和 <code>details</code> 键。</p>
<blockquote>
<p>注意：如果 <code>DEBUG = True</code>，则会显示 Django 的标准错误回溯页面，而不是显示 HTTP 状态码和文本。</p>
</blockquote>
<h3> 第三方组件</h3>
<h4> YAML</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> XML</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> JSONP</h4>
<p>警告：  <br>
如果你需要跨域 AJAX 请求, 通常应该使用 CORS 的更现代方法作为的替代方法 JSONP, 而该方法本质上是一种浏览器黑客, 并且仅适用于全局可读的 API 端点, 在该端点中, GET 请求未经身份验证并且不需要任何用户权限。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> MessagePack</h4>
<p><code>MessagePack</code> 是一种快速高效的二进制序列化格式, <a href="https://link.juejin.cn/?target=https://github.com/juanriaza" title="Juan Riaza" target="_blank" rel="noopener noreferrer">Juan Riaza</a> 维护 <a href="https://link.juejin.cn/?target=https://github.com/wharton/drf-renderer-xlsx" title="djangorestframework-msgpack" target="_blank" rel="noopener noreferrer">djangorestframework-msgpack</a> 软件包, 该软件包为 REST 框架提供 MessagePack 渲染器和解析器支持。</p>
<h4> XLSX</h4>
<p>XLSX 是世界上最受欢迎的二进制电子表格格式, <a href="https://link.juejin.cn/?target=https://github.com/wharton" title="The Wharton School" target="_blank" rel="noopener noreferrer">The Wharton School</a> 的 <a href="https://link.juejin.cn/?target=https://github.com/flipperpa" title="Tim Allen" target="_blank" rel="noopener noreferrer">Tim Allen</a> 维护着 <a href="https://link.juejin.cn/?target=https://github.com/wharton/drf-renderer-xlsx" title="drf-renderer-xlsx" target="_blank" rel="noopener noreferrer">drf-renderer-xlsx</a>, 这使得端点使用 OpenPyXL 作为一个 XLSX 的电子表格, 并允许客户端下载。可以基于每个视图设置电子表格的样式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免流传输的文件没有文件名(浏览器通常将其默认为没有扩展名的 <code>download</code>), 我们需要使用 <code>mixin</code> 覆盖 <code>Content-Disposition标头</code>, 如果未提供文件名则默认为 <code>medusa.xlsx</code>, 例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> CSV</h4>
<p>逗号分隔的值是纯文本格式的表格数据格式, 可以轻松地导入电子表格应用程序中, <a href="https://link.juejin.cn/?target=https://github.com/mjumbewu" title="Mjumbe Poe" target="_blank" rel="noopener noreferrer">Mjumbe Poe</a> 维护 <a href="https://link.juejin.cn/?target=https://github.com/mjumbewu/django-rest-framework-csv" title="djangorestframework-csv" target="_blank" rel="noopener noreferrer">djangorestframework-csv</a> 软件包, 该软件包为 REST 框架提供 CSV 渲染器支持。</p>
<h4> UltraJSON</h4>
<p><code>UltraJSON</code> 是经过优化的 <code>C JSON</code> 编码器, 可以显着加快 JSON 渲染速度, <a href="https://link.juejin.cn/?target=https://github.com/hzy" title="Jacob Haslehurst" target="_blank" rel="noopener noreferrer">Jacob Haslehurst</a> 维护了 <a href="https://link.juejin.cn/?target=https://github.com/gizmag/drf-ujson-renderer" title="drf-ujson-renderer" target="_blank" rel="noopener noreferrer">drf-ujson-renderer</a> 软件包, 该软件包使用 UJSON 软件包实现 JSON 呈现。</p>
<h4> Pandas (CSV, Excel, PNG)</h4>
<p><a href="https://link.juejin.cn/?target=https://github.com/wq/django-rest-pandas" title="Django REST Pandas" target="_blank" rel="noopener noreferrer">Django REST Pandas</a> 提供了序列化器和渲染器, 它们支持通过 <a href="https://link.juejin.cn/?target=https://pandas.pydata.org/" title="Pandas DataFrame API" target="_blank" rel="noopener noreferrer">Pandas DataFrame API</a> 进行其他数据处理和输出, <code>Django REST Pandas</code> 包括用于 <code>Pandas</code> 样式 <code>CSV</code> 文件、<code>Excel</code>工作簿(包括 <code>.xls</code> 和 <code>.xlsx</code>)以及许多其他格式的渲染器, 它由 <a href="https://link.juejin.cn/?target=https://github.com/sheppard" title="S. Andrew Sheppard" target="_blank" rel="noopener noreferrer">S. Andrew Sheppard</a> 作为 <a href="https://link.juejin.cn/?target=https://github.com/wq" title="wq Project" target="_blank" rel="noopener noreferrer">wq Project</a> 的一部分进行维护。</p>
<h4> LaTeX</h4>
<p><a href="https://link.juejin.cn/?target=https://github.com/mypebble/rest-framework-latex" title="Rest Framework Latex" target="_blank" rel="noopener noreferrer">Rest Framework Latex</a> 提供了一个渲染器, 该渲染器使用 <code>Laulatex</code> 输出 <code>PDF</code>, 它由 <a href="https://link.juejin.cn/?target=https://github.com/mypebble" title="Pebble (S/F Software)" target="_blank" rel="noopener noreferrer">Pebble (S/F Software)</a> 维护。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十一)：Serializers (1)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%80)%EF%BC%9ASerializers%20(1).html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%80)%EF%BC%9ASerializers%20(1).html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十一)：Serializers (1)</source>
      <description>目录 Serializers (#Serializers); 申明序列化类 (#申明序列化类); 再举个栗子 (#再举个栗子); 序列化对象 (#序列化对象); 反序列化对象 (#反序列化对象); 保存实例 (#保存实例); .save常规保存 (#save常规保存); 将附加属性传递给 .save() (#将附加属性传递给-save); 直接覆盖 ....</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十一)：Serializers (1)</h1>
<h2> 目录</h2>
<ul>
<li><a href="#Serializers">Serializers</a>
<ul>
<li><a href="#%E7%94%B3%E6%98%8E%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB">申明序列化类</a></li>
<li><a href="#%E5%86%8D%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">再举个栗子</a></li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1">序列化对象</a></li>
<li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1">反序列化对象</a></li>
<li><a href="#%E4%BF%9D%E5%AD%98%E5%AE%9E%E4%BE%8B">保存实例</a>
<ul>
<li><a href="#save%E5%B8%B8%E8%A7%84%E4%BF%9D%E5%AD%98">.save常规保存</a></li>
<li><a href="#%E5%B0%86%E9%99%84%E5%8A%A0%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92%E7%BB%99-save">将附加属性传递给 .save()</a></li>
<li><a href="#%E7%9B%B4%E6%8E%A5%E8%A6%86%E7%9B%96-save">直接覆盖 .save()。</a></li>
</ul>
</li>
<li><a href="#%E9%AA%8C%E8%AF%81%E6%95%B0%E6%8D%AE">验证数据</a>
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E6%97%B6%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">数据验证时抛出异常</a></li>
<li><a href="#%E5%AD%97%E6%AE%B5%E7%BA%A7%E9%AA%8C%E8%AF%81">字段级验证</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E9%AA%8C%E8%AF%81">对象级验证:</a></li>
<li><a href="#%E9%AA%8C%E8%AF%81%E5%99%A8">验证器</a></li>
</ul>
</li>
<li><a href="#%E8%AE%BF%E9%97%AE%E5%AE%9E%E4%BE%8B%E5%92%8C%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE">访问实例和初始数据</a></li>
<li><a href="#%E9%83%A8%E5%88%86%E6%9B%B4%E6%96%B0">部分更新</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1">处理嵌套对象</a></li>
<li><a href="#%E5%8F%AF%E5%86%99%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA">可写嵌套表示</a>
<ul>
<li><a href="#%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-create-%E6%96%B9%E6%B3%95">为嵌套表示书写 .create() 方法</a></li>
<li><a href="#%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-update-%E6%96%B9%E6%B3%95">为嵌套表示书写 .update() 方法</a></li>
<li><a href="#%E5%9C%A8%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9E%E4%BE%8B">在模型管理器类中保存相关的实例</a></li>
</ul>
</li>
<li><a href="#%E5%A4%84%E7%90%86%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1">处理多个对象</a>
<ul>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1">序列化多个对象</a></li>
<li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1">反序列化多个对象</a></li>
</ul>
</li>
<li><a href="#%E5%8C%85%E5%90%AB%E9%A2%9D%E5%A4%96%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87">包含额外的上下文</a></li>
</ul>
</li>
<li><a href="#ModelSerializer">ModelSerializer</a>
<ul>
<li><a href="#%E6%A3%80%E6%9F%A5-ModelSerializer">检查 ModelSerializer</a></li>
<li><a href="#%E6%8C%87%E5%AE%9A%E8%A6%81%E5%8C%85%E5%90%AB%E7%9A%84%E5%AD%97%E6%AE%B5">指定要包含的字段</a></li>
<li><a href="#%E6%8C%87%E5%AE%9A%E5%B5%8C%E5%A5%97%E5%BA%8F%E5%88%97%E5%8C%96">指定嵌套序列化</a></li>
<li><a href="#%E6%98%BE%E5%BC%8F%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5">显式指定字段</a></li>
<li><a href="#%E6%8C%87%E5%AE%9A%E5%8F%AA%E8%AF%BB%E5%AD%97%E6%AE%B5">指定只读字段</a></li>
<li><a href="#%E5%85%B6%E4%BB%96%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0">其他关键字参数</a></li>
<li><a href="#%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5">关系字段</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84">自定义字段映射</a>
<ul>
<li><a href="#field_class-%E5%92%8C-field_kwargs-API">field_class 和 field_kwargs API</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#HyperlinkedModelSerializer">HyperlinkedModelSerializer</a>
<ul>
<li><a href="#%E7%BB%9D%E5%AF%B9%E5%92%8C%E7%9B%B8%E5%AF%B9-URL">绝对和相对 URL</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%B6%85%E9%93%BE%E6%8E%A5%E8%A7%86%E5%9B%BE">如何确定超链接视图</a></li>
<li><a href="#%E6%9B%B4%E6%94%B9-URL-%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0">更改 URL 字段名称</a></li>
</ul>
</li>
<li><a href="#ListSerializer">ListSerializer</a>
<ul>
<li><a href="#allow_empty">allow_empty</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-ListSerializer-%E8%A1%8C%E4%B8%BA">自定义 ListSerializer 行为</a>
<ul>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA">自定义多个对象的创建</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9B%B4%E6%96%B0">自定义多个对象的更新</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-ListSerializer-%E5%88%9D%E5%A7%8B%E5%8C%96">自定义 ListSerializer 初始化</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#BaseSerializer">BaseSerializer</a>
<ul>
<li><a href="#Read-only-BaseSerializer-%E7%B1%BB">Read-only BaseSerializer 类</a></li>
<li><a href="#Read-write-BaseSerializer-%E7%B1%BB">Read-write BaseSerializer 类</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E5%9F%BA%E7%B1%BB">创建新的基类</a></li>
</ul>
</li>
<li><a href="#Serializer-%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6">Serializer 使用进阶</a>
<ul>
<li><a href="#%E9%87%8D%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A1%8C%E4%B8%BA">重写序列化和反序列化行为</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB">继承序列化类</a></li>
<li><a href="#%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5">动态修改字段</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/serializers/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=serializers" title="Serializers" target="_blank" rel="noopener noreferrer">Serializers</a></h2>
<p>序列化器允许<code>将诸如查询集和模型实例之类的复杂数据转换为原生 Python 数据类型</code>，然后可以将它们轻松地呈现为 <code>JSON</code>，<code>XML</code> 或其他内容类型。序列化器还提供反序列化，在首次验证传入数据之后，可以将解析的数据转换回复杂类型。</p>
<p>REST framework 中的序列化类与 Django 的 <code>Form</code> 和 <code>ModelForm</code> 类非常相似。我们提供了一个 <code>Serializer</code> 类，它提供了一种强大的通用方法来控制响应的输出，以及一个 <code>ModelSerializer</code> 类，它为创建处理模型实例和查询集的序列化提供了有效的快捷方式。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%94%B3%E6%98%8E%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB" title="申明序列化类" target="_blank" rel="noopener noreferrer">申明序列化类</a></h3>
<p>首先创建一个简单的对象用于示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明一个序列化类，使用它来序列化和反序列化与 Comment 对象相对应的数据。<br>
声明一个序列化类看起来非常类似于声明一个表单：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 再举个栗子</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 序列化对象</h3>
<p>现在可以使用 <code>CommentSerializer</code> 来序列化评论或评论列表。同样，使用 <code>Serializer</code> 类看起来很像使用 <code>Form</code> 类。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时已经将模型实例转换为 Python 原生数据类型。为了完成序列化过程，将数据渲染为 <code>json</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，现在可以使用 <code>UserSerializer</code>来序列化评论或评论列表。同样，使用 <code>Serializer</code> 类看起来很像使用 <code>Form</code> 类。</p>
<p>在上面的代码块中定义了一个用户序列化类, 此时又定义了一个仿造 <code>ORM</code> 的用户类, 并将 <code>User</code> 的实例对象 <code>user</code> 传递给序列化的 <code>data</code> 参数, 将可以生成一个序列化对象, 打印序列化对象的 <code>.data</code> 属性可以获得以下数据：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时已经将模型实例转换为 Python 原生数据类型。为了完成序列化过程，将数据渲染为 <code>json</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意在使用脚本执行的时候调用 <code>settings.settings.configure()</code> 获取配置信息的位置</p>
</blockquote>
<p>运行完成你可以获得字符：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 反序列化对象</h3>
<p>反序列化是相似的。首先我们将一个流解析为 Python 原生数据类型...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...然后我们将这些原生数据类型恢复成通过验证的数据字典。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，可以对User类做反序列化：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将保存的序列化数据反序列化一样可以实现, 注意的是在你反序列的时候需要执行 <code>.is_valid()</code> 来判断数据是否符合序列化类声明的对象约束, 如果返回的是 <code>False</code> 的话说明序列化对象不是符合声明对象的那样, 在返回 <code>True</code> 的时候就可以用 <code>serializer.validated_data</code> 获取序列化的数据：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那不符合约束的情况就可以用 <code>serializer.errors</code> 获取错误信息：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>事实上在开发中返回的错误信息是一个字典对象, key 是出现错误的字段字符串, value 是出现不符合约束的描述列表, 由于没有在 Django 项目中运行, 所以出现了一个报错信息(忽略)。</p>
<h3> 保存实例</h3>
<h4> .save常规保存</h4>
<p><code>comment</code></p>
<p>如果希望能够基于验证的数据返回完整的对象实例，则需要实现 <code>.create()</code> 和 <code>.update()</code> 方法中的一个或两个。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象实例与 Django 模型相对应，还需要<code>确保这些方法将对象保存到数据库</code>。如果 <code>Comment</code> 是一个 Django 模型，这些方法可能如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当反序列化数据时，我们可以调用 <code>.save() </code>根据验证的数据返回一个对象实例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>.save()</code> 将创建一个新实例或更新现有实例，具体取决于在<code>实例化序列化类时是否传递了现有实例</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>user</code></p>
<p>同样，对User对象的保存处理如下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象实例与 Django 模型相对应，还需要确保这些方法<code>将对象保存到数据库</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存实例或者更新实例的 <code>save()</code> 方法, 主要是看你是否在创建实例序列化对象是否传递了对象：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.create()</code> 和 <code>.update()</code> 方法都是<code>可选的</code>。您可以都不实现，或者实现其中的一个或两个，具体取决于你的序列化类的用例。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%B0%86%E9%99%84%E5%8A%A0%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92%E7%BB%99-save" title="将附加属性传递给 " target="_blank" rel="noopener noreferrer">将附加属性传递给 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%B0%86%E9%99%84%E5%8A%A0%E5%B1%9E%E6%80%A7%E4%BC%A0%E9%80%92%E7%BB%99-save" title=".save()" target="_blank" rel="noopener noreferrer">.save()</a></h4>
<p>有时你会希望你的视图代码能够在保存实例的时候注入额外的数据。这些附加数据可能包含当前用户，当前时间或其他任何不属于请求数据的信息。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>.create()</code> 或 <code>.update()</code> 时，任何其他关键字参数都将包含在 <code>validated_data</code> 参数中。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%9B%B4%E6%8E%A5%E8%A6%86%E7%9B%96-save%E3%80%82" title="直接覆盖 " target="_blank" rel="noopener noreferrer">直接覆盖 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%9B%B4%E6%8E%A5%E8%A6%86%E7%9B%96-save%E3%80%82" title=".save()" target="_blank" rel="noopener noreferrer">.save()</a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%9B%B4%E6%8E%A5%E8%A6%86%E7%9B%96-save%E3%80%82" title="。" target="_blank" rel="noopener noreferrer">。</a></h4>
<p>在某些情况下，<code>.create()</code> 和 <code>.update()</code> 方法名称可能没有意义。例如，在 “联系人表单” 中，我们可能不会创建新实例，而是发送电子邮件或其他消息。</p>
<blockquote>
<p>在这些情况下，可以选择直接覆盖 <code>.save()</code>，因为它更具可读性和有意义性。</p>
</blockquote>
<p>举个栗子：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>请注意，在上面的情况下，必须直接访问 <code>serializer.validated_data</code> 属性。</p>
</blockquote>
<h3> 验证数据</h3>
<p>在反序列化数据时，你总是需要在尝试访问验证数据之前调用 <code>is_valid()</code>，或者保存对象实例。如果发生任何验证错误，那么 <code>.errors</code> 属性将包含一个代表错误消息的字典。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典中的每个键都是字段名称，值是与该字段相对应的错误消息（字符串列表）。<code>non_field_errors</code> 键也可能存在，并会列出任何常规验证错误。可以使用 <code>NON_FIELD_ERRORS_KEY</code> （在 settings 文件中设置）来定制 <code>non_field_errors</code> 关键字的名称。</p>
<p>反序列化 item 列表时，错误将作为代表每个反序列化 item 的字典列表返回。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E6%97%B6%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8" title="数据验证时抛出异常" target="_blank" rel="noopener noreferrer">数据验证时抛出异常</a></h4>
<p><code>.is_valid()</code> 方法带有一个可选的 <code>raise_exception</code> 标志，如果存在验证错误，将导致它引发 <code>serializers.ValidationError</code> 异常。</p>
<p><code>这些异常由 REST framework 提供的默认异常处理程序自动处理</code>，并且默认情况下将返回 <code>HTTP 400 Bad Request</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%AD%97%E6%AE%B5%E7%BA%A7%E9%AA%8C%E8%AF%81" title="字段级验证" target="_blank" rel="noopener noreferrer">字段级验证</a></h4>
<p>你可以通过向 <code>Serializer</code> 子类添加 <code>.validate_&lt;field_name&gt;</code> 方法来指定自定义字段级验证。这些与 Django 表单上的 <code>.clean_&lt;field_name&gt;</code> 方法类似。</p>
<p>这些方法只有一个参数，就是需要验证的字段值。</p>
<p>您的 <code>validate_&lt;field_name&gt;</code> 方法应返回验证值或引发 <code>serializers.ValidationError</code>。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：如果你的序列化程序中声明的 <code>&lt;field_name&gt;</code> 参数为 <code>required = False</code> ，那么如果未包含该字段，则不会执行此验证步骤。</p>
</blockquote>
<h4> 对象级验证:</h4>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 验证器</h4>
<p>序列化器上的各个字段可以包含验证器，方法是在字段实例上声明它们，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化类还可以包含应用于<code>整个字段数据集的可重用验证器</code>。这些验证器是通过在内部的 <code>Meta</code> 类中声明它们来包含的，如下所示：：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 访问实例和初始数据</h3>
<p>将初始对象或查询集传递给序列化类实例时，该对象将作为 <code>.instance</code> 提供。如果没有传递初始对象，则 <code>.instance</code> 属性将为 <code>None</code>。</p>
<p>将数据传递给序列化类实例时，未修改的数据将作为 <code>.initial_data</code> 提供。如果 data 关键字参数未被传递，那么 <code>.initial_data</code> 属性将不存在。</p>
<h3> 部分更新</h3>
<blockquote>
<p>默认情况下, 必须为所有声明的序列化字段传递对应的值, 否则序列化器会引发验证错误, 此时你可以使用 <code>partial</code> 参数来允许部分更新。</p>
</blockquote>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%A4%84%E7%90%86%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1" title="处理嵌套对象" target="_blank" rel="noopener noreferrer">处理嵌套对象</a></h3>
<p>如果一个序列化对象的属性是另一个序列化对象, 又要怎么处理？</p>
<p>前面的例子适用于处理只具有简单数据类型的对象，但有时还需要能够表示更复杂的对象，其中对象的某些属性可能不是简单的数据类型，如字符串，日期或整数。</p>
<p><code>Serializer</code> 类本身就是一种 <code>Field</code>，可以用来表示一个对象类型嵌套在另一个对象类型中的关系。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果嵌套可以选择接受该 <code>None</code> 值，则应将 <code>required=False</code> 传递给嵌套序列化器：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果嵌套序列对象是多条数据构成, 则应将 <code>many=True</code> 传递给嵌套序列化：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%8F%AF%E5%86%99%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA" title="可写嵌套表示" target="_blank" rel="noopener noreferrer">可写嵌套表示</a></h3>
<p>在处理支持反序列化数据的嵌套表示时，嵌套对象的任何错误都将嵌套在嵌套对象的字段名称下。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，<code>.validated_data</code> 属性将包含嵌套的数据结构。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-create-%E6%96%B9%E6%B3%95" title="为嵌套表示书写 " target="_blank" rel="noopener noreferrer">为嵌套表示书写 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-create-%E6%96%B9%E6%B3%95" title=".create()" target="_blank" rel="noopener noreferrer">.create()</a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-create-%E6%96%B9%E6%B3%95" title=" 方法" target="_blank" rel="noopener noreferrer"> 方法</a></h4>
<blockquote>
<p>如果你支持可写嵌套表示，则<code>需要</code>编写处理保存多个对象的 <code>.create()</code> 或 <code>.update()</code> 方法。</p>
</blockquote>
<p>以下示例演示如何处理使用嵌套配置文件对象创建用户。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-update-%E6%96%B9%E6%B3%95" title="为嵌套表示书写 " target="_blank" rel="noopener noreferrer">为嵌套表示书写 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-update-%E6%96%B9%E6%B3%95" title=".update()" target="_blank" rel="noopener noreferrer">.update()</a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E4%B8%BA%E5%B5%8C%E5%A5%97%E8%A1%A8%E7%A4%BA%E4%B9%A6%E5%86%99-update-%E6%96%B9%E6%B3%95" title=" 方法" target="_blank" rel="noopener noreferrer"> 方法</a></h4>
<p>对于更新，您需要仔细考虑如何处理关系更新。例如，如果关系的数据是 <code>None</code> 或没有提供，则应发生以下哪种情况？</p>
<ul>
<li>在数据库中将关系设置为 <code>NULL</code>。</li>
<li>删除关联的实例。</li>
<li>忽略数据并保持原样。</li>
<li>引发验证错误。</li>
</ul>
<p>以下是我们以前的 <code>UserSerializer</code> 类中的 <code>.update()</code> 方法的示例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为嵌套创建和更新的行为可能不明确，并且可能需要相关模型之间的复杂依赖关系，所以 REST framework 3 要求你始终明确写入这些方法。</p>
<blockquote>
<p>默认的 <code>ModelSerializer</code> 的 <code>.create()</code>和 <code>.update()</code> 方法不包括对可写嵌套表示的支持。</p>
</blockquote>
<p>不过，有第三方软件包可用，如支持自动可写嵌套表示的<a href="http://www.django-rest-framework.org/api-guide/serializers/#drf-writable-nested" title="DRF Writable Nested" target="_blank" rel="noopener noreferrer">DRF Writable Nested</a>。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%9C%A8%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9E%E4%BE%8B" title="在模型管理器类中保存相关的实例" target="_blank" rel="noopener noreferrer">在模型管理器类中保存相关的实例</a></h4>
<blockquote>
<p>在序列化类中保存多个相关实例的另一种方法是编写自定义模型管理器类。</p>
</blockquote>
<p>例如，假设我们希望确保 <code>User</code> 实例和 <code>Profile</code> 实例始终作为一对创建。我们可能会编写一个类似下面的自定义管理器类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此管理器类现在更好地封装了用户实例和配置文件实例始终在同一时间创建。现在可以重新编写序列化类上的 .create()方法，以使用新的管理类方法。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%A4%84%E7%90%86%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1" title="处理多个对象" target="_blank" rel="noopener noreferrer">处理多个对象</a></h3>
<p>Serializer 类还可以处理序列化或反序列化对象列表。</p>
<h4> 序列化多个对象</h4>
<p>要序列化查询集或对象列表而不是单个对象实例，在实例化序列化类时，应该传递 <code>many=True</code> 标志。然后，您可以传递要序列化的查询集或对象列表。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1" title="反序列化多个对象" target="_blank" rel="noopener noreferrer">反序列化多个对象</a></h4>
<p>反序列化多个对象的默认行为是支持多个对象创建，但不支持多个对象更新。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%8C%85%E5%90%AB%E9%A2%9D%E5%A4%96%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87" title="包含额外的上下文" target="_blank" rel="noopener noreferrer">包含额外的上下文</a></h3>
<p>除了被序列化的对象外，还有一些情况需要为序列化类提供额外的上下文。一种常见的情况是，如果你使用的是包含超链接关系的序列化类，则需要序列化类访问当前请求，以便它可以正确生成完全限定的URL。</p>
<p>在实例化序列化对象时，你可以通过传递上下文参数来提供任意附加上下文。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过访问 <code>self.context</code> 属性，可以在任何序列化对象字段逻辑中使用上下文字典，例如自定义的 <code>.to_representation()</code> 方法。</p>
<p><a title="重写DRF的to_representation和to_internal_value方法有什么用途?" href="/docs/python/%E9%87%8D%E5%86%99DRF%E7%9A%84to_representation%E5%92%8Cto_int/%E9%87%8D%E5%86%99DRF%E7%9A%84to_representation%E5%92%8Cto_internal_value%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%E9%80%94-.html" target="blank">重写DRF的to_representation和to_internal_value方法有什么用途?</a></p>
<h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=modelserializer" title="ModelSerializer" target="_blank" rel="noopener noreferrer">ModelSerializer</a></h2>
<p>通常你会想要序列化类紧密地映射到 Django 模型定义上。</p>
<p><code>ModelSerializer</code> 类提供了一个快捷方式，可让你自动创建一个 <code>Serializer</code> 类，其中的字段与模型类字段对应。</p>
<p><strong><code>ModelSerializer</code></strong>** 类与常规 <strong><strong><code>Serializer</code></strong></strong> 类相同，不同之处在于：**</p>
<ul>
<li>它会根据模型自动生成一组字段。</li>
<li>它会自动为序列化类生成验证器，例如 unique_together 验证器。</li>
<li>它包含 <code>.create()</code> 和 <code>.update()</code> 的简单默认实现。</li>
</ul>
<p>声明ModelSerializer如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该类中的所有模型类字段将被映射为相应的序列化类字段。</p>
<p>任何关系（如模型上的外键）都将映射到 <code>PrimaryKeyRelatedField</code> 。除非在序列化关系文档中指定，否则默认不包括反向关系。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%A3%80%E6%9F%A5-modelserializer" title="检查 " target="_blank" rel="noopener noreferrer">检查 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%A3%80%E6%9F%A5-modelserializer" title="ModelSerializer" target="_blank" rel="noopener noreferrer">ModelSerializer</a></h3>
<p>序列化类能够生成一个表示字符串，可以让你充分检查其字段的状态。在使用 <code>ModelSerializer</code> 进行工作时，这是特别有用的，你需要确定它为你自动创建了哪些字段和验证器。</p>
<p>为此，使用 <code>python manage.py shell</code> 进入 Django shell，然后导入序列化类，实例化它并打印对象表示形式...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%8C%87%E5%AE%9A%E8%A6%81%E5%8C%85%E5%90%AB%E7%9A%84%E5%AD%97%E6%AE%B5" title="指定要包含的字段" target="_blank" rel="noopener noreferrer">指定要包含的字段</a></h3>
<p>如果你只希望在模型序列化程序中使用默认字段的子集，则可以使用 <code>fields</code> 或 <code>exclude</code> 选项来完成此操作，就像使用 <code>ModelForm</code> 一样。强烈建议你显式使用 <code>fields</code> 属性序列化的所有字段。这将使你不太可能在模型更改时无意中暴露数据。</p>
<p>举个栗子：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以将 <code>fields</code> 属性设置为特殊值 <code>'__all__'</code>，以指示应该使用模型中的所有字段。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以将 <code>exclude</code> 属性设置为从序列化程序中排除的字段列表。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，如果 <code>Account</code> 模型有3个字段 <code>account_name</code>，<code>users</code> 和 <code>created</code>，则会导致字段 <code>account_name</code> 和 <code>created</code> 被序列化。</p>
<p><code>fields</code> 和 <code>exclude</code> 属性中的名称通常映射到模型类的模型字段。</p>
<p>或者<code>fields</code>选项中的名称可以映射成属性或方法。而不会变成模型类中的参数。</p>
<p>从版本 3.3.0 开始，必须提供其中一个属性 <code>fields</code> 或 <code>exclude</code>。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%8C%87%E5%AE%9A%E5%B5%8C%E5%A5%97%E5%BA%8F%E5%88%97%E5%8C%96" title="指定嵌套序列化" target="_blank" rel="noopener noreferrer">指定嵌套序列化</a></h3>
<p>默认的 <code>ModelSerializer</code> 使用主键进行关联，但你也可以使用 <code>depth</code> 选项轻松生成嵌套表示（自关联）：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>depth</code> 选项应设置为一个整数值，该值指示在还原为平面表示之前应该遍历的关联的深度。</p>
<p>如果你想自定义序列化的方式，你需要自己定义字段。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%98%BE%E5%BC%8F%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5" title="显式指定字段" target="_blank" rel="noopener noreferrer">显式指定字段</a></h3>
<p>你可以将额外的字段添加到 <code>ModelSerializer</code>，或者通过在类上声明字段来覆盖默认字段，就像你对 <code>Serializer</code> 类所做的那样。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>额外的字段可以对应于模型上的任何属性或可调用的字段。</p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%8C%87%E5%AE%9A%E5%8F%AA%E8%AF%BB%E5%AD%97%E6%AE%B5" title="指定只读字段" target="_blank" rel="noopener noreferrer">指定只读字段</a></h3>
<p>你可能希望将多个字段指定为只读。不要显式给每个字段添加 <code>read_only = True</code>属性，你可以使用快捷方式 Meta 选项 <code>read_only_fields</code> 。</p>
<p>该选项应该是字段名称的列表或元组，声明如下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>含有 <code>editable = False</code>的模型字段，<code>AutoField</code> 字段默认设置为只读，并且不需要添加到 <code>read_only_fields</code> 选项。</p>
<blockquote>
<p><strong>注意</strong>： 有一种特殊情况，只读字段是模型级别的 <code>unique_together</code> 约束的一部分。在这种情况下，序列化类需要验证约束该字段，但也不能由用户编辑。</p>
</blockquote>
<blockquote>
<p>处理这个问题的正确方法是在序列化类中明确指定字段，同时提供 <code>read_only = True</code> 和 <code>default = ...</code> 关键字参数。</p>
</blockquote>
<blockquote>
<p>其中一个例子是与当前认证 <code>User</code> 的只读关系，它与另一个标识符是 <code>unique_together</code> 。在这种情况下，你会像这样声明用户字段：</p>
</blockquote>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>关于验证以后还会再说</p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%85%B6%E4%BB%96%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0" title="其他关键字参数" target="_blank" rel="noopener noreferrer">其他关键字参数</a></h3>
<p>还有一个快捷方式允许你使用 <code>extra_kwargs</code> 选项在字段上指定任意附加关键字参数。与 <code>read_only_fields</code> 的情况一样，这意味着你不需要在序列化类中显式声明该字段。</p>
<p>该选项是一个字典，将字段名称映射到关键字参数字典。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5" title="关系字段" target="_blank" rel="noopener noreferrer">关系字段</a></h3>
<p>序列化模型实例时，可以选择多种不同的方式来表示关系。<code>ModelSerializer</code> 的默认表示是使用相关实例的主键。</p>
<p>其他表示形式包括使用超链接序列化，序列化完整嵌套表示形式或使用自定义表示形式序列化。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84" title="自定义字段映射" target="_blank" rel="noopener noreferrer">自定义字段映射</a></h3>
<p>ModelSerializer 类还公开了一个可以覆盖的 API，以便在实例化序列化对象时更改序列化对象的字段。</p>
<p>通常，如果 <code>ModelSerializer</code> 没办法生成默认需要的字段，那么你应该将它们明确地添加到类中，或者直接使用常规的<code>Serializer</code> 类。但是，在某些情况下，你可能需要创建一个新的基类，以定义如何为给定模型创建序列化对象的字段。</p>
<p><strong><code>.serializer_field_mapping</code></strong></p>
<p>Django 模型类到 REST framework 序列化类的映射。你可以重写此映射来更改应该用于每个模型类的默认序列化类。</p>
<p><strong><code>.serializer_related_field</code></strong></p>
<p>该属性应该是序列化器字段类，默认情况下用于关系字段。</p>
<p>对于 <code>ModelSerializer</code>，它默认为 <code>PrimaryKeyRelatedField</code>。</p>
<p>对于 <code>HyperlinkedModelSerializer</code>，它默认为 <code>serializers.HyperlinkedRelatedField</code>。</p>
<p><strong><code>serializer_url_field</code></strong></p>
<p>序列化器字段类，应该用于序列化类中的任何 <code>url</code> 字段。</p>
<p>默认是 <code>serializers.HyperlinkedIdentityField</code> 。</p>
<p><strong><code>serializer_choice_field</code></strong></p>
<p>序列化器字段类，应该用于序列化程序中的任何选择字段。</p>
<p>默认是 <code>serializers.ChoiceField</code>。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=field_class-%E5%92%8C-field_kwargs-api" title="field_class 和 field_kwargs API" target="_blank" rel="noopener noreferrer">field_class 和 field_kwargs API</a></h4>
<p>调用以下方法来确定应该自动包含在序列化程序中的每个字段的类和关键字参数。这些方法都应返回两个元组 <code>(field_class, field_kwargs)</code>。</p>
<p><strong><code>.build_standard_field(self, field_name, model_field)</code></strong></p>
<p>调用以生成映射到标准模型字段的序列化器字段。</p>
<p>默认实现基于 <code>serializer_field_mapping</code> 属性返回序列化类。</p>
<p><strong><code>.build_relational_field(self, field_name, relation_info)</code></strong></p>
<p>调用以生成映射到关系模型字段的序列化器字段。</p>
<p>默认实现基于 <code>serializer_relational_field</code> 属性返回一个序列化类。</p>
<p><code>relation_info</code> 参数是一个命名元组，它包含 <code>model_field</code>，<code>related_model</code>，<code>to_many</code>和 <code>has_through_model</code> 属性。</p>
<p><strong><code>.build_nested_field(self, field_name, relation_info, nested_depth)</code></strong></p>
<p>当 <code>depth</code> 选项已设置时，调用以生成映射到关系模型字段的序列化程序字段。</p>
<p>默认实现动态创建一个基于 <code>ModelSerializer</code> 或 <code>HyperlinkedModelSerializer</code> 的嵌套序列化类。</p>
<p><code>nested_depth</code> 将是 <code>depth</code> 选项的值减 1。</p>
<p><code>relation_info</code> 参数是一个命名元组，它包含 <code>model_field</code>，<code>related_model</code>，<code>to_many</code>和 <code>has_through_model</code> 属性。</p>
<p><strong><code>.build_property_field(self, field_name, model_class)</code></strong></p>
<p>调用以生成映射到模型类上的属性或零参数方法的序列化器字段。</p>
<p>默认实现返回一个 <code>ReadOnlyField</code> 类。</p>
<p><strong><code>.build_url_field(self, field_name, model_class)</code></strong></p>
<p>被调用来为序列化器自己的 <code>url</code> 字段生成一个序列化器字段。</p>
<p>默认实现返回一个 <code>HyperlinkedIdentityField</code> 类。</p>
<p><strong><code>.build_unknown_field(self, field_name, model_class)</code></strong></p>
<p>当字段名称未映射到任何模型字段或模型属性时调用。默认实现会引发错误。但是子类可以自定义这种行为。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=hyperlinkedmodelserializer" title="HyperlinkedModelSerializer" target="_blank" rel="noopener noreferrer">HyperlinkedModelSerializer</a></h2>
<p><code>HyperlinkedModelSerializer</code> 类与 <code>ModelSerializer</code> 类相似，只不过它使用超链接来表示关系而不是主键。</p>
<p>默认情况下，序列化器将包含一个 <code>url</code> 字段而不是主键字段。</p>
<p>url 字段将使用 <code>HyperlinkedIdentityField</code> 序列化器字段来表示，并且模型上的任何关系都将使用 <code>HyperlinkedRelatedField</code> 序列化器字段来表示。</p>
<p>你可以通过将主键添加到 <code>fields</code> 选项来明确包含主键，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%BB%9D%E5%AF%B9%E5%92%8C%E7%9B%B8%E5%AF%B9-url" title="绝对和相对 URL" target="_blank" rel="noopener noreferrer">绝对和相对 URL</a></h3>
<p>在实例化 <code>HyperlinkedModelSerializer</code> 时，必须在序列化上下文中包含当前请求，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样做将确保超链接可以包含适当的主机名，以便生成完全限定的 URL，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而不是相对的 URL，例如</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你确实想要使用相对 URL，则应该在序列化上下文中显式传递 <code>{'request'：None}</code>。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%B6%85%E9%93%BE%E6%8E%A5%E8%A7%86%E5%9B%BE" title="如何确定超链接视图" target="_blank" rel="noopener noreferrer">如何确定超链接视图</a></h3>
<p>需要确定哪些视图应该用于超链接到模型实例。</p>
<p>默认情况下，超链接预期对应于与样式 <code>'{model_name}-detail'</code> 匹配的视图名称，并通过 <code>pk</code> 关键字参数查找实例。</p>
<p>您可以使用 <code>extra_kwargs</code> 设置中的 <code>view_name</code> 和 <code>lookup_field</code> 选项覆盖 URL 字段视图名称和查找字段，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，可以显式设置序列化类中的字段。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>提示：正确地匹配超链接和 URL conf 有时可能有点困难。打印 <code>HyperlinkedModelSerializer</code> 实例的 <code>repr</code> 是一种特别有用的方法，可以准确检查这些关系预期映射的 view name 和 lookup field。</p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E6%9B%B4%E6%94%B9-url-%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0" title="更改 URL 字段名称" target="_blank" rel="noopener noreferrer">更改 URL 字段名称</a></h3>
<p>URL 字段的名称默认为 'url'。可以使用 <code>URL_FIELD_NAME</code> （在 settings 文件）全局覆盖此设置。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=listserializer" title="ListSerializer" target="_blank" rel="noopener noreferrer">ListSerializer</a></h2>
<p><code>ListSerializer</code> 类提供了一次序列化和验证多个对象的行为。你通常不需要直接使用 <code>ListSerializer</code>，而应该在实例化序列化类时简单地传递 <code>many=True</code>。</p>
<p>当一个序列化类被实例化并且 <code>many = True</code> 被传递时，一个 <code>ListSerializer</code> 实例将被创建。序列化类成为父级 <code>ListSerializer</code> 的子级</p>
<p>以下参数也可以传递给 <code>ListSerializer</code> 字段或传递了 <code>many = True</code> 的序列化类：</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=allow_empty" title="allow_empty" target="_blank" rel="noopener noreferrer">allow_empty</a></h3>
<p>默认情况下为 <code>True</code>，但如果要禁止将空列表作为有效输入，则可将其设置为 <code>False</code>。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89-listserializer-%E8%A1%8C%E4%B8%BA" title="自定义 " target="_blank" rel="noopener noreferrer">自定义 </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89-listserializer-%E8%A1%8C%E4%B8%BA" title="ListSerializer" target="_blank" rel="noopener noreferrer">ListSerializer</a><a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89-listserializer-%E8%A1%8C%E4%B8%BA" title=" 行为" target="_blank" rel="noopener noreferrer"> 行为</a></h3>
<p>有几种情况可能需要自定义 <code>ListSerializer</code> 行为。例如：</p>
<ul>
<li>希望提供对列表的特定验证，例如检查一个元素是否与列表中的另一个元素不冲突。</li>
<li>想要自定义多个对象的创建或更新行为。</li>
</ul>
<p>对于这些情况，可以通过使用序列化类的 <code>Meta</code> 类中的 <code>list_serializer_class</code> 选项来修改传递了 <code>many=True</code> 时使用的类。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA" title="自定义多个对象的创建" target="_blank" rel="noopener noreferrer">自定义多个对象的创建</a></h4>
<p>创建多个对象的默认实现是简单地为列表中的每个 item 调用 <code>.create()</code>。如果要自定义此行为，则需要在传递 <code>many=True</code>时自定义 <code>ListSerializer</code> 类上的 <code>.create()</code>方法。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9B%B4%E6%96%B0" title="自定义多个对象的更新" target="_blank" rel="noopener noreferrer">自定义多个对象的更新</a></h4>
<p>默认情况下，<code>ListSerializer</code>类<code>不支持多对象更新</code>。这是因为插入和删除预期的行为是不明确的。</p>
<p><code>为了支持多对象更新，你需要重写 update 方法</code>。在编写你的多对象更新代码时，一定要记住以下几点：</p>
<ul>
<li>如何确定应该为数据列表中的每个 item 更新哪个实例？</li>
<li>插入应该如何处理？它们是无效的，还是创建新对象？</li>
<li>应该如何处理删除？它们是否暗示了对象删除，或者删除了一段关系？它们应该被忽略，还是无效？</li>
<li>如何处理排序？改变两个 item 的位置是否意味着状态的改变或者被忽略？</li>
</ul>
<p>你需要为实例序列化类添加一个显式 <code>id</code> 字段。默认的隐式生成的 <code>id</code> 字段被标记为 <code>read_only</code>。这会导致它在更新时被删除。一旦你明确声明它，它将在列表序列化类的更新方法中可用。</p>
<p>下面是你如何选择实现多对象更新的示例:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E8%87%AA%E5%AE%9A%E4%B9%89-listserializer-%E5%88%9D%E5%A7%8B%E5%8C%96" title="自定义 ListSerializer 初始化" target="_blank" rel="noopener noreferrer">自定义 ListSerializer 初始化</a></h4>
<p>当具有 <code>many=True</code>的序列化类实例化时，我们需要确定哪些参数和关键字参数应该传递给子级 <code>Serializer</code>类和父级 <code>ListSerializer</code> 类的 <code>.__ init __()</code> 方法。</p>
<p>默认的实现是将所有参数传递给两个类，除了 <code>validators</code> 和任何自定义关键字参数，这两个参数都假定用于子序列化类。</p>
<p>有时你可能需要明确指定在传递 <code>many=True</code> 时如何实例化子类和父类。您可以使用 <code>many_init</code> 类方法来完成此操作。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=baseserializer" title="BaseSerializer" target="_blank" rel="noopener noreferrer">BaseSerializer</a></h2>
<p><code>BaseSerializer</code> 类可以用来方便地支持其他序列化和反序列化风格。</p>
<p>这个类实现了与 <code>Serializer</code> 类相同的基本 API：</p>
<ul>
<li><code>.data</code> - 返回传出的原始表示。</li>
<li><code>.is_valid()</code> - 反序列化并验证传入的数据。</li>
<li><code>.validated_data</code> - 返回验证的传入数据。</li>
<li><code>.errors</code> - 在验证期间返回错误。</li>
<li><code>.save()</code> - 将验证的数据保存到对象实例中。</li>
</ul>
<p>有四种方法可以被覆盖，这取决于你希望序列化类支持的功能：</p>
<ul>
<li><code>.to_representation()</code> - 重写此操作以支持序列化，用于读取操作。</li>
<li><code>.to_internal_value()</code> - 重写此操作以支持反序列化，以用于写入操作。</li>
<li><code>.create() 和 .update()</code> - 覆盖其中一个或两个以支持保存实例。</li>
</ul>
<p>因为这个类提供了与 <code>Serializer</code> 类相同的接口，所以你可以像现有的常规 <code>Serializer</code>或 <code>ModelSerializer</code> 一样，将它与基于类的通用视图一起使用。</p>
<p>唯一不同的是，<code>BaseSerializer</code> 类不会在可浏览的 API 中生成 HTML 表单。这是因为它们返回的数据不包含所有的字段信息，这些字段信息允许将每个字段渲染为合适的 HTML 输入。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=read-only-baseserializer-%E7%B1%BB" title="Read-only " target="_blank" rel="noopener noreferrer">Read-only </a><a href="http://drf.jiuyou.info/#/drf/serializers?id=read-only-baseserializer-%E7%B1%BB" title="BaseSerializer" target="_blank" rel="noopener noreferrer">BaseSerializer</a><a href="http://drf.jiuyou.info/#/drf/serializers?id=read-only-baseserializer-%E7%B1%BB" title=" 类" target="_blank" rel="noopener noreferrer"> 类</a></h3>
<p>要使用 <code>BaseSerializer</code> 类实现只读序列化类，我们只需重写 <code>.to_representation()</code> 方法。让我们来看一个使用简单的 Django 模型的示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建用于将 <code>HighScore</code> 实例转换为基本数据类型的只读序列化类非常简单。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以使用这个类来序列化单个 <code>HighScore</code> 实例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者用它来序列化多个实例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=read-write-baseserializer-%E7%B1%BB" title="Read-write BaseSerializer 类" target="_blank" rel="noopener noreferrer">Read-write BaseSerializer 类</a></h3>
<p>要创建一个可读写的序列化类，我们首先需要实现一个 <code>.to_internal_value()</code> 方法。此方法返回将用于构造对象实例的验证值，并且如果提供的数据格式不正确，则可能引发 <code>ValidationError</code> 。</p>
<p>一旦实现 <code>.to_internal_value()</code>，基本验证 API 将在序列化器中可用，并且你将能够使用 <code>.is_valid()</code>，<code>.validated_data</code> 和 <code>.errors</code>。</p>
<p>如果你还想支持 <code>.save()</code>，则还需要实现 <code>.create()</code> 和 <code>.update()</code>方法中的一个或两个。</p>
<p>以下是我们之前的 <code>HighScoreSerializer</code> 的一个完整示例，该示例已更新为支持读取和写入操作。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E5%9F%BA%E7%B1%BB" title="创建新的基类" target="_blank" rel="noopener noreferrer">创建新的基类</a></h3>
<p>如果你希望实现新的泛型序列化类来处理特定的序列化风格，或者与可选的存储后端进行集成，那么 <code>BaseSerializer</code> 类也很有用。</p>
<p>以下类是可以处理将任意对象强制转换为基本表示形式的泛型序列化类的示例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/serializers?id=serializer-%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6" title="Serializer 使用进阶" target="_blank" rel="noopener noreferrer">Serializer 使用进阶</a></h2>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E9%87%8D%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A1%8C%E4%B8%BA" title="重写序列化和反序列化行为" target="_blank" rel="noopener noreferrer">重写序列化和反序列化行为</a></h3>
<p>如果你需要更改序列化类的序列化或反序列化行为，可以通过覆盖 <code>.to_representation()</code> 或 <code>.to_internal_value()</code> 方法来实现。</p>
<p>以下原因可能需要重写这两个方法...</p>
<ul>
<li>为新的序列化基类添加新行为。</li>
<li>稍微修改现有类的行为。</li>
<li>提高经常访问的 API 端点的序列化性能，以便返回大量数据。</li>
</ul>
<p>这些方法的签名如下：</p>
<p><strong><code>.to_representation(self, obj)</code></strong></p>
<p>接受需要序列化的对象实例，并返回一个原始表示。通常这意味着返回一个内置 Python 数据类型的结构。可以处理的确切类型取决于您为 API 配置的渲染类。</p>
<p>可能会被重写以便修改表示风格。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>.to_internal_value(self, data)</code></strong></p>
<p>将未验证的传入数据作为输入，并应返回将作为 <code>serializer.validated_data</code> 提供的验证数据。如果在序列化类上调用了 <code>.save()</code> ，则返回值也将传递给 <code>.create()</code> 或 <code>.update()</code> 方法。</p>
<p>如果验证失败，则该方法会引发 <code>serializers.ValidationError(errors)</code>。<code>errors</code> 参数应该是一个由字段名称（或 <code>settings.NON_FIELD_ERRORS_KEY</code>）映射到错误消息列表的字典。如果不需要改变反序列化行为，而是想提供对象级验证，则建议改为覆盖 <code>.validate()</code>方法。</p>
<p>传递给此方法的 <code>data</code> 参数通常是 <code>request.data</code> 的值，因此它提供的数据类型将取决于你为 API 配置的解析器类。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E7%BB%A7%E6%89%BF%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB" title="继承序列化类" target="_blank" rel="noopener noreferrer">继承序列化类</a></h3>
<p>与 Django 表单类似，你可以通过继承来扩展和重用序列化类。这使你可以在父类上声明一组通用的字段或方法，然后可以在多个序列化类中使用它们。例如，</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Django 的 <code>Model</code> 和 <code>ModelForm</code> 类一样，序列化类中的内部 <code>Meta</code> 类不会从其父类的内部 <code>Meta</code> 类中隐式继承。如果你想让 <code>Meta</code> 类继承父类，必须<code>明确的指出</code>。例如</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>通常我们建议不要在内部的 Meta 类中使用继承，而是显式声明所有选项。</p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/serializers?id=%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5" title="动态修改字段" target="_blank" rel="noopener noreferrer">动态修改字段</a></h3>
<p>一旦序列化类初始化完毕，就可以使用 <code>.fields</code> 属性访问在序列化类中设置的字段字典。通过访问和修改这个属性可以达到动态地修改序列化类的目的。</p>
<p>直接修改 <code>fields</code> 参数允许你做一些有趣的事情，比如在运行时改变序列化字段的参数，而不是在声明序列化类的时候。</p>
<p>举个栗子：</p>
<p>例如，如果你希望能够设置序列化类在初始化时应使用哪些字段，你可以创建这样一个序列化类，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许你执行以下操作：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十七)：Caching</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%83)%EF%BC%9ACaching.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%83)%EF%BC%9ACaching.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十七)：Caching</source>
      <description>目录 点击跳转到 Rest-Framework 专栏目录 (#点击跳转到-Rest-Framework-专栏目录); 将 cache 与 APIview 和 viewset 一起使用 (#将-cache-与-APIview-和-viewset-一起使用); 点击跳转到 Rest-Framework 专栏目录 (https://juejin.cn/pos...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十七)：Caching</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%88%B0-Rest-Framework-%E4%B8%93%E6%A0%8F%E7%9B%AE%E5%BD%95">点击跳转到 Rest-Framework 专栏目录</a></li>
<li><a href="#%E5%B0%86-cache-%E4%B8%8E-APIview-%E5%92%8C-viewset-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">将 cache 与 APIview 和 viewset 一起使用</a></li>
</ul>
<hr>
<h4> <a href="https://juejin.cn/post/6844904185163415566" title="点击跳转到 Rest-Framework 专栏目录" target="_blank" rel="noopener noreferrer">点击跳转到 Rest-Framework 专栏目录</a></h4>
<h3> 将 cache 与 APIview 和 viewset 一起使用</h3>
<p>Django提供了一个 <a href="https://link.juejin.cn/?target=https://docs.djangoproject.com/en/dev/topics/class-based-views/intro/#decorating-the-class" title="method_decorator" target="_blank" rel="noopener noreferrer">method_decorator</a> 来使用基于类的视图的装饰器, 这可以与其他缓存装饰器一起使用，例如 <a href="https://link.juejin.cn/?target=https://docs.djangoproject.com/en/dev/topics/cache/#the-per-view-cache" title="cache_page" target="_blank" rel="noopener noreferrer">cache_page</a> 和 <a href="https://link.juejin.cn/?target=https://docs.djangoproject.com/en/dev/topics/http/decorators/#django.views.decorators.vary.vary_on_cookie" title="vary_on_cookie" target="_blank" rel="noopener noreferrer">vary_on_cookie</a>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>cache_page decorator</code> 只缓存状态为 <code>200</code> 的 <code>GET</code> 和 <code>HEAD</code> 响应。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十三)：Serializer relations</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%89)%EF%BC%9ASerializer%20relations.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B8%89)%EF%BC%9ASerializer%20relations.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十三)：Serializer relations</source>
      <description>目录 Serializer 关系 (#Serializer-关系); 检查关系。 (#检查关系); API 参考 (#API-参考); StringRelatedField (#StringRelatedField); PrimaryKeyRelatedField (#PrimaryKeyRelatedField); HyperlinkedRelate...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十三)：Serializer relations</h1>
<h2> 目录</h2>
<ul>
<li><a href="#Serializer-%E5%85%B3%E7%B3%BB">Serializer 关系</a>
<ul>
<li><a href="#%E6%A3%80%E6%9F%A5%E5%85%B3%E7%B3%BB">检查关系。</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#StringRelatedField">StringRelatedField</a></li>
<li><a href="#PrimaryKeyRelatedField">PrimaryKeyRelatedField</a></li>
<li><a href="#HyperlinkedRelatedField">HyperlinkedRelatedField</a></li>
<li><a href="#SlugRelatedField">SlugRelatedField</a></li>
<li><a href="#HyperlinkedIdentityField">HyperlinkedIdentityField</a></li>
<li><a href="#%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BBNested-relationships">嵌套关系(Nested relationships)</a></li>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a>
<ul>
<li><a href="#%E5%8F%AF%E5%86%99%E7%9A%84%E5%B5%8C%E5%A5%97-serializerWritable-nested-serializers">可写的嵌套 serializer(Writable nested serializers)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5">自定义关系字段</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AD%97%E6%AE%B5">自定义超链接字段</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
<li><a href="#%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AF%B4%E6%98%8E">进一步说明</a>
<ul>
<li><a href="#queryset-%E5%8F%82%E6%95%B0">queryset 参数</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-HTML-%E6%98%BE%E7%A4%BA">自定义 HTML 显示</a></li>
<li><a href="#Select-field-cutoffs">Select field cutoffs</a></li>
<li><a href="#%E5%8F%8D%E5%90%91%E5%85%B3%E7%B3%BB">反向关系</a></li>
<li><a href="#%E9%80%9A%E7%94%A8%E5%85%B3%E7%B3%BB">通用关系</a></li>
<li><a href="#%E5%85%B7%E6%9C%89-Through-%E6%A8%A1%E5%9E%8B%E7%9A%84-ManyToManyFields">具有 Through 模型的 ManyToManyFields</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/relations/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/relations?id=serializer-%E5%85%B3%E7%B3%BB" title="Serializer 关系" target="_blank" rel="noopener noreferrer">Serializer 关系</a></h1>
<p>关系字段用于表示模型关系的数据字段, 它们可以应用到 <code>ForeignKey</code>、<code>ManyToManyField</code> 和 <code>OneToOneField</code>关系, 以及对反向关系、自定义关系等, 例如：<code>GenericForeignKey</code>。</p>
<blockquote>
<p><strong>注意：</strong> 关系字段在 <code>relations.py</code> 中声明，但按照惯例，你应该从 <code>serializers</code> 模块导入它们，使用 <code>from rest_framework import serializers</code> 引入，并像 <code>serializers.&lt;FieldName&gt;</code> 这样引用字段。</p>
</blockquote>
<h4> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E6%A3%80%E6%9F%A5%E5%85%B3%E7%B3%BB%E3%80%82" title="检查关系。" target="_blank" rel="noopener noreferrer">检查关系。</a></h4>
<p>在使用 <code>ModelSerializer</code> 类时，将自动为你生成序列化字段和关系。检查这些自动生成的字段可以学习如何定制关系风格。</p>
<p>为此，使用 <code>python manage.py shell</code> 打开 Django shell，然后导入序列化类，实例化它并打印对象表示形式...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/relations?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<p>为了解释各种类型的关系字段，我们将为我们的示例使用几个简单的模型。我们的模型将使用音乐专辑，以及每张专辑中列出的曲目。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> StringRelatedField</h3>
<p><code>StringRelatedField</code> 用于使用 <code>__unicode__</code> 方法表示关系。</p>
<p>例如，下面的序列化类。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为以下形式:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>🐍该字段是只读的。</p>
</blockquote>
<p><strong>参数</strong>:</p>
<ul>
<li><code>many</code> - 如果是一对多的关系，就将此参数设置为 <code>True</code>.</li>
</ul>
<h3> PrimaryKeyRelatedField</h3>
<p><code>PrimaryKeyRelatedField</code> 用于使用其主键表示关系。</p>
<p>例如，以下序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p>
<p><strong>参数</strong>:</p>
<ul>
<li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li>
<li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li>
<li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li>
<li><code>pk_field</code> - 设置为一个字段来控制主键值的序列化/反序列化。例如， <code>pk_field=UUIDField(format='hex')</code> 会将 UUID 主键序列化为其紧凑的十六进制表示形式。</li>
</ul>
<h3> HyperlinkedRelatedField</h3>
<p><code>HyperlinkedRelatedField</code> 用于使用超链接来表示关系。</p>
<p>例如，以下序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p>
<hr>
<p><strong>注意</strong>：该字段是为映射到接受单个 URL 关键字参数的 URL 的对象而设计的，如使用 <code>lookup_field</code> 和 <code>lookup_url_kwarg</code> 参数设置的对象。</p>
<p>这适用于包含单个主键或 slug 参数作为 URL 一部分的 URL。</p>
<p>如果需要更复杂的超链接表示，你需要自定义该字段，稍后会详解。</p>
<hr>
<p><strong>参数</strong>：</p>
<ul>
<li><code>view_name</code> - 用作关系目标的视图名称。如果你使用的是标准路由器类，则这将是一个格式为 <code>&lt;modelname&gt;-detail</code> 的字符串。<strong>必填</strong>.</li>
<li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li>
<li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li>
<li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li>
<li><code>lookup_field</code> - 用于查找的目标字段。对应于引用视图上的 URL 关键字参数。默认是 <code>'pk'</code>.</li>
<li><code>lookup_url_kwarg</code> - 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 <code>lookup_field</code> 相同的值。</li>
<li><code>format</code> - 如果使用格式后缀，则超链接字段将使用与目标相同的格式后缀，除非使用 <code>format</code> 参数进行覆盖。</li>
</ul>
<h3> SlugRelatedField</h3>
<p><code>SlugRelatedField</code> 用于使用目标上的字段来表示关系。</p>
<p>例如，以下序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段是可读写的，但您可以使用 <code>read_only</code> 标志更改此行为。</p>
<p>将 <code>SlugRelatedField</code> 用作读写字段时，通常需要确保 slug 字段与 <code>unique=True</code> 的模型字段相对应。</p>
<p><strong>参数</strong>：</p>
<ul>
<li><code>slug_field</code> - 用来表示目标的字段。这应该是唯一标识给定实例的字段。例如， <code>username</code>。<strong>必填</strong></li>
<li><code>queryset</code> - 验证字段输入时用于模型实例查询的查询集。必须显式地设置查询集，或设置 <code>read_only=True</code>。</li>
<li><code>many</code> - 如果应用于一对多关系，则应将此参数设置为 <code>True</code>。</li>
<li><code>allow_null</code> - 如果设置为 <code>True</code>，那么该字段将接受 <code>None</code> 值或可为空的关系的空字符串。默认为 <code>False</code>。</li>
</ul>
<h3> HyperlinkedIdentityField</h3>
<p>此字段可以作为身份关系应用，例如 <code>HyperlinkedModelSerializer</code> 上的 <code>'url'</code> 字段。它也可以用于对象的属性。例如，以下序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该字段始终为只读。</p>
<p><strong>参数</strong>：</p>
<ul>
<li><code>view_name</code> - 用作关系目标的视图名称。如果你使用的是标准路由器类，则这将是一个格式为 <code>&lt;modelname&gt;-detail</code> 的字符串。<strong>必填</strong>。</li>
<li><code>lookup_field</code> - 用于查找的目标字段。对应于引用视图上的 URL 关键字参数。默认是 <code>'pk'</code>。</li>
<li><code>lookup_url_kwarg</code> - 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 <code>lookup_field</code> 相同的值。</li>
<li><code>format</code> - 如果使用格式后缀，则超链接字段将使用与目标相同的格式后缀，除非使用 <code>format</code> 参数进行覆盖。</li>
</ul>
<h3> 嵌套关系(Nested relationships)</h3>
<p>嵌套关系可以通过使用序列化类作为字段来表达。</p>
<p>如果该字段用于表示一对多关系，则应将 <code>many=True</code> 标志添加到序列化字段。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>例如，以下序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的嵌套表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 可写的嵌套 serializer(Writable nested serializers)</h3>
<p>默认情况下，嵌套序列化类是只读的。如果要支持对嵌套序列化字段的写操作，则需要创建 <code>create()</code> 和/或 <code>update()</code> 方法，以明确指定应如何保存子关系。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5" title="自定义关系字段" target="_blank" rel="noopener noreferrer">自定义关系字段</a></h1>
<p>在极少数情况下，现有的关系类型都不符合您需要的表示形式，你可以实现一个完全自定义的关系字段，该字段准确描述应该如何从模型实例生成输出表示。</p>
<p>要实现自定义关系字段，您应该重写 <code>RelatedField</code>，并实现 <code>.to_representation(self, value)</code> 方法。此方法将字段的目标作为 <code>value</code> 参数，并返回应用于序列化目标的表示。<code>value</code> 参数通常是一个模型实例。</p>
<p>如果要实现读写关系字段，则还必须实现 <code>.to_internal_value(self, data)</code> 方法。</p>
<p>要提供基于 <code>context</code> 的动态查询集，还可以覆盖 <code>.get_queryset(self)</code>，而不是在类上指定 <code>.queryset</code> 或初始化该字段。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-1" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>例如，我们可以定义一个关系字段，使用它的顺序，标题和持续时间将音轨序列化为自定义字符串表示。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将序列化为这样的表示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AD%97%E6%AE%B5" title="自定义超链接字段" target="_blank" rel="noopener noreferrer">自定义超链接字段</a></h1>
<p>在某些情况下，您可能需要自定义超链接字段的行为，以表示需要多个查询字段的 URL。</p>
<p>您可以通过继承 <code>HyperlinkedRelatedField</code> 来实现此目的。有两个可以被覆盖的方法：</p>
<p><strong>get_url(self, obj, view_name, request, format)</strong></p>
<p><code>get_url</code> 方法用于将对象实例映射到其 URL 表示。</p>
<p>如果 <code>view_name</code> 和 <code>lookup_field</code> 属性未配置为正确匹配 URL conf，可能会引发 <code>NoReverseMatch</code> 。</p>
<p><strong>get_object(self, queryset, view_name, view_args, view_kwargs)</strong></p>
<p>如果您想支持可写的超链接字段，那么您还需要重写 <code>get_object</code>，以便将传入的 URL 映射回它们表示的对象。对于只读超链接字段，不需要重写此方法。</p>
<p>此方法的返回值应该是与匹配的 URL conf 参数对应的对象。</p>
<p>可能会引发 <code>ObjectDoesNotExist</code> 异常。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-2" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>假设我们有一个带有两个关键字参数的 customer 对象的 URL，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这没办法用仅接受单个查找字段的默认实现来表示。</p>
<p>在这种情况下，我们需要继承 <code>HyperlinkedRelatedField</code> 并重写其中的方法来获得我们想要的行为：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果您想将此风格与通用视图一起使用，那么您还需要覆盖视图上的 <code>.get_object</code> 以获得正确的查找行为。</p>
<p>一般来说，我们建议尽可能在 API 表示方式下使用平面风格，但嵌套 URL 风格在适度使用时也是合理的。</p>
<hr>
<h1> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AF%B4%E6%98%8E" title="进一步说明" target="_blank" rel="noopener noreferrer">进一步说明</a></h1>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=queryset-%E5%8F%82%E6%95%B0" title="queryset" target="_blank" rel="noopener noreferrer">queryset</a><a href="http://drf.jiuyou.info/#/drf/relations?id=queryset-%E5%8F%82%E6%95%B0" title=" 参数" target="_blank" rel="noopener noreferrer"> 参数</a></h2>
<p><code>queryset</code> 参数只对可写关系字段是必需的，在这种情况下，它用于执行模型实例查找，该查找从基本用户输入映射到模型实例。</p>
<p>在 2.x 版本中，如果正在使用 <code>ModelSerializer</code> 类，则序列化类有时会自动确定 <code>queryset</code> 参数。</p>
<p>此行为现在替换为始终为可写关系字段使用显式 <code>queryset</code> 参数。</p>
<p>这样做可以减少 <code>ModelSerializer</code> 提供的隐藏 “魔术” 数量（指 <code>ModelSerializer</code> 在内部帮我们完成的工作），使字段的行为更加清晰，并确保在使用 <code>ModelSerializer</code> 快捷方式（高度封装过，使用简单）或使用完全显式的 <code>Serializer</code> 类之间转换是微不足道的。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E8%87%AA%E5%AE%9A%E4%B9%89-html-%E6%98%BE%E7%A4%BA" title="自定义 HTML 显示" target="_blank" rel="noopener noreferrer">自定义 HTML 显示</a></h2>
<p>模型内置的 <code>__str__</code> 方法用来生成用于填充 <code>choices</code> 属性的对象的字符串表示形式。这些 choices 用于在可浏览的 API 中填充选择的 HTML input。</p>
<p>要为这些 input 提供自定义表示，请重写 <code>RelatedField</code> 子类的 <code>display_value()</code> 方法。这个方法将接收一个模型对象，并且应该返回一个适合表示它的字符串。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=select-field-cutoffs" title="Select field cutoffs" target="_blank" rel="noopener noreferrer">Select field cutoffs</a></h2>
<p>在渲染可浏览的 API 关系字段时，默认只显示最多 1000 个可选 item。如果存在更多项目，则会显示 "More than 1000 items…" 的 disabled 选项。</p>
<p>此行为旨在防止由于显示大量关系而导致模板无法在可接受的时间范围内完成渲染。</p>
<p>有两个关键字参数可用于控制此行为：</p>
<ul>
<li><code>html_cutoff</code> - 设置 HTML select 下拉菜单中显示的选项的最大数量。设置为 <code>None</code> 可以禁用任何限制。默认为 <code>1000</code>。</li>
<li><code>html_cutoff_text</code> - 设置一个文本字符串，在 HTML select 下拉菜单超出最大显示数量时显示。默认是 <code>"More than {count} items…"</code></li>
</ul>
<p>你还可以在 settings 中用 <code>HTML_SELECT_CUTOFF</code> 和 <code>HTML_SELECT_CUTOFF_TEXT</code> 来全局控制这些设置。</p>
<p>在强制执行 cutoff 的情况下，您可能希望改为在 HTML 表单中使用简单的 input 字段。你可以使用 <code>style</code> 关键字参数来做到这一点。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E5%8F%8D%E5%90%91%E5%85%B3%E7%B3%BB" title="反向关系" target="_blank" rel="noopener noreferrer">反向关系</a></h2>
<p>请注意，反向关系不会自动包含在 <code>ModelSerializer</code> 和 <code>HyperlinkedModelSerializer</code> 类中。要包含反向关系，您必须明确将其添加到字段列表中。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常需要确保已经在关系上设置了适当的 <code>related_name</code> 参数，可以将其用作字段名称。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你还没有为反向关系设置相关名称，则需要在 <code>fields</code> 参数中使用自动生成的相关名称。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>有关更多详细信息，请参阅有关<a href="https://docs.djangoproject.com/en/stable/topics/db/queries/#following-relationships-backward" title="反向关系" target="_blank" rel="noopener noreferrer">反向关系</a>的 Django 文档。</p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E9%80%9A%E7%94%A8%E5%85%B3%E7%B3%BB" title="通用关系" target="_blank" rel="noopener noreferrer">通用关系</a></h2>
<p>如果要序列化通用外键，则需要自定义字段，以明确确定如何序列化关系。</p>
<p>例如，给定一个以下模型的标签，该标签与其他任意模型具有通用关系：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下两种模式可以用相关的标签：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以定义一个可用于序列化标签实例的自定义字段，并使用每个实例的类型来确定它应该如何序列化。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要的关系具有嵌套表示，则可以在 <code>.to_representation()</code> 方法中使用所需的序列化类：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，使用 <code>GenericRelation</code> 字段表示的反向通用键可以使用常规关系字段类型进行序列化，因为关系中目标的类型总是已知的。</p>
<blockquote>
<p>有关更多信息，请参阅<a href="https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/#id1" title="有关泛型关系的 Django 文档" target="_blank" rel="noopener noreferrer">有关泛型关系的 Django 文档</a>。</p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/relations?id=%E5%85%B7%E6%9C%89-through-%E6%A8%A1%E5%9E%8B%E7%9A%84-manytomanyfields" title="具有 Through 模型的 ManyToManyFields" target="_blank" rel="noopener noreferrer">具有 Through 模型的 ManyToManyFields</a></h2>
<p>默认情况下，将指定带有 <code>through</code> 模型的 <code>ManyToManyField</code> 的关系字段设置为只读。</p>
<p>如果你要明确指定一个指向具有 through 模型的 <code>ManyToManyField</code> 的关系字段，请确保将 <code>read_only</code> 设置为 <code>True</code> 。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十九)：Filtering</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B9%9D)%EF%BC%9AFiltering.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%B9%9D)%EF%BC%9AFiltering.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十九)：Filtering</source>
      <description>目录 过滤 (#过滤); 根据当前用户进行过滤 (#根据当前用户进行过滤); 根据 URL 进行过滤 (#根据-URL-进行过滤); 根据查询参数进行过滤 (#根据查询参数进行过滤); 通用过滤器 (#通用过滤器); 设置过滤器后端 (#设置过滤器后端); 过滤和对象查找 (#过滤和对象查找); 覆盖初始查询集 (#覆盖初始查询集); 过滤器API 参...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十九)：Filtering</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E8%BF%87%E6%BB%A4">过滤</a>
<ul>
<li><a href="#%E6%A0%B9%E6%8D%AE%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据当前用户进行过滤</a></li>
<li><a href="#%E6%A0%B9%E6%8D%AE-URL-%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据 URL 进行过滤</a></li>
<li><a href="#%E6%A0%B9%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">根据查询参数进行过滤</a></li>
</ul>
</li>
<li><a href="#%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8">通用过滤器</a>
<ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%90%8E%E7%AB%AF">设置过滤器后端</a></li>
<li><a href="#%E8%BF%87%E6%BB%A4%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%9F%A5%E6%89%BE">过滤和对象查找</a></li>
<li><a href="#%E8%A6%86%E7%9B%96%E5%88%9D%E5%A7%8B%E6%9F%A5%E8%AF%A2%E9%9B%86">覆盖初始查询集</a></li>
</ul>
</li>
<li><a href="#%E8%BF%87%E6%BB%A4%E5%99%A8API-%E5%8F%82%E8%80%83">过滤器API 参考</a>
<ul>
<li><a href="#DjangoFilterBackend">DjangoFilterBackend</a></li>
<li><a href="#SearchFilter">SearchFilter</a></li>
<li><a href="#OrderingFilter">OrderingFilter</a>
<ul>
<li><a href="#%E6%8C%87%E5%AE%9A%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F">指定可以根据哪些字段进行排序</a></li>
<li><a href="#%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F">指定默认顺序</a></li>
</ul>
</li>
<li><a href="#DjangoObjectPermissionsFilter">DjangoObjectPermissionsFilter</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8">自定义通用过滤器</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3">自定义接口</a></li>
<li><a href="#Pagination--schemas">Pagination &amp; schemas</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">第三方库</a>
<ul>
<li><a href="#Django-REST%E6%A1%86%E6%9E%B6%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BD%AF%E4%BB%B6%E5%8C%85">Django REST框架过滤器软件包</a></li>
<li><a href="#Django-REST%E6%A1%86%E6%9E%B6%E5%85%A8%E5%AD%97%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E5%99%A8">Django REST框架全字搜索过滤器</a></li>
<li><a href="#Django-URL%E8%BF%87%E6%BB%A4%E5%99%A8">Django URL过滤器</a></li>
<li><a href="#drf-url-filters">drf-url-filters</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/filtering/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%BF%87%E6%BB%A4" title="过滤" target="_blank" rel="noopener noreferrer">过滤</a></h1>
<p>REST framework 的通用列表视图的默认行为是从模型管理器返回整个查询集。通常你会希望 API 限制查询集返回的条目。</p>
<p>筛选 <code>GenericAPIView</code> 子类的查询集的最简单方法是重写 <code>.get_queryset()</code> 方法。</p>
<p>重写此方法允许你以多种不同方式自定义视图返回的查询集。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4" title="根据当前用户进行过滤" target="_blank" rel="noopener noreferrer">根据当前用户进行过滤</a></h2>
<p>你可能需要过滤查询集，以确保只返回与当前通过身份验证的用户发出的请求相关的结果。</p>
<p>你可以基于 <code>request.user</code> 的值进行筛选来完成此操作。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE-url-%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4" title="根据 URL 进行过滤" target="_blank" rel="noopener noreferrer">根据 URL 进行过滤</a></h2>
<p>另一种过滤方式可能涉及基于 URL 的某个部分限制查询集。</p>
<p>例如，如果你的 URL 配置包含这样的条目：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，你可以编写一个视图，返回由 URL 的用户名部分过滤的 purchase 查询集：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E6%A0%B9%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4" title="根据查询参数进行过滤" target="_blank" rel="noopener noreferrer">根据查询参数进行过滤</a></h2>
<p>过滤初始查询集的最后一个例子是根据 url 中的查询参数确定初始查询集。</p>
<p>我们可以覆盖 <code>.get_queryset()</code> 来处理诸如 <code>http://example.com/api/purchases?username=denvercoder9</code> 的URL，并且只有在 URL 中包含 <code>username</code> 参数时才过滤查询集：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8" title="通用过滤器" target="_blank" rel="noopener noreferrer">通用过滤器</a></h1>
<p>除了能够覆盖默认的查询集外，REST framework 还包括对通用过滤后端的支持，使你可以轻松构建复杂的搜索和过滤器。</p>
<p>通用过滤器也可以在可浏览的 API 和管理 API 中将自己渲染为 HTML 控件。</p>
<figure><figcaption></figcaption></figure>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E5%90%8E%E7%AB%AF" title="设置过滤器后端" target="_blank" rel="noopener noreferrer">设置过滤器后端</a></h2>
<p>可以使用 <code>DEFAULT_FILTER_BACKENDS</code> setting <code>全局设置默认的过滤器后端</code>。例如。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用基于 <code>GenericAPIView</code> 类的视图，在每个视图或视图集的基础上设置过滤器后端。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%BF%87%E6%BB%A4%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%9F%A5%E6%89%BE" title="过滤和对象查找" target="_blank" rel="noopener noreferrer">过滤和对象查找</a></h2>
<p>请注意，如果为一个视图配置了一个过滤器后端，那么除了用于筛选列表视图之外，它还将用于筛选返回单个对象的查询集。</p>
<p>例如，根据前面的示例以及 ID 为 <code>4675</code> 的产品，以下 URL 将返回相应的对象，或返回 404 响应，具体取决于给定产品实例是否满足过滤条件：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%A6%86%E7%9B%96%E5%88%9D%E5%A7%8B%E6%9F%A5%E8%AF%A2%E9%9B%86" title="覆盖初始查询集" target="_blank" rel="noopener noreferrer">覆盖初始查询集</a></h2>
<p>请注意，你可以同时重写的 <code>.get_queryset()</code> 和通用过滤，并且所有内容都将按预期工作。例如，如果产品与用户具有多对多关系，则可能需要编写一个如下所示的视图：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 过滤器<a href="http://drf.jiuyou.info/#/drf/filtering?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h3> DjangoFilterBackend</h3>
<p><code>django-filter</code> 库包含一个 <code>DjangoFilterBackend</code> 类，它支持 REST framework 对字段过滤进行高度定制。</p>
<p>要使用 <code>DjangoFilterBackend</code>，首先安装 <code>django-filter</code>。然后将 <code>django_filters</code> 添加到 Django 的 <code>INSTALLED_APPS</code> 中</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后添加 <code>'django_filters'</code> 到 Django 的 <code>INSTALLED_APPS</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你现在应该将过滤器后端添加到设置中：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者将过滤器后端添加到单个视图或视图集。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你只需要简单的基于等式的过滤，则可以在视图或视图集上设置 <code>filter_fields</code> 属性，列出你要过滤的一组字段。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将自动为给定字段创建一个 <code>FilterSet</code> 类，并允许你发出如下请求：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于更高级的过滤要求，你应该在视图上在指定 <code>FilterSet</code> 类。你可以在 <a href="https://django-filter.readthedocs.io/en/latest/index.html" title="django-filter 文档" target="_blank" rel="noopener noreferrer">django-filter 文档</a>中阅读有关 <code>FilterSet</code> 的更多信息。还建议你阅读 <a href="https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html" title="DRF integration" target="_blank" rel="noopener noreferrer">DRF integration</a>。</p>
<h3> SearchFilter</h3>
<p><code>SearchFilter</code> 类支持简单的基于单个查询参数的搜索，并且基于 Django 管理员的搜索功能。</p>
<p>在使用时，可浏览的 API 将包含一个 <code>SearchFilter</code> 控件：</p>
<figure><figcaption></figcaption></figure>
<p><code>SearchFilter</code> 类将仅在视图具有 <code>search_fields</code> 属性集的情况下应用。<code>search_fields</code> 属性应该是模型上文本类型字段的名称列表，例如 <code>CharField</code> 或 <code>TextField</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许客户端通过查询来过滤列表中的项目，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你还可以使用查找 API 双下划线表示法对 ForeignKey 或 ManyToManyField 执行相关查找：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于 <code>JSONField</code> 和 <code>HStoreField</code> 字段, 您可以使用相同的双下划线符号根据数据结构内的嵌套值进行过滤(就是高级)：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>默认情况下，搜索将使用不区分大小写的部分匹配。搜索参数可能包含多个搜索词，它们应该是空格和（或）逗号分隔的。如果使用多个搜索条件，则只有在所有提供的条件匹配的情况下，对象才会返回到列表中。</p>
</blockquote>
<p>搜索行为可以通过将各种字符预先添加到 <code>search_fields</code> 来限制。</p>
<ul>
<li><code>^</code>：匹配起始部分。</li>
<li><code>=</code>：完全匹配。</li>
<li><code>@</code>：全文搜索。（目前只支持 Django 的 MySQL 后端。）</li>
<li><code>$</code>：正则匹配。</li>
</ul>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>🐍默认情况下，搜索参数被命名为 <code>search</code> ，但这可能会被 <code>SEARCH_PARAM</code> 配置覆盖。</p>
</blockquote>
<p>要根据请求内容动态更改搜索字段, 可以对进行 <code>SearchFilter</code> 子类化并覆盖该 <code>get_search_fields()</code> 函数, 例如以下子类仅在查询参数 <code>title_only</code> 在请求中时才搜索 <code>title</code>：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>有关更多详细信息，请参阅 <a href="https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields" title="Django 文档" target="_blank" rel="noopener noreferrer">Django 文档</a>。</p>
</blockquote>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=orderingfilter" title="OrderingFilter" target="_blank" rel="noopener noreferrer">OrderingFilter</a></h2>
<p><code>OrderingFilter</code> 类支持简单查询参数控制结果的排序。</p>
<figure><figcaption></figcaption></figure>
<p>默认情况下，查询参数被命名为 <code>ordering</code>，但这可能会被 <code>ORDERING_PARAM</code> 配置覆盖。</p>
<p>例如，要通过 username 对用户排序：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端也可以通过在字段名称前添加 <code>-</code> 来指定相反的顺序, 如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以指定多个排序：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E6%8C%87%E5%AE%9A%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F" title="指定可以根据哪些字段进行排序" target="_blank" rel="noopener noreferrer">指定可以根据哪些字段进行排序</a></h3>
<p>建议你明确指定 API 应该允许在排序过滤器中使用哪些字段。你可以通过在视图上设置一个 <code>ordering_fields</code> 属性来完成此操作，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这有助于防止意外的数据泄漏，例如：允许用户根据密码哈希字段或其他敏感数据进行排序。</p>
<p>如果你未在视图上指定 <code>ordering_fields</code> 属性，则过滤器类将默认允许用户过滤由 <code>serializer_class</code> 属性指定的序列化类中的任何可读字段。</p>
<p>如果你确信视图使用的查询集不包含任何敏感数据，则还可以通过使用特殊值 <code>'__all__'</code> 明确指定视图允许在任何模型字段或查询集聚合上进行排序。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F" title="指定默认顺序" target="_blank" rel="noopener noreferrer">指定默认顺序</a></h3>
<p>如果在视图上设置了 <code>ordering</code> 属性，则将用作默认排序。</p>
<p>通常情况下，你应该通过在初始查询集上设置 <code>order_by</code> 来控制此操作，但是通过在视图上使用 <code>ordering</code> 参数，你可以指定排序方式，然后可以将其作为上下文自动传递到渲染的模板。这可以自动渲染列标题，如果它们用于排序结果。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ordering</code> 属性可以是一个字符串或者字符串列表（元组）。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=djangoobjectpermissionsfilter" title="DjangoObjectPermissionsFilter" target="_blank" rel="noopener noreferrer">DjangoObjectPermissionsFilter</a></h2>
<p><code>DjangoObjectPermissionsFilter</code> 旨在与 <a href="https://django-guardian.readthedocs.io/" title="django-guardian" target="_blank" rel="noopener noreferrer">django-guardian</a> 软件包一起使用，添加了自定义 <code>'view'</code> 的权限。过滤器将确保查询集仅返回用户具有适当查看权限的对象。</p>
<p>如果你使用的是 <code>DjangoObjectPermissionsFilter</code>，那么你可能还需要添加适当的对象权限类，以确保用户只有在具有适当对象权限的情况下才能对实例进行操作。做到这一点的最简单方法是继承 <code>DjangoObjectPermissions</code> 并为 <code>perms_map</code> 属性添加 <code>'view'</code> 权限。</p>
<p>使用 <code>DjangoObjectPermissionsFilter</code> 和 <code>DjangoObjectPermissions</code> 的完整示例可能如下所示。</p>
<p><a href="http://permissions.py" title="permissions.py" target="_blank" rel="noopener noreferrer"><strong>permissions.py</strong></a>:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://views.py" title="views.py" target="_blank" rel="noopener noreferrer">views.py</a>:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8" title="自定义通用过滤器" target="_blank" rel="noopener noreferrer">自定义通用过滤器</a></h1>
<p>你还可以提供自己的通用过滤器后端，或者编写一个可供其他开发人员使用的可安装应用程序。</p>
<p>为此，请继承 <code>BaseFilterBackend</code>，并覆盖 <code>.filter_queryset(self, request, queryset, view)</code> 方法。该方法应该返回一个新的，过滤的查询集。</p>
<p>除了允许客户端执行搜索和过滤外，通用过滤器后端可用于限制哪些对象应该对给定的请求或用户可见。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>你可能需要限制用户只能看到他们创建的对象。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3" title="自定义接口" target="_blank" rel="noopener noreferrer">自定义接口</a></h2>
<p>通用过滤器也可以在可浏览的 API 中渲染接口。为此，你应该实现一个 <code>to_html()</code> 方法，该方法返回过滤器的渲染 HTML 表示。此方法应具有以下签名：</p>
<p><code>to_html(self, request, queryset, view)</code></p>
<p>该方法应该返回一个渲染的 HTML 字符串。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/filtering?id=pagination-amp-schemas" title="Pagination &amp; schemas" target="_blank" rel="noopener noreferrer">Pagination &amp; schemas</a></h2>
<p>通过实现 <code>get_schema_fields()</code> 方法，你还可以使过滤器控件可用于 REST framework 提供的模式自动生成。此方法应具有以下签名：</p>
<p><code>get_schema_fields(self, view)</code></p>
<p>该方法应该返回一个 <code>coreapi.Field</code> 实例列表。</p>
<h2> 第三方库</h2>
<h3> Django REST框架过滤器软件包</h3>
<p>在 <a href="https://link.juejin.cn/?target=https://github.com/philipn/django-rest-framework-filters" title="Django 框架过滤器" target="_blank" rel="noopener noreferrer">Django 框架过滤器</a>封装与 <code>DjangoFilterBackend</code> 类一起工作, 并允许您轻松地在跨关系的创建过滤器, 或在指定字段创建多个过滤器查找类型。</p>
<h3> Django REST框架全字搜索过滤器</h3>
<p><a href="https://link.juejin.cn/?target=https://github.com/trollknurr/django-rest-framework-word-search-filter" title="djangorestframework-word-filter" target="_blank" rel="noopener noreferrer">djangorestframework-word-filter</a>作为 <code>filter.SearchFilter</code> 替代品, 它将在文本中搜索完整的单词或完全匹配。</p>
<h3> Django URL过滤器</h3>
<p><a href="https://link.juejin.cn/?target=https://github.com/miki725/django-url-filter" title="django-url-filter" target="_blank" rel="noopener noreferrer">django-url-filter</a> 提供了一种通过友好的 url 过滤数据的安全方法, 它的工作原理与 DRF 序列化程序和字段非常相似, 在某种意义上它们可以嵌套, 但它们被称为 <code>filtersets</code>和 <code>filters</code>, 这提供了过滤相关数据的简单方法, 而且这个库也是通用的, 所以它可以用来过滤其他数据源, 而不仅仅是 Django <code>QuerySet</code>。</p>
<h3> drf-url-filters</h3>
<p><a href="https://link.juejin.cn/?target=https://github.com/manjitkumar/drf-url-filters" title="DRF-URL-Filters" target="_blank" rel="noopener noreferrer">DRF-URL-Filters</a> 是一个简单的 Django 应用程序, 它以干净、简单和可配置的方式在 <code>drfmodelviewset</code> 的 <code>Queryset</code> 上应用过滤器, 它还支持对传入查询参数的验证, 一个漂亮的 python 包 <code>Voluptuous</code> 用于对传入的查询参数进行验证, 关于 <code>Voluptuous</code> 的最好的部分是您可以根据查询参数要求定义自己的验证。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十二)：Serializer fields</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%BA%8C)%EF%BC%9ASerializer%20fields.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%BA%8C)%EF%BC%9ASerializer%20fields.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十二)：Serializer fields</source>
      <description>目录 Serializer 字段 (#Serializer-字段); 核心参数 (#核心参数); read\_only (#read_only); write\_only (#write_only); required (#required); allow\_null (#allow_null); default (#default); source ...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十二)：Serializer fields</h1>
<h2> 目录</h2>
<ul>
<li><a href="#Serializer-%E5%AD%97%E6%AE%B5">Serializer 字段</a>
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a>
<ul>
<li><a href="#read_only">read_only</a></li>
<li><a href="#write_only">write_only</a></li>
<li><a href="#required">required</a></li>
<li><a href="#allow_null">allow_null</a></li>
<li><a href="#default">default</a></li>
<li><a href="#source">source</a></li>
<li><a href="#validators">validators</a></li>
<li><a href="#error_messages">error_messages</a></li>
<li><a href="#label">label</a></li>
<li><a href="#help_text">help_text</a></li>
<li><a href="#initial">initial</a></li>
<li><a href="#style">style</a></li>
</ul>
</li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">序列化字段类型</a>
<ul>
<li><a href="#BooleanField">BooleanField</a></li>
<li><a href="#NullBooleanField">NullBooleanField</a></li>
<li><a href="#CharField">CharField</a></li>
<li><a href="#EmailField">EmailField</a></li>
<li><a href="#RegexField">RegexField</a></li>
<li><a href="#SlugField">SlugField</a></li>
<li><a href="#URLField">URLField</a></li>
<li><a href="#UUIDField">UUIDField</a></li>
<li><a href="#FilePathField">FilePathField</a></li>
<li><a href="#IPAddressField">IPAddressField</a></li>
<li><a href="#IntegerField">IntegerField</a></li>
<li><a href="#FloatField">FloatField</a></li>
<li><a href="#DecimalField">DecimalField</a>
<ul>
<li><a href="#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B">用法示例</a></li>
</ul>
</li>
<li><a href="#DateTimeField">DateTimeField</a>
<ul>
<li><a href="#DateTimeField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">DateTimeField 格式化字符串。</a></li>
<li><a href="#auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5">auto_now 和 auto_now_add 模型字段。</a></li>
</ul>
</li>
<li><a href="#DateField">DateField</a>
<ul>
<li><a href="#DateField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">DateField 格式化字符串</a></li>
</ul>
</li>
<li><a href="#TimeField">TimeField</a>
<ul>
<li><a href="#TimeField-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">TimeField 格式化字符串</a></li>
</ul>
</li>
<li><a href="#DurationField">DurationField</a></li>
<li><a href="#ChoiceField">ChoiceField</a></li>
<li><a href="#MultipleChoiceField">MultipleChoiceField</a></li>
<li><a href="#FileField">FileField</a></li>
<li><a href="#ImageField">ImageField</a></li>
<li><a href="#ListField">ListField</a></li>
<li><a href="#DictField">DictField</a></li>
<li><a href="#HStoreField">HStoreField</a></li>
<li><a href="#JSONField">JSONField</a></li>
<li><a href="#ReadOnlyField">ReadOnlyField</a></li>
<li><a href="#HiddenField">HiddenField</a></li>
<li><a href="#ModelField">ModelField</a></li>
<li><a href="#SerializerMethodField">SerializerMethodField</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5">自定义字段</a>
<ul>
<li><a href="#%E7%9C%8B%E5%87%A0%E4%B8%AA%E6%A0%97%E5%AD%90">看几个栗子</a>
<ul>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5">基本的自定义字段</a></li>
<li><a href="#%E6%8A%9B%E5%87%BA%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF">抛出验证错误</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-source">使用 source=' *'</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/fields/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/fields?id=serializer-%E5%AD%97%E6%AE%B5" title="Serializer 字段" target="_blank" rel="noopener noreferrer">Serializer 字段</a></h1>
<blockquote>
<p>Form 类中的每个字段不仅负责验证数据，还负责 “清洗” 它 — 将其规范化为一致的格式。<br>
— <a href="https://docs.djangoproject.com/en/stable/ref/forms/api/#django.forms.Form.cleaned_data" title="Django 文档" target="_blank" rel="noopener noreferrer">Django 文档</a></p>
</blockquote>
<p>序列化字段<code>处理基本数据类型和其他数据类型（比如自定义的类）之间的转换</code>。它们还可以<code>对数据进行验证</code>，以及<code>从其父对象中检索</code>和<code>设置值</code>。</p>
<hr>
<p><strong>注意：</strong> 序列化字段都声明在 <code>fields.py</code> 中，但按照惯例，应该使用 <code>from rest_framework import serializers</code> ，并用 <code>serializers.&lt;FieldName&gt;</code> 的方式引用。</p>
<p>对于框架而言, 序列化器不仅仅是对需要参数的声明, 更是参数校验和标准化输出的策略, 所以对此, 你需要严格按照你的开发实际情况声明好你的字段约束。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0" title="核心参数" target="_blank" rel="noopener noreferrer">核心参数</a></h2>
<p>每个序列化字段类的构造函数都需要一些参数。某些字段类需要附加特定于该字段的参数，但应始终接受以下参数：</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=read_only" title="read_only" target="_blank" rel="noopener noreferrer">read_only</a></h3>
<p>只读字段包含于输出 API 中，不应该包含在需要创建或更新操作的输入 API 中。在序列化类输入中错误的包含 'read_only' 会被忽略。</p>
<p>将其设置为 <code>True</code> 可确保在序列化表示时使用该字段，但在反序列化期间创建或更新实例时不使用该字段。</p>
<p>默认为 <code>False</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=write_only" title="write_only" target="_blank" rel="noopener noreferrer">write_only</a></h3>
<p>将其设置为 <code>True</code> 以确保在更新或创建实例时可以使用该字段，但在序列化表示时不包括该字段。</p>
<p>默认为 <code>False</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=required" title="required" target="_blank" rel="noopener noreferrer">required</a></h3>
<p>如果在反序列化过程中没有该提供字段，通常会出现错误。如果在反序列化过程中不需要此字段，则应该设置为 false。</p>
<p>将此设置为 <code>False</code> 还允许在序列化实例时从输出中省略对象属性或字典密钥。如果密钥不存在，它将不会包含在输出表示中。</p>
<p>默认为 <code>True</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=allow_null" title="allow_null" target="_blank" rel="noopener noreferrer">allow_null</a></h3>
<p>如果把 <code>None</code> 传递给序列化字段，通常会引发错误。如果 <code>None</code> 应被视为有效值，则将此关键字参数设置为 <code>True</code> 。</p>
<p>请注意，将此参数设置为 <code>True</code> 将意味着序列化输出的缺省值为 <code>null</code>，但并不意味着输入反序列化的缺省值。</p>
<p>默认为 <code>False</code></p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=default" title="default" target="_blank" rel="noopener noreferrer">default</a></h3>
<p>如果设置，则会给出默认值，在没有提供输入值时，将使用该默认值。如果未设置，则默认行为是不填充该属性。</p>
<p>部分更新操作时不应该使用 <code>default</code>。因为有些情况下，只有传入数据中提供的字段才会返回验证值。</p>
<p>可以设置为函数或其他可调用的对象，在这种情况下，每次使用该值时都会对其进行调用。被调用时，它将不会收到任何参数。如果可调用对象具有 <code>set_context</code> 方法，那么在每次将字段实例作为参数获取值之前都会调用该方法。这与验证器的工作方式相同。</p>
<p>在序列化实例时，如果对象属性或字典关键字不存在于实例中，将使用缺省值。</p>
<p>请注意，设置默认值意味着该字段不是必需的。同时包括 <code>default</code> 和 <code>required</code> 的关键字参数都是无效的，会引发错误。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=source" title="source" target="_blank" rel="noopener noreferrer">source</a></h3>
<p>将用于填充字段的属性的名称。可以是一个只接受 <code>self</code> 参数的方法，如 <code>URLField(source='get_absolute_url')</code>，或者使用点符号来遍历属性，如 <code>EmailField(source='user.email')</code>。在使用点符号时，如果在属性遍历期间任何对象不存在或为空，则可能需要提供缺省值。</p>
<p><code>source ='*'</code> 具有特殊含义，用于表示整个对象应该传递到该字段。这对创建嵌套表示或对于需要访问完整对象以确定输出表示的字段非常有用。</p>
<p>默认为该字段的名称。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=validators" title="validators" target="_blank" rel="noopener noreferrer">validators</a></h3>
<p>应该应用于传入字段输入的验证函数列表，该列表中的函数应该引发验证错误或仅返回。验证器函数通常应该引发 <code>serializers.ValidationError</code> ，但 Django 的内置 <code>ValidationError</code> 也支持与 Django 代码库或第三方 Django 包中定义的验证器兼容。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=error_messages" title="error_messages" target="_blank" rel="noopener noreferrer">error_messages</a></h3>
<p>一个字典，key 是错误代码， value 是对应的错误信息。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=label" title="label" target="_blank" rel="noopener noreferrer">label</a></h3>
<p>一个简短的文本字符串，可用作 HTML 表单字段或其他描述性元素中字段的名称。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=help_text" title="help_text" target="_blank" rel="noopener noreferrer">help_text</a></h3>
<p>一个文本字符串，可用作 HTML 表单字段或其他描述性元素中字段的描述。</p>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=initial" title="initial" target="_blank" rel="noopener noreferrer">initial</a></h3>
<p>应该用于预填充 HTML 表单字段的值。你可能会传递一个可调用对象，就像你对任何常规 Django <code>Field</code> 所做的一样：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=style" title="style" target="_blank" rel="noopener noreferrer">style</a></h3>
<p>可用于控制渲染器渲染字段的键值对的字典。</p>
<p>这里有两个例子是 <code>'input_type'</code> 和 <code>'base_template'</code> ：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 序列化字段类型</h2>
<h3> BooleanField</h3>
<p>表示一个 boolean 值。</p>
<p>使用 HTML 编码表单时需要注意，省略一个 boolean 值被视为将字段设置为 <code>False</code>，即使它指定了 <code>default=True</code> 选项。这是因为 HTML 复选框通过省略该值来表示未选中的状态，所以 REST framework 将省略看作是空的复选框。</p>
<p>请注意，将使用 <code>required=False</code> 选项生成默认的 <code>BooleanField</code> 实例（因为 Django <code>models.BooleanField</code> 始终为 <code>blank=True</code>）。如果想要更改此行为，请在序列化类上显式声明 <code>BooleanField</code>。</p>
<p>对应与 <code>django.db.models.fields.BooleanField</code>.</p>
<p><strong>签名：</strong> <code>BooleanField()</code></p>
<h3> NullBooleanField</h3>
<p>表示一个布尔值，它也接受 <code>None</code> 作为有效值。</p>
<p>对应与 <code>django.db.models.fields.NullBooleanField</code>.</p>
<p><strong>签名：</strong> <code>NullBooleanField()</code></p>
<h3> CharField</h3>
<p>表示文本。可以使用 <code>max_length</code> ， <code>min_length</code> 验证（或限定）文本的长短。</p>
<p>对应与 <code>django.db.models.fields.CharField</code> 或 <code>django.db.models.fields.TextField</code>.</p>
<p><strong>签名：</strong> <code>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</code></p>
<ul>
<li><code>max_length</code> - 验证输入所包含的字符数不超过这个数目。</li>
<li><code>min_length</code> - 验证输入所包含的字符数不少于这个数目。</li>
<li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认为 <code>False</code>。</li>
<li><code>trim_whitespace</code> - 如果设置为 <code>True</code>，则前后空白将被删除。默认为 <code>True</code>。</li>
</ul>
<p><code>allow_null</code> 选项也可用于字符串字段，尽管它相对于 <code>allow_blank</code> 来说不被推荐。同时设置 <code>allow_blank=True</code> 和 <code>allow_null=True</code> 是有效的，但这样做意味着字符串表示允许有两种不同类型的空值，这可能导致数据不一致和微妙的应用程序错误。</p>
<h3> EmailField</h3>
<p>表示文本，将文本验证为有效的电子邮件地址。</p>
<p>对应与 django.db.models.fields.EmailField</p>
<p>签名： EmailField(max_length=None, min_length=None, allow_blank=False)</p>
<h3> RegexField</h3>
<p>表示文本，用于验证给定的值是否与某个正则表达式匹配。</p>
<p>对应与 <code>django.forms.fields.RegexField</code>.</p>
<p><strong>签名：</strong> <code>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</code></p>
<p>强制的 <code>regex</code> 参数可以是一个字符串，也可以是一个编译好的 Python 正则表达式对象。</p>
<p>使用 Django 的 <code>django.core.validators.RegexValidator</code> 进行验证。</p>
<h3> SlugField</h3>
<p>一个根据模式 <code>[a-zA-Z0-9_-]+</code> 验证输入的 <code>RegexField</code> 。</p>
<p>对应与 <code>django.db.models.fields.SlugField</code>.</p>
<p><strong>签名：</strong> <code>SlugField(max_length=50, min_length=None, allow_blank=False)</code></p>
<h3> URLField</h3>
<p>一个根据 URL 匹配模式验证输入的 <code>RegexField</code>。完全合格的 URL 格式为 <code>http://&lt;host&gt;/&lt;path&gt;</code>。</p>
<p>对应与 <code>django.db.models.fields.URLField</code>. 使用 Django 的 <code>django.core.validators.URLValidator</code> 进行验证。</p>
<p><strong>签名：</strong> <code>URLField(max_length=200, min_length=None, allow_blank=False)</code></p>
<h3> UUIDField</h3>
<p>确保输入的字段是有效的 UUID 字符串。<code>to_internal_value</code> 方法将返回一个 <code>uuid.UUID</code> 实例。在输出时，字段将以规范的连字符格式返回一个字符串，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>签名：</strong> <code>UUIDField(format='hex_verbose')</code></p>
<ul>
<li><code>format</code>：指定 UUID 的表示类型
<ul>
<li><code>hex_verbose</code>：规范的十六进制形式, 包括连字符：<code>"5ce0e9a5-5ffa-654b-cee0-1238041fb31a"</code></li>
<li><code>hex</code>：紧凑的十六进制形式, 不包括连字符： <code>"5ce0e9a55ffa654bcee01238041fb31a"</code></li>
<li><code>int</code>：128位整数表示：<code>"123456789012312313134124512351145145114"</code></li>
<li><code>urn</code>：RFC 4122 URN表示形式：<code>"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a"</code></li>
</ul>
</li>
</ul>
<h3> FilePathField</h3>
<p>一个其选项仅限于文件系统上某个目录中的文件名的字段。</p>
<p>对应于 <code>django.forms.fields.FilePathField</code>.</p>
<p><strong>签名：</strong> <code>FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)</code></p>
<ul>
<li><code>path</code> - FilePathField 应该从中选择的目录的绝对文件系统路径。</li>
<li><code>match</code> - 用来过滤文件名的正则表达式，string 类型。</li>
<li><code>recursive</code> - 指定是否应该包含路径的所有子目录。默认值是 <code>False</code>。</li>
<li><code>allow_files</code> - 是否应该包含指定位置的文件。默认值为 <code>True</code>。这个参数或 <code>allow_folders</code> 必须是 <code>True</code>。（两个属性必须有一个为 <code>true</code>）</li>
<li><code>allow_folders</code> - 是否应该包含指定位置的文件夹。默认值是 <code>False</code>。这个参数或 <code>allow_files</code> 必须是 <code>True</code>。（两个属性必须有一个为 <code>true</code>）</li>
</ul>
<h3> IPAddressField</h3>
<p>确保输入是有效的 IPv4 或 IPv6 字符串。</p>
<p>对应于 <code>django.forms.fields.IPAddressField</code> 和 <code>django.forms.fields.GenericIPAddressField</code>.</p>
<p><strong>签名：</strong> <code>IPAddressField(protocol='both', unpack_ipv4=False, **options)</code></p>
<ul>
<li><code>protocol</code> 将有效输入限制为指定的协议。接受的值是 <code>'both'</code> （默认），<code>'IPv4'</code> 或 <code>'IPv6'</code> 。匹配不区分大小写。</li>
<li><code>unpack_ipv4</code> 解压 IPv4 映射的地址，如 <code>::ffff:192.0.2.1</code>。如果启用此选项，则该地址将解压到 192.0.2.1。 默认是禁用的。只能在 <code>protocol</code> 设置为 <code>'both'</code> 时使用。</li>
</ul>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=integerfield" title="IntegerField" target="_blank" rel="noopener noreferrer">IntegerField</a></h3>
<p>表示整数。</p>
<p>对应于 <code>django.db.models.fields.IntegerField</code>, <code>django.db.models.fields.SmallIntegerField</code>, <code>django.db.models.fields.PositiveIntegerField</code> 和 <code>django.db.models.fields.PositiveSmallIntegerField</code>。</p>
<p><strong>签名：</strong> <code>IntegerField(max_value=None, min_value=None)</code></p>
<ul>
<li><code>max_value</code> 验证所提供的数字不大于这个值。</li>
<li><code>min_value</code> 验证所提供的数字不小于这个值。</li>
</ul>
<h3> FloatField</h3>
<p>表示浮点数。</p>
<p>对应于 <code>django.db.models.fields.FloatField</code>.</p>
<p><strong>签名：</strong> <code>FloatField(max_value=None, min_value=None)</code></p>
<ul>
<li><code>max_value</code> 验证所提供的数字不大于这个值。</li>
<li><code>min_value</code> 验证所提供的数字不小于这个值。</li>
</ul>
<h3> DecimalField</h3>
<p>表示十进制，由 Python 用 <code>Decimal</code> 实例表示。</p>
<p>对应于 <code>django.db.models.fields.DecimalField</code>.</p>
<p><strong>签名：</strong> <code>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)</code></p>
<ul>
<li><code>max_digits</code> 允许的最大位数。它必须是 <code>None</code> 或大于等于 <code>decimal_places</code> 的整数。</li>
<li><code>decimal_places</code> 小数位数。</li>
<li><code>coerce_to_string</code> 如果应返回字符串值，则设置为 <code>True</code> ;如果应返回 <code>Decimal</code> 对象，则设置为 <code>False</code> 。默认值与 <code>COERCE_DECIMAL_TO_STRING</code> settings key 的值相同，除非被覆盖，否则该值将为 <code>True</code>。如果序列化对象返回 <code>Decimal</code> 对象，则最终的输出格式将由渲染器决定。请注意，设置 <code>localize</code> 将强制该值为 <code>True</code>。</li>
<li><code>max_value</code> 验证所提供的数字不大于这个值。</li>
<li><code>min_value</code> 验证所提供的数字不小于这个值。</li>
<li><code>localize</code> 设置为 <code>True</code> 以启用基于当前语言环境的输入和输出本地化。这也会迫使 <code>coerce_to_string</code> 为 <code>True</code> 。默认为 <code>False</code> 。请注意，如果你在 settings 文件中设置了 <code>USE_L10N=True</code>，则会启用数据格式化。</li>
<li><code>rounding</code> 设置量化到配置精度时使用的舍入模式。 有效值是 <code>decimal</code> 模块舍入模式。默认为 <code>None</code>。
<h4> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B" title="用法示例" target="_blank" rel="noopener noreferrer">用法示例</a></h4>
</li>
</ul>
<p>若要验证数字到999，精确到 2 位小数，应该使用：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用10位小数来验证数字不超过10亿：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个字段还接受一个可选参数，<code>coerce_to_string</code>。如果设置为 <code>True</code>，则表示将以字符串形式输出。如果设置为 <code>False</code>，则表示将保留为 <code>Decimal</code> 实例，最终表示形式将由渲染器确定。</p>
<p>如果未设置，则默认设置为与 <code>COERCE_DECIMAL_TO_STRING</code> setting 相同的值，除非另行设置，否则该值为 <code>True</code>。</p>
<h3> DateTimeField</h3>
<p>表示日期和时间。</p>
<p>对应于 <code>django.db.models.fields.DateTimeField</code>.</p>
<p><strong>签名：</strong> <code>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</code></p>
<ul>
<li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>DATETIME_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>'iso-8601'</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>datetime</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li>
<li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>DATETIME_INPUT_FORMATS</code> 设置，该设置默认为 <code>['iso-8601']</code>。</li>
</ul>
<h4> <a href="http://drf.jiuyou.info/#/drf/fields?id=datetimefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82" title="DateTimeField" target="_blank" rel="noopener noreferrer">DateTimeField</a><a href="http://drf.jiuyou.info/#/drf/fields?id=datetimefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82" title=" 格式化字符串。" target="_blank" rel="noopener noreferrer"> 格式化字符串。</a></h4>
<p>格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 datetime 的特殊字符串 <code>iso-8601</code> 。（例如 <code>'2013-01-29T12:34:56.000000Z'</code>）</p>
<p>当一个 <code>None</code> 值被用于格式化 <code>datetime</code> 对象时，<code>to_representation</code> 将返回，最终的输出表示将由渲染器类决定。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82" title="auto_now" target="_blank" rel="noopener noreferrer">auto_now</a><a href="http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82" title=" 和 " target="_blank" rel="noopener noreferrer"> 和 </a><a href="http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82" title="auto_now_add" target="_blank" rel="noopener noreferrer">auto_now_add</a><a href="http://drf.jiuyou.info/#/drf/fields?id=auto_now-%E5%92%8C-auto_now_add-%E6%A8%A1%E5%9E%8B%E5%AD%97%E6%AE%B5%E3%80%82" title=" 模型字段。" target="_blank" rel="noopener noreferrer"> 模型字段。</a></h4>
<p>使用 <code>ModelSerializer</code> 或 <code>HyperlinkedModelSerializer</code> 时，请注意，<code>auto_now=True</code>或 <code>auto_now_add=True</code> 的模型字段默认情况下将使用 <code>read_only=True</code> 。</p>
<p>如果想覆盖此行为，则需要在序列化类中明确声明 <code>DateTimeField</code>。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> DateField</h3>
<p>表示日期。</p>
<p>对应于 <code>django.db.models.fields.DateField</code></p>
<p><strong>签名：</strong> <code>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</code></p>
<ul>
<li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>DATE_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>'iso-8601'</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>date</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li>
<li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>DATE_INPUT_FORMATS</code> 设置，该设置默认为 <code>['iso-8601']</code>。</li>
</ul>
<h4> <a href="http://drf.jiuyou.info/#/drf/fields?id=datefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2" title="DateField" target="_blank" rel="noopener noreferrer">DateField</a><a href="http://drf.jiuyou.info/#/drf/fields?id=datefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2" title=" 格式化字符串" target="_blank" rel="noopener noreferrer"> 格式化字符串</a></h4>
<p>格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 date 的特殊字符串 <code>iso-8601</code> 。（例如 <code>'2013-01-29'</code>）</p>
<h3> TimeField</h3>
<p>表示时间。</p>
<p>对应于 <code>django.db.models.fields.TimeField</code></p>
<p><strong>签名：</strong> <code>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</code></p>
<ul>
<li><code>format</code> - 表示输出格式的字符串。如果未指定，则默认为与 <code>TIME_FORMAT</code> settings key 相同的值，除非设置，否则将为 <code>'iso-8601'</code>。设置为格式化字符串则表明 <code>to_representation</code> 返回值应该被强制为字符串输出。格式化字符串如下所述。将此值设置为 <code>None</code> 表示 Python <code>time</code> 对象应由 <code>to_representation</code> 返回。在这种情况下，日期时间编码将由渲染器确定。</li>
<li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。 如果未指定，则将使用 <code>TIME_INPUT_FORMATS</code> 设置，该设置默认为 <code>['iso-8601']</code>。</li>
<li><code>default_timezone</code> - 时区, 如果未指定并且 USE_TZ 设置已启用, 则默认为当前时区</li>
</ul>
<h4> <a href="http://drf.jiuyou.info/#/drf/fields?id=timefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2" title="TimeField" target="_blank" rel="noopener noreferrer">TimeField</a><a href="http://drf.jiuyou.info/#/drf/fields?id=timefield-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2" title=" 格式化字符串" target="_blank" rel="noopener noreferrer"> 格式化字符串</a></h4>
<p>格式化字符串可以是明确指定的 Python strftime 格式，也可以是使用 ISO 8601 风格 time 的特殊字符串 <code>iso-8601</code> 。（例如 <code>'12:34:56.000000'</code>）</p>
<h3> DurationField</h3>
<p>表示持续时间。 对应于 <code>django.db.models.fields.DurationField</code></p>
<p>这些字段的 <code>validated_data</code> 将包含一个 <code>datetime.timedelta</code> 实例。该表示形式是遵循格式 <code>'[DD] [HH:[MM:]]ss[.uuuuuu]'</code> 的字符串。</p>
<p><strong>签名：</strong> <code>DurationField()</code></p>
<h3> ChoiceField</h3>
<p>可以从一个有限的选择中接受值的字段。</p>
<p>如果相应的模型字段包含 <code>choices=…</code> 参数，则由 <code>ModelSerializer</code> 自动生成字段。</p>
<p><strong>签名：</strong> <code>ChoiceField(choices)</code></p>
<ul>
<li><code>choices</code> - 有效值列表，或 <code>(key, display_name)</code> 元组列表。</li>
<li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认是 <code>False</code>。</li>
<li><code>html_cutoff</code> - 如果设置，这将是 HTML 选择下拉菜单中显示的选项的最大数量。可用于确保自动生成具有非常大可以选择的 ChoiceField，而不会阻止模板的渲染。默认是 <code>None</code>.</li>
<li><code>html_cutoff_text</code> - 指定一个文本指示器，在截断列表时显示，比如在 HTML 选择下拉菜单中已经截断了最大数量的项目。默认就会显示 <code>"More than {count} items…"</code></li>
</ul>
<p><code>Allow_blank</code> 和 <code>allow_null</code> 都是 <code>ChoiceField</code> 上的有效选项，但强烈建议只使用一个而不是两个都用。对于文本选择，<code>allow_blank</code> 应该是首选，<code>allow_null</code> 应该是数字或其他非文本选项的首选。</p>
<h3> MultipleChoiceField</h3>
<p>可以接受一组零、一个或多个值的字段，从有限的一组选择中选择。采取一个必填的参数。 <code>to_internal_value</code> 返回一个包含选定值的 <code>set</code>。</p>
<p><strong>签名：</strong> <code>MultipleChoiceField(choices)</code></p>
<ul>
<li><code>choices</code> - 有效值列表，或 <code>(key, display_name)</code> 元组列表。</li>
<li><code>allow_blank</code> - 如果设置为 <code>True</code>，则空字符串应被视为有效值。如果设置为 <code>False</code>，那么空字符串被认为是无效的并会引发验证错误。默认是 <code>False</code>。</li>
<li><code>html_cutoff</code> - 如果设置，这将是 HTML 选择下拉菜单中显示的选项的最大数量。可用于确保自动生成具有非常大可以选择的 ChoiceField，而不会阻止模板的渲染。默认是 <code>None</code>.</li>
<li><code>html_cutoff_text</code> - 指定一个文本指示器，在截断列表时显示，比如在 HTML 选择下拉菜单中已经截断了最大数量的项目。默认就会显示 <code>"More than {count} items…"</code></li>
</ul>
<p><code>Allow_blank</code> 和 <code>allow_null</code> 都是 <code>ChoiceField</code> 上的有效选项，但强烈建议只使用一个而不是两个都用。对于文本选择，<code>allow_blank</code> 应该是首选，<code>allow_null</code> 应该是数字或其他非文本选项的首选。</p>
<h3> FileField</h3>
<p>表示文件。执行 Django 的标准 FileField 验证。</p>
<p>对应于 <code>django.forms.fields.FileField</code>.</p>
<p><strong>签名：</strong> <code>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p>
<ul>
<li><code>max_length</code> - 指定文件名的最大长度。</li>
<li><code>allow_empty_file</code> - 指定是否允许空文件。</li>
<li><code>use_url</code> - 如果设置为 <code>True</code>，则 URL 字符串值将用于输出表示。如果设置为 <code>False</code>，则文件名字符串值将用于输出表示。默认为 <code>UPLOADED_FILES_USE_URL</code> settings key 的值，除非另有设置，否则为 <code>True</code>。</li>
</ul>
<h3> ImageField</h3>
<p>表示图片。验证上传的文件内容是否匹配已知的图片格式。</p>
<p>对应于 <code>django.forms.fields.ImageField</code>.</p>
<p><strong>签名：</strong> <code>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p>
<ul>
<li><code>max_length</code> - 指定文件名的最大长度。</li>
<li><code>allow_empty_file</code> - 指定是否允许空文件。</li>
<li><code>use_url</code> - 如果设置为 <code>True</code>，则 URL 字符串值将用于输出表示。如果设置为 <code>False</code>，则文件名字符串值将用于输出表示。默认为 <code>UPLOADED_FILES_USE_URL</code> settings key 的值，除非另有设置，否则为 <code>True</code>。</li>
</ul>
<p>需要 <code>Pillow</code> 库或 <code>PIL</code> 库。 建议使用 <code>Pillow</code> 库。 因为 <code>PIL</code> 已经不再维护。</p>
<h3> ListField</h3>
<p>验证对象列表的字段类。</p>
<p><strong>签名：</strong> <code>ListField(child=&lt;A_FIELD_INSTANCE&gt;, min_length=None, max_length=None)</code></p>
<ul>
<li><code>child</code> - 应该用于验证列表中的对象的字段实例。如果未提供此参数，则列表中的对象将不会被验证。</li>
<li><code>min_length</code> - 验证列表中包含的元素数量不少于这个数。</li>
<li><code>max_length</code> - 验证列表中包含的元素数量不超过这个数。</li>
</ul>
<p>例如，要验证整数列表：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ListField 类还支持一种声明式风格，允许编写可重用的列表字段类。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以在我们的应用程序中重新使用我们自定义的 <code>StringListField</code> 类，而无需为其提供 <code>child</code> 参数。</p>
<h3> DictField</h3>
<p>验证对象字典的字段类。<code>DictField</code> 中的键总是被假定为字符串值。</p>
<p><strong>签名：</strong> <code>DictField(child=&lt;A_FIELD_INSTANCE&gt;)</code></p>
<ul>
<li><code>child</code> - 应该用于验证字典中的值的字段实例。如果未提供此参数，则映射中的值将不会被验证。</li>
</ul>
<p>例如，要创建一个验证字符串到字符串映射的字段，可以这样写：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以像使用 <code>ListField</code> 一样使用声明式风格。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> HStoreField</h3>
<p><code>DictField</code> 与 Django 的 <code>postgres</code> 兼容的预配置字典类型。</p>
<ul>
<li><code>child</code>：用于验证字典中值的字段实例, 默认的子字段接受空字符串和空值</li>
<li><code>allow_empty</code>：指定是否允许空字典</li>
</ul>
<h3> JSONField</h3>
<p>验证传入的数据结构由有效 JSON 基元组成的字段类。在其二进制模式下，它将表示并验证 JSON 编码的二进制字符串。</p>
<p><strong>签名：</strong> <code>JSONField(binary)</code></p>
<ul>
<li><code>binary</code> - 如果设置为 <code>True</code>，那么该字段将输出并验证 JSON 编码的字符串，而不是原始数据结构。默认是 <code>False</code>.</li>
<li><code>encoder</code>：使用此 JSON 编码器序列化输入对象</li>
</ul>
<h3> ReadOnlyField</h3>
<p>只是简单地返回字段的值而不进行修改的字段类。</p>
<p>当包含与属性相关的字段名而不是模型字段时，此字段默认与 <code>ModelSerializer</code> 一起使用。</p>
<p><strong>签名：</strong> <code>ReadOnlyField()</code></p>
<p>例如，如果 <code>has_expired</code> 是 <code>Account</code> 模型中的一个属性，则以下序列化程序会自动将其生成为 <code>ReadOnlyField</code> ：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> HiddenField</h3>
<p>不根据用户输入获取值的字段类，而是从默认值或可调用值中获取值。</p>
<p><strong>签名：</strong> <code>HiddenField()</code></p>
<p>例如，要包含始终提供当前时间的字段作为序列化类验证数据的一部分，则可以使用以下内容：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要根据某些预先提供的字段值运行某些验证，则通常只需要 <code>HiddenField</code> 类，而不是将所有这些字段公开给最终用户。</p>
<h3> ModelField</h3>
<p><code>可以绑定到任意模型字段的通用字段</code>。<code>ModelField</code> 类将序列化/反序列化的任务委托给其关联的模型字段。该字段可用于为自定义模型字段创建序列化字段，而无需创建新的自定义序列化字段。</p>
<p><code>ModelSerializer</code> 使用此字段来对应自定义模型字段类。</p>
<p><strong>签名：</strong> <code>ModelField(model_field=&lt;Django ModelField instance&gt;)</code></p>
<p><code>ModelField</code> 类通常用于内部使用，但如果需要，可以由 API 使用。为了正确实例化 <code>ModelField</code>，必须传递一个附加到实例化模型的字段。例如：<code>ModelField(model_field=MyModel()._meta.get_field('custom_field'))</code></p>
<h3> SerializerMethodField</h3>
<p>这是一个只读字段。它通过调用它所连接的序列化类的方法来获得它的值。它可用于将任何类型的数据添加到对象的序列化表示中。</p>
<p><strong>签名：</strong> <code>SerializerMethodField(method_name=None)</code></p>
<ul>
<li><code>method_name</code> - 要调用序列化对象的方法的名称。如果不包含，则默认为 <code>get_&lt;field_name&gt;</code>.</li>
</ul>
<p>由 <code>method_name</code> 参数引用的序列化方法应该接受一个参数（除了 <code>self</code>），这是要序列化的对象。它应该返回你想要包含在对象的序列化表示中的任何内容。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5" title="自定义字段" target="_blank" rel="noopener noreferrer">自定义字段</a></h1>
<p>如果你想创建自定义字段，则需要对 <code>Field</code> 进行子类化，然后重写 <code>.to_representation()</code> 和 <code>.to_internal_value()</code> 方法中的一个或两个。这两个方法用于在初始数据类型和基本序列化数据类型之间进行转换。基本数据类型通常是 number，string， boolean， <code>date</code>/<code>time</code>/<code>datetime</code> 或 <code>None</code> 。它们也可以是任何仅包含其他基本对象的列表或字典。其他类型可能会支持，但具体取决于你使用的渲染器。</p>
<p>调用 <code>.to_representation()</code> 方法将初始数据类型转换为基本的可序列化数据类型。</p>
<p>调用 <code>to_internal_value()</code> 方法将基本数据类型恢复为其内部 python 表示形式。如果数据无效，此方法应该引发 <code>serializers.ValidationError</code> 异常。</p>
<p>请注意，2.x 版本中存在的 <code>WritableField</code> 类不再存在。 应此，如果字段需要支持数据输入，则应该继承 <code>Field</code> 并覆盖 <code>to_internal_value()</code>。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E7%9C%8B%E5%87%A0%E4%B8%AA%E6%A0%97%E5%AD%90" title="看几个栗子" target="_blank" rel="noopener noreferrer">看几个栗子</a></h2>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5" title="基本的自定义字段" target="_blank" rel="noopener noreferrer">基本的自定义字段</a></h3>
<p>我们来看一个序列化代表 RGB 颜色值的类的例子：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，字段值被视为映射到对象的属性。如果需要自定义字段值的访问方式，则需要覆盖 <code>.get_attribute()</code> 和/或 <code>.get_value()</code>。</p>
<p>让我们创建一个可以用来表示被序列化对象的类名的字段：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E6%8A%9B%E5%87%BA%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF" title="抛出验证错误" target="_blank" rel="noopener noreferrer">抛出验证错误</a></h3>
<p>我们上面的 <code>ColorField</code> 类目前不执行任何数据验证。为了表示无效数据，我们应该引发一个 <code>serializers.ValidationError</code>，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.fail()</code> 方法是引发 <code>ValidationError</code> 的快捷方式，它从 <code>error_messages</code> 字典中接收消息字符串。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>这种风格让你的错误信息更清晰，并且与代码分离，应该是首选。</p>
</blockquote>
<h3> <a href="http://drf.jiuyou.info/#/drf/fields?id=%E4%BD%BF%E7%94%A8-source3939" title="使用 " target="_blank" rel="noopener noreferrer">使用 </a><a href="http://drf.jiuyou.info/#/drf/fields?id=%E4%BD%BF%E7%94%A8-source3939" title="source='*'" target="_blank" rel="noopener noreferrer">source=' *'</a></h3>
<p>这里我们将举一个具有 <code>x_coordinate</code> 和 <code>y_coordinate</code> 属性的平面 <code>DataPoint</code> 模型的示例。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义字段和 <code>source ='*'</code>，我们可以提供坐标对的嵌套表示形式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，此示例不处理验证。使用 <code>source ='*'</code> 的嵌套序列化类可以更好地处理坐标嵌套，并且带有两个 <code>IntegerField</code> 实例，每个实例都有自己的 <code>source</code> 指向相关字段。</p>
<p>然而，这个例子的关键点是：</p>
<ul>
<li><code>to_representation</code> 传递整个 <code>DataPoint</code> 对象， 并且会映射到所需的输出。</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>除非我们的字段是只读的，否则 <code>to_internal_value</code> 必须映射回适合更新目标对象的字典。使用 <code>source='*'</code> ，<code>to_internal_value</code> 的返回将更新根验证的数据字典，而不是单个键。</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了完整性，我们再次做同样的事情，但是使用上面建议的嵌套序列化方法：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们在 <code>IntegerField</code> 声明中处理目标和源属性对（<code>x</code> 和 <code>x_coordinate</code>，<code>y</code> 和 <code>y_coordinate</code> ）之间的映射。这是使用了 <code>source ='*'</code> 的 <code>NestedCoordinateSerializer</code> 。</p>
<p>新的 <code>DataPointSerializer</code> 展现出与自定义字段方法相同的行为。</p>
<p>序列化：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然没有编写验证，但是可以使用内置的验证方式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于这个原因，可以首先尝试嵌套序列化类方法。当嵌套序列化类变得不可行或过于复杂时，可以使用自定义字段方法。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十五)：Authentication</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%BA%94)%EF%BC%9AAuthentication.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E4%BA%94)%EF%BC%9AAuthentication.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十五)：Authentication</source>
      <description>目录 身份验证 (#身份验证); 如何确定身份验证 (#如何确定身份验证); 设置认证方案 (#设置认证方案); 未经授权和禁止响应 (#未经授权和禁止响应); Apache mod\_wsgi 特定的配置 (#Apache-mod_wsgi-特定的配置); 认证API 参考 (#认证API-参考); BasicAuthentication (#Bas...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十五)：Authentication</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">身份验证</a>
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">如何确定身份验证</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88">设置认证方案</a></li>
<li><a href="#%E6%9C%AA%E7%BB%8F%E6%8E%88%E6%9D%83%E5%92%8C%E7%A6%81%E6%AD%A2%E5%93%8D%E5%BA%94">未经授权和禁止响应</a></li>
<li><a href="#Apache-mod_wsgi-%E7%89%B9%E5%AE%9A%E7%9A%84%E9%85%8D%E7%BD%AE">Apache mod_wsgi 特定的配置</a></li>
</ul>
</li>
<li><a href="#%E8%AE%A4%E8%AF%81API-%E5%8F%82%E8%80%83">认证API 参考</a>
<ul>
<li><a href="#BasicAuthentication">BasicAuthentication</a></li>
<li><a href="#TokenAuthentication">TokenAuthentication</a>
<ul>
<li><a href="#%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C">生成令牌</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7">通过使用信号</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA-API-%E7%AB%AF%E7%82%B9">通过暴露一个 API 端点</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-Django-admin">使用 Django admin</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-Django-managepy-%E5%91%BD%E4%BB%A4">使用 Django manage.py 命令</a></li>
</ul>
</li>
<li><a href="#SessionAuthentication">SessionAuthentication</a></li>
<li><a href="#RemoteUserAuthentication">RemoteUserAuthentication</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81">自定义身份认证</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/authentication/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81" title="身份验证" target="_blank" rel="noopener noreferrer">身份验证</a></h1>
<p>身份验证是将传入请求与一组识别凭证（例如请求的用户或其签名的令牌）相关联的机制。然后，权限和限制策略可以使用这些凭据来确定请求是否应该被允许。</p>
<p>REST framework 提供了许多开箱即用的身份验证方案，同时也允许你实施自定义方案。</p>
<p>身份验证始终在视图的开始处运行，在执行权限和限制检查之前，在允许继续执行任何其他代码之前。</p>
<p><code>request.user</code> 属性通常会设置为 <code>contrib.auth</code> 包的 <code>User</code> 类的一个实例。</p>
<p><code>request.auth</code> 属性用于其他身份验证信息，例如，它可以用来表示请求已签名的身份验证令牌。</p>
<hr>
<p><strong>注意：</strong> 不要忘记， <strong>身份验证本身不会（允许或不允许）传入的请求</strong>，它只是标识请求的凭据。</p>
<hr>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81" title="如何确定身份验证" target="_blank" rel="noopener noreferrer">如何确定身份验证</a></h2>
<p>认证方案总是被定义为一个类的列表。 REST framework 将尝试使用列表中的每个类进行认证，并将使用成功认证的第一个类的返回值来设置 <code>request.user</code> 和 <code>request.auth</code> 。</p>
<p>如果没有类进行身份验证，则将 <code>request.user</code> 设置为 <code>django.contrib.auth.models.AnonymousUser</code> 的实例，并将 <code>request.auth</code> 设置为 <code>None</code>.</p>
<p>可以使用 <code>UNAUTHENTICATED_USER</code> 和 <code>UNAUTHENTICATED_TOKEN</code> 设置修改未经身份验证的请求的 <code>request.user</code> 和 <code>request.auth</code> 的值。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E8%AE%BE%E7%BD%AE%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88" title="设置认证方案" target="_blank" rel="noopener noreferrer">设置认证方案</a></h2>
<p>默认的认证方案可以使用 <code>DEFAULT_AUTHENTICATION_CLASSES</code> setting 全局设置。例如。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用基于 <code>APIView</code> 类的视图，在每个视图或每个视图集的基础上设置身份验证方案。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果您将 <code>@api_view</code> 装饰器与基于函数的视图一起使用。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E6%9C%AA%E7%BB%8F%E6%8E%88%E6%9D%83%E5%92%8C%E7%A6%81%E6%AD%A2%E5%93%8D%E5%BA%94" title="未经授权和禁止响应" target="_blank" rel="noopener noreferrer">未经授权和禁止响应</a></h2>
<p>当未经身份验证的请求被拒绝时，有两种不同的错误代码可能是合适的。</p>
<ul>
<li>[HTTP 401 Unauthorized][http401]</li>
<li>[HTTP 403 Permission Denied][http403]</li>
</ul>
<p>HTTP 401 响应必须始终包含 <code>WWW-Authenticate</code> header，该 header 指示客户端如何进行身份验证。 HTTP 403 响应不包含 <code>WWW-Authenticate</code> header。</p>
<p>将使用哪种响应取决于认证方案。尽管可能正在使用多种认证方案，但只能使用一种方案来确定响应的类型。 <strong>在确定响应类型时使用视图上设置的第一个认证类</strong>。</p>
<p>请注意，当请求可以成功进行身份验证时，仍然可能会因为权限而被拒绝，在这种情况下，将始终使用 <code>403 Permission Denied</code> 响应，而不管身份验证方案如何。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=apache-mod_wsgi-%E7%89%B9%E5%AE%9A%E7%9A%84%E9%85%8D%E7%BD%AE" title="Apache mod_wsgi 特定的配置" target="_blank" rel="noopener noreferrer">Apache mod_wsgi 特定的配置</a></h2>
<p>请注意，如果使用 mod_wsgi 部署到 Apache，授权 header 默认情况下不会传递到 WSGI 应用程序，因为它假定认证将由 Apache 处理，而不是在应用程序级别处理。</p>
<p>如果您正在部署到 Apache 并使用任何基于非会话的身份验证，则需要明确配置 mod_wsgi 以将所需的 headers 传递给应用程序。这可以通过在适当的上下文中指定 <code>WSGIPassAuthorization</code> 指令并将其设置为 <code>'On'</code> 来完成。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1> 认证<a href="http://drf.jiuyou.info/#/drf/authentication?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=basicauthentication" title="BasicAuthentication" target="_blank" rel="noopener noreferrer">BasicAuthentication</a></h2>
<p>该认证方案使用 HTTP Basic Authentication，并根据用户的用户名和密码进行签名。Basic Authentication 通常只适用于测试。</p>
<p>如果成功通过身份验证，<code>BasicAuthentication</code> 将提供以下凭据。</p>
<ul>
<li><code>request.user</code> 是一个 Django <code>User</code> 实力.</li>
<li><code>request.auth</code> 是 <code>None</code>.</li>
</ul>
<p>未经身份验证的响应被拒绝将导致 <code>HTTP 401 Unauthorized</code> 的响应和相应的 WWW-Authenticate header。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果您在生产环境中使用 <code>BasicAuthentication</code>，则必须确保您的 API 仅可通过 <code>https</code> 访问。您还应该确保您的 API 客户端将始终在登录时重新请求用户名和密码，并且永远不会将这些详细信息存储到持久化存储中。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=tokenauthentication" title="TokenAuthentication" target="_blank" rel="noopener noreferrer">TokenAuthentication</a></h2>
<p>此认证方案使用简单的基于令牌的 HTTP 认证方案。令牌身份验证适用于 client-server 架构，例如本机桌面和移动客户端。</p>
<p>要使用 <code>TokenAuthentication</code> 方案，您需要将认证类配置为包含 <code>TokenAuthentication</code> ，并在 <code>INSTALLED_APPS</code> 设置中另外包含 <code>rest_framework.authtoken</code> ：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 确保在更改设置后运行 <code>manage.py migrate</code> 。 <code>rest_framework.authtoken</code> 应用程序提供 Django 数据库迁移。</p>
<hr>
<p>您还需要为您的用户创建令牌。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于客户端进行身份验证，令牌密钥应包含在 <code>Authorization</code> HTTP header 中。关键字应以字符串文字 “Token” 为前缀，用空格分隔两个字符串。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果您想在 header 中使用不同的关键字（例如 <code>Bearer</code>），只需子类化 <code>TokenAuthentication</code> 并设置 <code>keyword</code> 类变量。</p>
<p>如果成功通过身份验证，<code>TokenAuthentication</code> 将提供以下凭据。</p>
<ul>
<li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li>
<li><code>request.auth</code> 是一个 <code>rest_framework.authtoken.models.Token</code> 实例.</li>
</ul>
<p>未经身份验证的响应被拒绝将导致 <code>HTTP 401 Unauthorized</code> 的响应和相应的 WWW-Authenticate header。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>curl 命令行工具可能对测试令牌认证的 API 有用。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><strong>注意：</strong> 如果您在生产中使用 <code>TokenAuthentication</code>，则必须确保您的 API 只能通过 <code>https</code> 访问。</p>
</blockquote>
<h4> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E7%94%9F%E6%88%90%E4%BB%A4%E7%89%8C" title="生成令牌" target="_blank" rel="noopener noreferrer">生成令牌</a></h4>
<h4> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7" title="通过使用信号" target="_blank" rel="noopener noreferrer">通过使用信号</a></h4>
<p>如果您希望每个用户都拥有一个自动生成的令牌，则只需捕捉用户的 <code>post_save</code> 信号即可。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，您需要<code>确保</code>将此代码片段放置在已安装的 <code>models.py</code> 模块或 Django 启动时将导入的其他某个位置。</p>
<p>如果您已经创建了一些用户，则可以为所有现有用户生成令牌，例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E9%80%9A%E8%BF%87%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA-api-%E7%AB%AF%E7%82%B9" title="通过暴露一个 API 端点" target="_blank" rel="noopener noreferrer">通过暴露一个 API 端点</a></h4>
<p>上面的方式是通过信号捕获的方式进行令牌生成的, 你可以利用 API 的方式进行令牌生成返回。</p>
<p>使用 <code>TokenAuthentication</code> 时，您可能希望为客户提供一种机制，以获取给定用户名和密码的令牌。 REST framework 提供了一个内置的视图来支持这种行为。要使用它，请将 <code>obtain_auth_token</code> 视图添加到您的 URLconf 中：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，模式的 URL 部分可以是任何你想使用的。</p>
<p>当使用表单数据或 JSON 将有效的 <code>username</code> 和 <code>password</code> 字段发布到视图时， <code>obtain_auth_token</code> 视图将返回 JSON 响应：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，缺省的 <code>obtain_auth_token</code> 视图显式使用 JSON 请求和响应，而不是使用你设置的默认的渲染器和解析器类。</p>
<p>默认情况下，没有权限或限制应用于 <code>obtain_auth_token</code> 视图。 如果您希望应用 throttling ，则需要重写视图类，并使用 <code>throttle_classes</code> 属性包含它们。</p>
<p>如果你需要自定义 <code>obtain_auth_token</code> 视图，你可以通过继承 <code>ObtainAuthToken</code> 视图类来实现，并在你的 url conf 中使用它。</p>
<p>例如，您可能会返回超出 <code>token</code> 值的其他用户信息：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 <code>urls.py</code>:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E4%BD%BF%E7%94%A8-django-admin" title="使用 Django admin" target="_blank" rel="noopener noreferrer">使用 Django admin</a></h4>
<p>您也可以通过管理界面手动创建令牌。如果您使用的用户群很大，我们建议您对 <code>TokenAdmin</code> 类进行修补以根据需要对其进行定制，更具体地说，将 <code>user</code> 字段声明为 <code>raw_field</code>。</p>
<p><code>your_app/admin.py</code>:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E4%BD%BF%E7%94%A8-django-managepy-%E5%91%BD%E4%BB%A4" title="使用 Django manage.py 命令" target="_blank" rel="noopener noreferrer">使用 Django manage.py 命令</a></h4>
<p>从版本 3.6.4 开始，可以使用以下命令生成用户令牌：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令将返回给定用户的 API 令牌，如果它<code>不存在则创建</code>它：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您想重新生成令牌（例如，它已被泄漏），则可以传递一个附加参数：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=sessionauthentication" title="SessionAuthentication" target="_blank" rel="noopener noreferrer">SessionAuthentication</a></h2>
<p>此认证方案使用 Django 的默认 session 后端进行认证。Session 身份验证适用于与您的网站在同一会话环境中运行的 AJAX 客户端。</p>
<p>如果成功通过身份验证，则 <code>SessionAuthentication</code> 会提供以下凭据。</p>
<ul>
<li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li>
<li><code>request.auth</code> 是 <code>None</code>.</li>
</ul>
<p>未经身份验证的响应被拒绝将导致 <code>HTTP 403 Forbidden</code> 响应。</p>
<p>如果您在 SessionAuthentication 中使用 AJAX 风格的 API，则需要确保为任何 “不安全” 的 HTTP 方法调用（例如 <code>PUT</code>，<code>PATCH</code>，<code>POST</code> 或 <code>DELETE</code> 请求）包含有效的 CSRF 令牌。</p>
<p><strong>警告</strong>: 创建登录页面时应该始终使用 Django 的标准登录视图。这将确保您的登录视图得到适当的保护。</p>
<p>REST framework 中的 CSRF 验证与标准 Django 略有不同，因为需要同时支持基于 session 和非基于 session 的身份验证。这意味着只有经过身份验证的请求才需要 CSRF 令牌，并且可以在没有 CSRF 令牌的情况下发送匿名请求。此行为不适用于应始终应用 CSRF 验证的登录视图。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=remoteuserauthentication" title="RemoteUserAuthentication" target="_blank" rel="noopener noreferrer">RemoteUserAuthentication</a></h2>
<p>这种身份验证方案允许您将身份验证委托给您的 Web 服务器，该服务器设置 <code>REMOTE_USER</code> 环境变量。</p>
<p>要使用它，你必须在你的 <code>AUTHENTICATION_BACKENDS</code> 设置中有 <code>django.contrib.auth.backends.RemoteUserBackend</code> （或者一个子类）。默认情况下，<code>RemoteUserBackend</code> 为不存在的用户名创建 <code>User</code> 对象。要改变这个和其他行为，请参考 Django 文档。</p>
<p>如果成功通过身份验证，<code>RemoteUserAuthentication</code> 将提供以下凭据：</p>
<ul>
<li><code>request.user</code> 是一个 Django <code>User</code> 实例.</li>
<li><code>request.auth</code> 是 <code>None</code>.</li>
</ul>
<p>有关配置验证方法的信息，请参阅您的 Web 服务器的文档，例如：</p>
<ul>
<li><a href="https://httpd.apache.org/docs/2.4/howto/auth.html" title="Apache Authentication How-To" target="_blank" rel="noopener noreferrer">Apache Authentication How-To</a></li>
<li><a href="https://www.nginx.com/resources/admin-guide/#restricting_access" title="NGINX (Restricting Access)" target="_blank" rel="noopener noreferrer">NGINX (Restricting Access)</a></li>
</ul>
<h1> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81" title="自定义身份认证" target="_blank" rel="noopener noreferrer">自定义身份认证</a></h1>
<p>要实现自定义身份验证方案，请继承 <code>BaseAuthentication</code> 并重写 <code>.authenticate(self, request)</code> 方法。如果认证成功，该方法应返回 <code>(user, auth)</code> 的二元组，否则返回 <code>None</code>。</p>
<p>在某些情况下，您可能想要从 <code>.authenticate()</code> 方法引发 <code>AuthenticationFailed</code> 异常而不是返回 <code>None</code>。</p>
<p>通常你应该采取的方法是：</p>
<ul>
<li>如果不尝试认证，则返回 <code>None</code>。任何其他正在使用的身份验证方案仍将被检查。</li>
<li>如果尝试身份验证但失败了，请引发 <code>AuthenticationFailed</code> 异常。无论是否进行任何权限检查，都将立即返回错误响应，并且不再检查任何其他身份验证方案。</li>
</ul>
<p>您也 <em>可以</em> 重写 <code>.authenticate_header(self, request)</code> 方法。如果实现，它应该返回一个字符串，该字符串将用作 <code>HTTP 401 Unauthorized</code> 响应中的 WWW-Authenticate header 的值。</p>
<p>如果未覆盖 <code>.authenticate_header()</code> 方法，那么当未经身份验证的请求被拒绝访问时，身份验证方案将返回 <code>HTTP 403 Forbidden</code> 响应。</p>
<hr>
<p><strong>Note:</strong> 当请求对象的 <code>.user</code> 或 <code>.auth</code> 属性调用您的自定义身份验证器时，您可能会看到 <code>AttributeError</code> 作为 <code>WrappedAttributeError</code> 被重新引发。这对于防止原始异常被外部属性访问所抑制是必要的。Python 不会识别 <code>AttributeError</code> 来自您的自定义身份验证器，而是会假设请求对象没有 <code>.user</code> 或 <code>.auth</code> 属性。这些错误应该由您的验证器修复或以其他方式处理。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/authentication?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>下面的示例将根据名为 “X_USERNAME” 的自定义请求头中的用户名对任何传入请求进行身份验证。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十八)：Throttling</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%85%AB)%EF%BC%9AThrottling.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%85%AB)%EF%BC%9AThrottling.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十八)：Throttling</source>
      <description>目录 限流（Throttling） (#限流Throttling); 如何确定限流 (#如何确定限流); 设置限流策略 (#设置限流策略); 如何识别客户端 (#如何识别客户端); 设置缓存 (#设置缓存); 限流API 参考 (#限流API-参考); AnonRateThrottle (#AnonRateThrottle); UserRateThro...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十八)：Throttling</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E9%99%90%E6%B5%81Throttling">限流（Throttling）</a>
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E9%99%90%E6%B5%81">如何确定限流</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5">设置限流策略</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E5%AE%A2%E6%88%B7%E7%AB%AF">如何识别客户端</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98">设置缓存</a></li>
</ul>
</li>
<li><a href="#%E9%99%90%E6%B5%81API-%E5%8F%82%E8%80%83">限流API 参考</a>
<ul>
<li><a href="#AnonRateThrottle">AnonRateThrottle</a></li>
<li><a href="#UserRateThrottle">UserRateThrottle</a>
<ul>
<li><a href="#ScopedRateThrottle">ScopedRateThrottle</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81">自定义限流</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/throttling/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E9%99%90%E6%B5%81%EF%BC%88throttling%EF%BC%89" title="限流（Throttling）" target="_blank" rel="noopener noreferrer">限流（Throttling）</a></h1>
<p>限流与权限类似，因为它确定是否应该授权请求。 限流阀指示临时状态，并用于控制客户端可以对API进行的请求速率。</p>
<p>与权限一样，可能会使用多种限流方式。你的 API 可能对未经身份验证的请求进行限流，对经过身份验证的请求限流较少。</p>
<p>如果你需要对 API 的不同部分使用不同的限流策略，由于某些服务特别占用资源，你可能想要使用同时有多种限流策略的另一种方案。</p>
<p>如果你想要同时实现爆发限流率和持续限流率，也可以使用多个限流阀。例如，你可能希望将用户限制为每分钟最多 60 个请求，并且每天最多 1000 个请求。</p>
<p>限流阀不一定只限制请求频率。例如，存储服务可能还需要对带宽进行限制，而付费数据服务可能希望对正在访问的某些记录进行限制。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E9%99%90%E6%B5%81" title="如何确定限流" target="_blank" rel="noopener noreferrer">如何确定限流</a></h2>
<p>与权限和身份验证一样，REST framework 中的限流始终定义为类的列表。</p>
<p>在运行视图的主体之前，会检查列表中的每个限流阀。如果任何限流检查失败，将引发一个 <code>exceptions.Throttled</code> 异常，并且该视图的主体将不会再执行。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E8%AE%BE%E7%BD%AE%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5" title="设置限流策略" target="_blank" rel="noopener noreferrer">设置限流策略</a></h2>
<p>可以使用 <code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code> setting 全局设置默认限流策略。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DEFAULT_THROTTLE_RATES</code> 中使用的频率描述可能包括 <code>second</code>，<code>minute</code> ，<code>hour</code> 或 <code>day</code> 作为限流期。</p>
<p>你还可以使用基于 <code>APIView</code> 类的视图，在每个视图或每个视图集的基础上设置限流策略。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在基于 <code>@api_view</code> 装饰器的函数视图上设置。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E5%AE%A2%E6%88%B7%E7%AB%AF" title="如何识别客户端" target="_blank" rel="noopener noreferrer">如何识别客户端</a></h2>
<p><code>X-Forwarded-For</code> HTTP header 和 <code>REMOTE_ADDR</code> WSGI 变量用于唯一标识用于限流的客户端 IP 地址。如果存在 <code>X-Forwarded-For</code> header ，则会使用它，否则将使用 WSGI 环境中的 <code>REMOTE_ADDR</code> 变量的值。</p>
<p>如果你需要严格标识唯一的客户端 IP 地址，则需要先通过设置 <code>NUM_PROXIES</code> setting 来配置 API 运行的应用代理的数量。该设置应该是一个零或更大的整数。如果设置为非零，则一旦任何应用程序代理 IP 地址首先被排除，客户端 IP 将被标识为 <code>X-Forwarded-For</code> header 中的最后一个 IP 地址。如果设置为零，则 <code>REMOTE_ADDR</code> 值将始终用作识别 IP 地址。</p>
<p>重要的是要理解，如果你配置了 <code>NUM_PROXIES</code> 设置，那么在一个唯一的 NAT 的网关后面的所有客户端将被当作一个单独的客户机来对待。</p>
<p>关于 <code>X-Forwarded-For</code> header 如何工作以及识别远程客户端 IP 的更多内容可以在<a href="http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly#Multiple_Proxies_in_front_of_the_cluster" title="这里找到" target="_blank" rel="noopener noreferrer">这里找到</a>。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98" title="设置缓存" target="_blank" rel="noopener noreferrer">设置缓存</a></h2>
<p>REST framework 提供的限流类使用 Django 的缓存后端。你应该确保你已经设置了适当的缓存 setting 。对于简单的设置，<code>LocMemCache</code> 后端的默认值应该没问题。有关更多详细信息，请参阅 <a href="https://docs.djangoproject.com/en/stable/topics/cache/#setting-up-the-cache" title="Django 的缓存文档" target="_blank" rel="noopener noreferrer">Django 的缓存文档</a>。</p>
<p>如果你需要使用 <code>'default'</code> 以外的缓存，则可以通过创建自定义限流类并设置 <code>cache</code> 属性来实现。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您需要记住还要在 <code>'DEFAULT_THROTTLE_CLASSES'</code> settings key 中设置自定义的限流类，或者使用 <code>throttle_classes</code> 视图属性。</p>
<hr>
<h1> 限流<a href="http://drf.jiuyou.info/#/drf/throttling?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=anonratethrottle" title="AnonRateThrottle" target="_blank" rel="noopener noreferrer">AnonRateThrottle</a></h2>
<p><code>AnonRateThrottle</code> 将永远限制未认证的用户。通过传入请求的 IP 地址生成一个唯一的密钥来进行限制。</p>
<p>允许的请求频率由以下之一决定（按优先顺序）。</p>
<ul>
<li>类的 <code>rate</code> 属性，可以通过继承 <code>AnonRateThrottle</code> 并设置属性来提供。</li>
<li><code>DEFAULT_THROTTLE_RATES['anon']</code> 设置.</li>
</ul>
<p>如果你想限制未知来源的请求频率，<code>AnonRateThrottle</code> 是合适的。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=userratethrottle" title="UserRateThrottle" target="_blank" rel="noopener noreferrer">UserRateThrottle</a></h2>
<p><code>UserRateThrottle</code> 通过 API 将用户请求限制为给定的请求频率。用户标识用于生成一个唯一的密钥来加以限制。未经身份验证的请求将回退到使用传入请求的 IP 地址生成一个唯一的密钥来进行限制。</p>
<p>允许的请求频率由以下之一决定（按优先顺序）。</p>
<ul>
<li>类的 <code>rate</code> 属性，可以通过继承 <code>UserRateThrottle</code> 并设置属性来提供。</li>
<li><code>DEFAULT_THROTTLE_RATES['user']</code> 设置.</li>
</ul>
<p>一个 API 可能同时具有多个 <code>UserRateThrottles</code>。为此，请继承 <code>UserRateThrottle</code> 并为每个类设置一个唯一的“范围”。</p>
<p>例如，多个用户限流率可以通过使用以下类来实现......</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...和以下设置。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望对每个用户进行简单的全局速率限制，那么 <code>UserRateThrottle</code> 是合适的。</p>
<h3> ScopedRateThrottle</h3>
<p><code>ScopedRateThrottle</code> 类可用于限制对 API 特定部分的访问。只有当正在访问的视图包含 <code>.throttle_scope</code> 属性时才会应用此限制。然后通过将请求的 “范围” 与唯一的用户标识或 IP 地址连接起来形成唯一的限流密钥。</p>
<p>允许的请求频率由 <code>DEFAULT_THROTTLE_RATES</code> setting 使用请求 “范围” 中的一个键确定。</p>
<p>例如，给出以下视图...</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及以下设置：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户对 <code>ContactListView</code> 或 <code>ContactDetailView</code> 的请求将被限制为每天 1000 次。用户对 <code>UploadView</code> 的请求将被限制为每天 20 次</p>
<h1> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81" title="自定义限流" target="_blank" rel="noopener noreferrer">自定义限流</a></h1>
<p>要自定义限流，请继承 <code>BaseThrottle</code> 类并实现 <code>.allow_request(self, request, view)</code> 方法。如果请求被允许，该方法应该返回 <code>True</code>，否则返回 <code>False</code>。</p>
<p>或者，你也可以重写 <code>.wait()</code> 方法。如果实现，<code>.wait()</code> 应该返回建议的秒数，在尝试下一次请求之前等待，或者返回 <code>None</code>。如果 <code>.allow_request()</code> 先前已经返回 <code>False</code>，则只会调用 <code>.wait()</code> 方法。</p>
<p>如果 <code>.wait()</code> 方法被实现并且请求受到限制，那么 <code>Retry-After</code> header 将包含在响应中。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/throttling?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>以下是限流的一个示例，随机地控制每 10 次请求中的 1 次。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十六)：Permissions</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%85%AD)%EF%BC%9APermissions.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%85%AD)%EF%BC%9APermissions.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十六)：Permissions</source>
      <description>目录 权限 (#权限); 如何确定权限 (#如何确定权限); 对象级权限 (#对象级权限); 对象级权限的限制 (#对象级权限的限制); 设置权限策略 (#设置权限策略); API 参考 (#API-参考); AllowAny (#AllowAny); IsAuthenticated (#IsAuthenticated); IsAdminUser (#...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十六)：Permissions</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E6%9D%83%E9%99%90">权限</a>
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9D%83%E9%99%90">如何确定权限</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E6%9D%83%E9%99%90">对象级权限</a>
<ul>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E6%9D%83%E9%99%90%E7%9A%84%E9%99%90%E5%88%B6">对象级权限的限制</a></li>
</ul>
</li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5">设置权限策略</a></li>
</ul>
</li>
<li><a href="#API-%E5%8F%82%E8%80%83">API 参考</a>
<ul>
<li><a href="#AllowAny">AllowAny</a></li>
<li><a href="#IsAuthenticated">IsAuthenticated</a></li>
<li><a href="#IsAdminUser">IsAdminUser</a></li>
<li><a href="#IsAuthenticatedOrReadOnly">IsAuthenticatedOrReadOnly</a></li>
<li><a href="#DjangoModelPermissions">DjangoModelPermissions</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8C%85%E5%90%AB-queryset-%E5%B1%9E%E6%80%A7%E7%9A%84%E8%A7%86%E5%9B%BE">使用不包含 queryset 属性的视图。</a></li>
</ul>
</li>
<li><a href="#DjangoModelPermissionsOrAnonReadOnly">DjangoModelPermissionsOrAnonReadOnly</a></li>
<li><a href="#DjangoObjectPermissions">DjangoObjectPermissions</a></li>
</ul>
</li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90">自定义权限</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/permissions/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E6%9D%83%E9%99%90" title="权限" target="_blank" rel="noopener noreferrer">权限</a></h1>
<p>与 authentication 和 throttling 一起，permission 决定是应该接受还是拒绝访问请求。</p>
<p>权限检查总是在视图的最开始处运行，在任何其他代码被允许进行之前。权限检查通常会使用 <code>request.user</code> 和 <code>request.auth</code> 属性中的认证信息来确定是否允许传入请求。</p>
<p>权限用于授予或拒绝不同类别的用户访问 API 的不同部分。</p>
<p>最简单的权限是允许通过身份验证的用户访问，并拒绝未经身份验证的用户访问。这对应于 REST framework 中的 <code>IsAuthenticated</code> 类。</p>
<p>稍微宽松的权限会允许通过身份验证的用户完全访问，而未通过身份验证的用户只能进行只读访问。这对应于 REST framework 中的 <code>IsAuthenticatedOrReadOnly</code> 类。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9D%83%E9%99%90" title="如何确定权限" target="_blank" rel="noopener noreferrer">如何确定权限</a></h2>
<p>REST framework 中的权限总是被定义为权限类的列表。</p>
<p>在运行视图的主体之前，检查列表中的每个权限。如果任何权限检查失败，则会引发 <code>exceptions.PermissionDenied</code> 或 <code>exceptions.NotAuthenticated</code> 异常，并且视图的主体不会再运行。</p>
<p>当权限检查失败时，根据以下规则，将返回 “403 Forbidden” 或 “401 Unauthorized” 响应：</p>
<ul>
<li>该请求已成功通过身份验证，但权限被拒绝。 <em>— 将返回 403 Forbidden 响应。</em></li>
<li>该请求未成功通过身份验证，并且最高优先级身份验证类未添加 <code>WWW-Authenticate</code> header。<em>— 将返回 403 Forbidden 响应。</em></li>
<li>该请求未成功通过身份验证，不过最高优先级身份验证类添加了 <code>WWW-Authenticate</code> header。— 返回一个 HTTP 401 Unauthorized 响应，并会带上一个适当的 <code>WWW-Authenticate</code> header。</li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E5%AF%B9%E8%B1%A1%E7%BA%A7%E6%9D%83%E9%99%90" title="对象级权限" target="_blank" rel="noopener noreferrer">对象级权限</a></h2>
<p>REST framework 权限还支持对象级权限。对象级权限用于确定是否允许用户对特定对象进行操作，该特定对象通常是指模型实例。</p>
<p><code>.get_object()</code> 被调用时，对象级权限由 REST framework 的通用视图执行。与视图级权限一样，如果用户不被允许对给定对象进行操作，则会引发 <code>exceptions.PermissionDenied</code> 异常。</p>
<p>如果您正在编写自己的视图并希望强制执行对象级权限，或者如果您在通用视图上重写了 <code>get_object</code> 方法，那么将需要显式地在你检索该对象时调用 <code>.check_object_permissions(request, obj)</code> 方法。</p>
<p>这将引发 <code>PermissionDenied</code> 或 <code>NotAuthenticated</code> 异常，或者只是在视图具有适当的权限时才返回。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是, 除了 <code>DjangoObjectPermissions</code> 之外, <code>rest_framework.permission</code> 中提供的权限类不要实现检查对象权限所需的方法。</p>
<p>如果要使用提供的权限类来检查对象权限, 则必须将其子类化并实现自定义权限部分中描述的 <code>has_object_permission()</code> 方法。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E5%AF%B9%E8%B1%A1%E7%BA%A7%E6%9D%83%E9%99%90%E7%9A%84%E9%99%90%E5%88%B6" title="对象级权限的限制" target="_blank" rel="noopener noreferrer">对象级权限的限制</a></h4>
<p>出于性能原因，通用视图在返回对象列表时不会自动将对象级权限应用于查询集中的每个实例。</p>
<p>通常，当您使用对象级权限时，您还需要适当地过滤查询集，以确保用户只能看到他们被允许查看的实例。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E8%AE%BE%E7%BD%AE%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5" title="设置权限策略" target="_blank" rel="noopener noreferrer">设置权限策略</a></h2>
<p>默认权限策略可以使用 <code>DEFAULT_PERMISSION_CLASSES</code> setting 全局设置。例如。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未指定，则此设置默认为允许无限制访问：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以在基于 <code>APIView</code> 类的视图上设置身份验证策略。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在基于 <code>@api_view</code> 装饰器的函数视图上设置。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>注意：</strong> 当你通过类属性或装饰器设置新的权限类时，<code>settings.py</code> 文件中的默认设置会被忽略。</p>
</blockquote>
<p>如果它们继承自 <code>rest_framework.permissions.BasePermission</code>, 则可以使用标准的 Python 按位运算符来组合权限, 例如 <code>IsAuthenticatedOrReadOnly</code> 可以这样写：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：它支持 <code>＆</code> (和)、 <code>|</code> (或)和 <code>〜</code> (不是)。</p>
<h1> <a href="http://drf.jiuyou.info/#/drf/permissions?id=api-%E5%8F%82%E8%80%83" title="API 参考" target="_blank" rel="noopener noreferrer">API 参考</a></h1>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=allowany" title="AllowAny" target="_blank" rel="noopener noreferrer">AllowAny</a></h2>
<p><code>AllowAny</code> 权限类将允许不受限制的访问，而不管该请求是否已通过身份验证或未经身份验证。</p>
<p>也不一定非要用此权限，可以通过为权限设置空列表或元组来实现相同的结果，但是你会发现，使用此权限使意图更加清晰。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=isauthenticated" title="IsAuthenticated" target="_blank" rel="noopener noreferrer">IsAuthenticated</a></h2>
<p><code>IsAuthenticated</code> 权限类将拒绝任何未通过身份验证的用户的访问。</p>
<p>如果你希望 API 只能由注册用户访问，则可以使用此权限。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=isadminuser" title="IsAdminUser" target="_blank" rel="noopener noreferrer">IsAdminUser</a></h2>
<p><code>IsAdminUser</code> 权限仅允许 <code>user.is_staff</code> 为 <code>True</code> 用户访问，其他任何用户都将被拒绝。</p>
<p>如果你希望 API 只能被部分受信任的管理员访问，则可以使用此权限。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=isauthenticatedorreadonly" title="IsAuthenticatedOrReadOnly" target="_blank" rel="noopener noreferrer">IsAuthenticatedOrReadOnly</a></h2>
<p><code>IsAuthenticatedOrReadOnly</code> 允许通过身份验证的用户执行任何请求。未通过身份验证的用户只能请求 “安全” 的方法： <code>GET</code>， <code>HEAD</code> 或 <code>OPTIONS</code>。</p>
<p>如果你希望 API 允许匿名用户拥有读取权限，并且只允许对已通过身份验证的用户执行写入权限，则可以使用此权限。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=djangomodelpermissions" title="DjangoModelPermissions" target="_blank" rel="noopener noreferrer">DjangoModelPermissions</a></h2>
<p>此权限类与 Django 的标准 <code>django.contrib.auth</code> 模型权限绑定。此权限只能应用于具有 <code>.queryset</code> 属性集的视图。只有在用户通过身份验证并分配了相关模型权限的情况下，才有权限访问。</p>
<ul>
<li><code>POST</code> 请求要求用户在模型上具有 <code>add</code> 权限。</li>
<li><code>PUT</code> 和 <code>PATCH</code> 请求要求用户在模型上具有 <code>change</code> 权限。</li>
<li><code>DELETE</code> 请求要求用户在模型上具有 <code>delete</code> 权限。</li>
</ul>
<p>默认行为也可以被重写以支持自定义模型权限。例如，你可能想要包含 GET 请求的 <code>view</code> 模型权限。</p>
<p>要自定义模型权限，请继承 <code>DjangoModelPermissions</code> 并设置 <code>.perms_map</code> 属性。有关详细信息，请参阅源代码。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8C%85%E5%90%AB-queryset-%E5%B1%9E%E6%80%A7%E7%9A%84%E8%A7%86%E5%9B%BE%E3%80%82" title="使用不包含 " target="_blank" rel="noopener noreferrer">使用不包含 </a><a href="http://drf.jiuyou.info/#/drf/permissions?id=%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8C%85%E5%90%AB-queryset-%E5%B1%9E%E6%80%A7%E7%9A%84%E8%A7%86%E5%9B%BE%E3%80%82" title="queryset" target="_blank" rel="noopener noreferrer">queryset</a><a href="http://drf.jiuyou.info/#/drf/permissions?id=%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8C%85%E5%90%AB-queryset-%E5%B1%9E%E6%80%A7%E7%9A%84%E8%A7%86%E5%9B%BE%E3%80%82" title=" 属性的视图。" target="_blank" rel="noopener noreferrer"> 属性的视图。</a></h4>
<p>如果你将此权限与重写 <code>get_queryset()</code> 方法的视图一起使用，则视图上可能没有 <code>queryset</code> 属性。在这种情况下，我们建议使用 sentinel 查询集标记视图，以便此类可以确定所需的权限。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=djangomodelpermissionsoranonreadonly" title="DjangoModelPermissionsOrAnonReadOnly" target="_blank" rel="noopener noreferrer">DjangoModelPermissionsOrAnonReadOnly</a></h2>
<p>与 <code>DjangoModelPermissions</code> 类似，但也允许未经身份验证的用户对 API 进行只读访问。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=djangoobjectpermissions" title="DjangoObjectPermissions" target="_blank" rel="noopener noreferrer">DjangoObjectPermissions</a></h2>
<p>该权限类与 Django 的标准对象权限框架绑定，该框架允许对每个模型对象进行权限验证。为了使用此权限类，你还需要添加支持对象级权限的权限后端，例如 <a href="https://github.com/lukaszb/django-guardian" title="django-guardian" target="_blank" rel="noopener noreferrer">django-guardian</a>。</p>
<p>与 <code>DjangoModelPermissions</code> 一样，此权限只能应用于具有 <code>.queryset</code> 属性或 <code>.get_queryset()</code> 方法的视图。只有在用户通过身份验证并且具有相关的每个对象权限和相关的模型权限后，才有权限访问。</p>
<ul>
<li><code>POST</code> 请求要求用户对模型实例具有 <code>add</code> 权限。</li>
<li><code>PUT</code> 和 <code>PATCH</code> 请求要求用户对模型实例具有 <code>change</code> 权限。</li>
<li><code>DELETE</code> 请求要求用户对模型实例具有 <code>delete</code> 权限。</li>
</ul>
<p>请注意，<code>DjangoObjectPermissions</code> 不需要 <code>django-guardian</code> 软件包，并且同样支持其他对象级别的后端。</p>
<p>与 <code>DjangoModelPermissions</code> 一样，你可以通过继承 <code>DjangoObjectPermissions</code> 并设置 <code>.perms_map</code> 属性来自定义模型权限。有关详细信息，请参阅源代码。</p>
<hr>
<p><strong>注意</strong>: 如果你需要获取 <code>GET</code>，<code>HEAD</code> 和 <code>OPTIONS</code> 请求的对象级 <code>view</code> 权限，则还需要考虑添加 <code>DjangoObjectPermissionsFilter</code> 类，以确保列表端点只返回包含用户具有查看权限的对象的结果。</p>
<h1> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90" title="自定义权限" target="_blank" rel="noopener noreferrer">自定义权限</a></h1>
<p>要实现自定义权限，请继承 <code>BasePermission</code> 并实现以下方法中的一个或两个：</p>
<ul>
<li><code>.has_permission(self, request, view)</code></li>
<li><code>.has_object_permission(self, request, view, obj)</code></li>
</ul>
<p>如果请求被授予访问权限，则方法应该返回 <code>True</code>，否则返回 <code>False</code>。</p>
<p>如果你需要测试一个请求是一个读操作还是一个写操作，你应该根据常量 <code>SAFE_METHODS</code> 检查请求方法， <code>SAFE_METHODS</code> 是一个包含 <code>'GET'</code>，<code>'OPTIONS'</code> 和 <code>'HEAD'</code> 的元组。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>Note</strong>: 只有在视图级别 <code>has_permission</code> 检查已通过时才会调用实例级别的 <code>has_object_permission</code> 方法。还要注意，为了运行实例级检查，视图代码应该显式调用 <code>.check_object_permissions(request, obj)</code>。如果你使用的是通用视图，那么默认情况下会为您处理。（基于函数的视图将需要明确检查对象权限，在失败时引发 <code>PermissionDenied</code>。）</p>
</blockquote>
<hr>
<p>如果测试失败，自定义权限将引发 <code>PermissionDenied</code> 异常。要更改与异常相关的错误消息，请直接在你的自定义权限上实现 <code>message</code> 属性。否则将使用 <code>PermissionDenied</code> 的 <code>default_detail</code> 属性。</p>
<p>同样，要更改与异常关联的代码标识符, 请直接在您的自定义权限上实现 <code>code</code> 属性, 否则将使用 <code>PermissionDenied</code> 的 <code>default_codefrom</code> 属性。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/permissions?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h2>
<p>以下是一个权限类的示例，该权限类将传入请求的 IP 地址与黑名单进行比对，并在 IP 被列入黑名单时拒绝该请求。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了针对所有传入请求运行的全局权限，还可以创建对象级权限，这些权限仅针对影响特定对象实例的操作执行。例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，通用视图将检查适当的对象级权限，但如果你正在编写自己的自定义视图，则需要确保检查自己的对象级权限。您可以通过在拥有对象实例后从视图中调用 <code>self.check_object_permissions(request, obj)</code> 来完成此操作。如果任何对象级权限检查失败，此调用将引发适当的 <code>APIException</code>，否则将简单地返回。</p>
<p>另请注意，通用视图将仅检查单个模型实例的视图的对象级权限。如果你需要列表视图的对象级过滤，则需要单独过滤查询集。</p>
<p>有关更多详细信息请参见<a href="https://link.juejin.cn/?target=https://www.django-rest-framework.org/api-guide/filtering/" title="过滤文档" target="_blank" rel="noopener noreferrer">过滤文档</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(十四)：Validators</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%9B%9B)%EF%BC%9AValidators.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%8D%81%E5%9B%9B)%EF%BC%9AValidators.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(十四)：Validators</source>
      <description>目录 验证器 (#验证器); REST framework 中的验证 (#REST-framework-中的验证); 举个栗子 (#举个栗子); UniqueValidator (#UniqueValidator); UniqueTogetherValidator (#UniqueTogetherValidator); UniqueForDateVal...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(十四)：Validators</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E9%AA%8C%E8%AF%81%E5%99%A8">验证器</a>
<ul>
<li><a href="#REST-framework-%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81">REST framework 中的验证</a>
<ul>
<li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子</a></li>
<li><a href="#UniqueValidator">UniqueValidator</a></li>
<li><a href="#UniqueTogetherValidator">UniqueTogetherValidator</a></li>
<li><a href="#UniqueForDateValidatorUniqueForMonthValidatorUniqueForYearValidator">UniqueForDateValidator、UniqueForMonthValidator、UniqueForYearValidator</a>
<ul>
<li><a href="#%E4%B8%8E%E5%8F%AF%E5%86%99%E6%97%A5%E6%9C%9F%E5%AD%97%E6%AE%B5%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">与可写日期字段一起使用</a></li>
<li><a href="#%E4%B8%8E%E5%8F%AA%E8%AF%BB%E6%97%A5%E6%9C%9F%E5%AD%97%E6%AE%B5%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">与只读日期字段一起使用</a></li>
<li><a href="#%E4%B8%8E%E9%9A%90%E8%97%8F%E7%9A%84%E6%97%A5%E6%9C%9F%E5%AD%97%E6%AE%B5%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">与隐藏的日期字段一起使用</a></li>
</ul>
</li>
<li><a href="#%E9%BB%98%E8%AE%A4%E5%80%BC%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">默认值高级用法</a>
<ul>
<li><a href="#Advanced-field-defaults">Advanced field defaults</a></li>
<li><a href="#CurrentUserDefault">CurrentUserDefault</a></li>
<li><a href="#CreateOnlyDefault">CreateOnlyDefault</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E9%AA%8C%E8%AF%81%E5%99%A8%E7%9A%84%E9%99%90%E5%88%B6">验证器的限制</a>
<ul>
<li><a href="#%E5%8F%AF%E9%80%89%E5%AD%97%E6%AE%B5">可选字段</a></li>
<li><a href="#%E6%9B%B4%E6%96%B0%E5%B5%8C%E5%A5%97%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB">更新嵌套序列化类</a></li>
<li><a href="#%E8%B0%83%E8%AF%95%E5%A4%8D%E6%9D%82%E7%9A%84%E6%A1%88%E4%BE%8B">调试复杂的案例</a></li>
</ul>
</li>
<li><a href="#%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8">编写自定义验证器</a>
<ul>
<li><a href="#%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0">基于函数</a>
<ul>
<li><a href="#%E5%AD%97%E6%AE%B5%E7%BA%A7%E9%AA%8C%E8%AF%81">字段级验证</a></li>
</ul>
</li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB">基于类</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-set_context">使用 set_context()</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/validators/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E9%AA%8C%E8%AF%81%E5%99%A8" title="验证器" target="_blank" rel="noopener noreferrer">验证器</a></h1>
<p>大多数情况下，您在 REST framework 中处理验证时，只需依赖默认的字段验证，或者在序列化类或字段类上编写明确的验证方法。</p>
<p>但是，有时你会希望将验证逻辑放置到可重用组件中，以便在整个代码库中轻松地重用它。这可以通过使用验证器函数和验证器类来实现。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=rest-framework-%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81" title="REST framework 中的验证" target="_blank" rel="noopener noreferrer">REST framework 中的验证</a></h2>
<p>Django REST framework 序列化器中的验证与 Django <code>ModelForm</code> 类中验证的工作方式有点不同。</p>
<p>使用 <code>ModelForm</code>，验证一部分在表单上执行，一部分在模型实例上执行。使用 REST framework ，验证完全在序列化类上执行。这是有优势的，原因如下：</p>
<ul>
<li>它使问题适当的分离，让代码行为变的更加清晰。</li>
<li>使用快捷的 <code>ModelSerializer</code> 类和使用显式的 <code>Serializer</code> 类可以轻松切换。任何用于 <code>ModelSerializer</code> 的验证行为都很容易复制。</li>
<li>打印序列化类实例的 <code>repr</code> 将会显示它应用的验证规则。在模型实例上没有额外的隐藏验证行为（因为全在序列化类上）。</li>
</ul>
<p>当你使用 <code>ModelSerializer</code> 时，所有验证都会自动为你处理。如果你想要改为使用 <code>Serializer</code> 类，那么你需要明确定义验证规则。</p>
<p>在你使用 REST 框架进行验证处理时, 你可能仅仅依赖于默认依赖的字段验证, 或者在 serializer 上使用显式验证的方法, 但如果将验证逻辑代码放入可复用的组件中, 即可达到复用代码, 降低冗余的效果, 而这个功能就可以<code>通过验证类或者验证函数来实现</code>。</p>
<h4> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90" title="举个栗子" target="_blank" rel="noopener noreferrer">举个栗子</a></h4>
<p>作为 REST framework 如何使用显式验证的示例，我们将采用一个简单的模型类，该类具有唯一性约束的字段。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CustomerReportSerializer</code> 是一个基本的 <code>ModelSerializer</code> ，我们可以使用它来创建或更新 <code>CustomerReportRecord</code> 的实例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在使用 <code>manage.py shell</code> 打开 Django shell:</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有趣的是 <code>reference</code> 字段。我们可以看到唯一性约束由序列化字段上的验证器明确执行。</p>
<p>由于这种更明确的风格，REST framework 包含一些在核心 Django 中没有的验证器类。这些类在下面详细说明。</p>
<h3> UniqueValidator</h3>
<p>该验证器可用于在模型字段上强制实施 <code>unique=True</code> 约束。它需要一个必需的参数和一个可选的 <code>messages</code> 参数：</p>
<ul>
<li><code>queryset</code> <em>必须</em> - 这是验证唯一性的查询集。</li>
<li><code>message</code> - 验证失败时使用的错误消息。</li>
<li><code>lookup</code> - 用于查找已验证值的现有实例。默认为 <code>'exact'</code>。</li>
</ul>
<p>这个验证器应该应用于序列化字段，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> UniqueTogetherValidator</h3>
<p>此验证器可用于在模型实例上强制实施 <code>unique_together</code> 约束。它有两个必需的参数和一个可选的 <code>messages</code> 参数：</p>
<ul>
<li><code>queryset</code> <em>必须</em> - 这是验证唯一性的查询集。</li>
<li><code>fields</code> <em>必须</em> - 一个存放字段名称的列表或者元组，这个集合必须是唯一的（意思是集合中的字段代表的一组值不能同时出现在两条数据中）。这些字段必须都是序列化类中的字段。</li>
<li><code>message</code> - 验证失败时使用的错误消息。</li>
</ul>
<p>验证器应该应用于序列化类，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>: <code>UniqueTogetherValidation</code> 类总是施加一个隐式约束，即它所应用的所有字段都是按需处理的。具有 <code>default</code> 值的字段是一个例外，因为它们总是提供一个值，即使在用户输入中省略了这个值。</p>
<h3> UniqueForDateValidator、UniqueForMonthValidator、UniqueForYearValidator</h3>
<p>这些验证器可用于强制实施模型实例上的 <code>unique_for_date</code>，<code>unique_for_month</code> 和 <code>unique_for_year</code> 约束。他们有以下参数：</p>
<ul>
<li><code>queryset</code> <em>必须</em> - 这是验证唯一性的查询集。</li>
<li><code>field</code> <em>必须</em> - 在给定日期范围内需要被验证唯一性的字段的名称。该字段必须是序列化类中的字段。</li>
<li><code>date_field</code> <em>必须</em> - 将用于确定唯一性约束的日期范围的字段名称。该字段必须是序列化类中的字段。</li>
<li><code>message</code> - 验证失败时使用的错误消息。</li>
</ul>
<p>验证器应该应用于序列化类，如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>我解释下，上面例子的意思是，在 <code>published</code> 日期所在的年份中，<code>slug</code> 字段的值必须唯一，注意，不是要和 <code>published</code> 完全相等的日期，而是年份相等。<code>unique_for_date</code>，<code>unique_for_month</code> 同理。</p>
</blockquote>
<p>用于验证的日期字段应该始终存在于序列化类中。你不能简单地依赖模型类 <code>default=...</code>，因为默认值在验证运行之后才会生成。</p>
<p>你可能需要使用几种样式，具体取决于你希望 API 如何展现。如果你使用的是 <code>ModelSerializer</code> ，可能只需依赖 REST framework 为你生成的默认值，但如果你使用的是 <code>Serializer</code> 或需要更明确的控制，请使用下面演示的样式。</p>
<h4> 与可写日期字段一起使用</h4>
<p>如果你希望日期字段是可写的，唯一值得注意的是你应该确保它始终可用于输入数据中，可以通过设置 default 参数或通过设置 required=True 来实现。。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 与只读日期字段一起使用</h4>
<p>如果希望日期字段可见, 但用户不可编辑, 则设置 <code>read_only=True</code> 并另外设置一个 <code>default=...</code> 参数。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 与隐藏的日期字段一起使用</h4>
<p>如果您希望日期字段对用户完全隐藏, 请使用 <code>HiddenField</code>, 此字段类型不接受用户输入, 而是始终将其默认值返回给序列化器中的 <code>validated_data</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>: <code>UniqueFor&lt;Range&gt;Validation</code> 类总是施加一个隐式约束，即它所应用的所有字段都是按需处理的。具有 <code>default</code> 值的字段是一个例外，因为它们总是提供一个值，即使在用户输入中省略了这个值</p>
<h3> 默认值高级用法</h3>
<h4> <a href="http://drf.jiuyou.info/#/drf/validators?id=advanced-field-defaults" title="Advanced field defaults" target="_blank" rel="noopener noreferrer">Advanced field defaults</a></h4>
<p>在序列化类的多个字段中应用的验证器有时不需要由 API 客户端提供的字段输入，但它可以用作验证器的输入。</p>
<p>有两种模式可能需要这种验证：</p>
<ul>
<li>使用 <code>HiddenField</code> 。该字段将出现在 <code>validated_data</code> 中，但不会用在序列化输出表示中。</li>
<li>使用 <code>read_only=True</code> 的标准字段，同时也包含 <code>default=...</code> 参数。该字段将用于序列化输出表示中，但不能由用户直接设置。</li>
</ul>
<p>REST framework 包含一些在这种情况下可能有用的默认值。</p>
<h4> CurrentUserDefault</h4>
<p>可用于表示当前用户的默认类。为了使用它，在实例化序列化类时，<code>'request'</code> 必须作为上下文字典的一部分提供。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> CreateOnlyDefault</h4>
<p>可用于在 create 操作期间仅设置默认参数的默认类。在 update 期间，该字段被省略。</p>
<p>它接受一个参数，这是在 create 操作期间应该使用的默认值或可调用参数。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E9%AA%8C%E8%AF%81%E5%99%A8%E7%9A%84%E9%99%90%E5%88%B6" title="验证器的限制" target="_blank" rel="noopener noreferrer">验证器的限制</a></h1>
<p>有一些不明确的情况，你需要显示处理验证，而不是依赖 <code>ModelSerializer</code> 生成的默认序列化类。</p>
<p>在这些情况下，你可能希望通过为序列化类 <code>Meta.validators</code> 属性指定一个空列表来禁用自动生成的验证器。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E5%8F%AF%E9%80%89%E5%AD%97%E6%AE%B5" title="可选字段" target="_blank" rel="noopener noreferrer">可选字段</a></h2>
<p>默认情况下 "unique together" 验证强制所有字段都是 <code>required=True</code>。在某些情况下，你可能希望显式将 <code>required=False</code> 应用于其中一个字段，在这种情况下，验证所需的行为是不明确的。</p>
<p>在这种情况下，你通常需要从序列化类中排除验证器，并且在 <code>.validate()</code> 方法中或在视图中显式地编写验证逻辑。</p>
<p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E6%9B%B4%E6%96%B0%E5%B5%8C%E5%A5%97%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB" title="更新嵌套序列化类" target="_blank" rel="noopener noreferrer">更新嵌套序列化类</a></h2>
<p>将更新应用于现有实例时，唯一性验证器将从唯一性检查中排除当前实例。当前实例在唯一性检查的上下文中可用，因为它作为序列化程序中的一个属性存在，最初在实例化序列化类时已使用 <code>instance=...</code> 传递。</p>
<p>在嵌套序列化类上进行更新操作时，无法应用此排除，因为该实例不可用。</p>
<p>你可能又一次需要明确地从序列化类中移除验证器，并将验证约束的代码显式写入 <code>.validate()</code> 方法或视图中。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E8%B0%83%E8%AF%95%E5%A4%8D%E6%9D%82%E7%9A%84%E6%A1%88%E4%BE%8B" title="调试复杂的案例" target="_blank" rel="noopener noreferrer">调试复杂的案例</a></h2>
<p>如果你不确定 <code>ModelSerializer</code> 类的默认行为，那么运行 <code>manage.py shell</code> 并打印序列化类实例通常是一个好主意，以便你可以检查它自动生成的字段和验证器。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还要记住，在复杂情况下，明确定义序列化类通常会更好，而不是依赖默认的 <code>ModelSerializer</code> 行为。虽然这样会写更多的代码，但确保了最终的行为更加透明。</p>
<h1> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8" title="编写自定义验证器" target="_blank" rel="noopener noreferrer">编写自定义验证器</a></h1>
<p>你可以使用 Django 现有的验证器，也可以编写自定义验证器。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0" title="基于函数" target="_blank" rel="noopener noreferrer">基于函数</a></h2>
<p>验证器可以是任何可调用对象，在失败时引发 <code>serializers.ValidationError</code>。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E5%AD%97%E6%AE%B5%E7%BA%A7%E9%AA%8C%E8%AF%81" title="字段级验证" target="_blank" rel="noopener noreferrer">字段级验证</a></h4>
<p>你可以通过向 <code>Serializer</code> 子类添加 <code>.validate_&lt;field_name&gt;</code>方法来指定自定义字段级验证。</p>
<h2> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E5%9F%BA%E4%BA%8E%E7%B1%BB" title="基于类" target="_blank" rel="noopener noreferrer">基于类</a></h2>
<p>要编写一个基于类的验证器，请使用 <code>__call__</code> 方法。基于类的验证器很有用，因为它们允许参数化和重用行为。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="http://drf.jiuyou.info/#/drf/validators?id=%E4%BD%BF%E7%94%A8-set_context" title="使用 " target="_blank" rel="noopener noreferrer">使用 </a><a href="http://drf.jiuyou.info/#/drf/validators?id=%E4%BD%BF%E7%94%A8-set_context" title="set_context()" target="_blank" rel="noopener noreferrer">set_context()</a></h4>
<p>在一些高级的情况下，你可能想要在验证器中获取正在被验证的序列化字段。这时，你可以通过在基于类的验证器上声明 <code>set_context</code> 方法来完成此操作。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Rest-framework专栏讲解(四)：Status</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%9B%9B)%EF%BC%9AStatus.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/Rest-framework%E4%B8%93%E6%A0%8F%E8%AE%B2%E8%A7%A3(%E5%9B%9B)%EF%BC%9AStatus.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">Rest-framework专栏讲解(四)：Status</source>
      <description>目录 状态码 (#状态码); 信息 - 1xx (#信息---1xx); 成功 - 2xx (#成功---2xx); 重定向 - 3xx (#重定向---3xx); 客户端错误 - 4xx (#客户端错误---4xx); 服务器错误 - 5xx (#服务器错误---5xx); 帮助函数 (#帮助函数); 官方原文链接 (http://www.djang...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Rest-framework专栏讲解(四)：Status</h1>
<h2> 目录</h2>
<ul>
<li><a href="#%E7%8A%B6%E6%80%81%E7%A0%81">状态码</a>
<ul>
<li><a href="#%E4%BF%A1%E6%81%AF---1xx">信息 - 1xx</a></li>
<li><a href="#%E6%88%90%E5%8A%9F---2xx">成功 - 2xx</a></li>
<li><a href="#%E9%87%8D%E5%AE%9A%E5%90%91---3xx">重定向 - 3xx</a></li>
<li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF---4xx">客户端错误 - 4xx</a></li>
<li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF---5xx">服务器错误 - 5xx</a></li>
<li><a href="#%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0">帮助函数</a></li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><a href="http://www.django-rest-framework.org/api-guide/status-codes/" title="官方原文链接" target="_blank" rel="noopener noreferrer">官方原文链接</a></p>
</blockquote>
<h1> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E7%8A%B6%E6%80%81%E7%A0%81" title="状态码" target="_blank" rel="noopener noreferrer">状态码</a></h1>
<p>不建议在你的响应中使用裸露（直接使用数字）的状态码。 REST framework 包含一组命名常量，你可以使用它们使代码更加清晰易读。</p>
<p>在请求中我们会用到和种各样的请求状态码, 如果你查阅过文档, 会在首行看到这样一条信息：</p>
<blockquote>
<p>Using bare status codes in your responses isn't recommended. REST framework includes a set of named constants that you can use to make your code more obvious and readable.</p>
</blockquote>
<p>是的, 使用框架自带的状态码能更清晰的表达这个请求的相应内容以及错误信息, 你只需要这样导入进来就可以使用了：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面列出了 status 模块中包含的全部 HTTP 状态码。</p>
<p>该模块还包含一组帮助函数，用于测试状态码是否在给定范围内。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E4%BF%A1%E6%81%AF-1xx" title="信息 - 1xx" target="_blank" rel="noopener noreferrer">信息 - 1xx</a></h2>
<p>这类状态码表示临时响应。默认情况下，REST framework 中没有使用 1xx 状态码。</p>
<ul>
<li><code>HTTP_100_CONTINUE</code></li>
<li><code>HTTP_101_SWITCHING_PROTOCOLS</code></li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E6%88%90%E5%8A%9F-2xx" title="成功 - 2xx" target="_blank" rel="noopener noreferrer">成功 - 2xx</a></h2>
<p>这类状态码表明客户端的请求已被成功接收，理解和接受。</p>
<ul>
<li><code>HTTP_200_OK</code></li>
<li><code>HTTP_201_CREATED</code></li>
<li><code>HTTP_202_ACCEPTED</code></li>
<li><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION</code></li>
<li><code>HTTP_204_NO_CONTENT</code></li>
<li><code>HTTP_205_RESET_CONTENT</code></li>
<li><code>HTTP_206_PARTIAL_CONTENT</code></li>
<li><code>HTTP_207_MULTI_STATUS</code></li>
<li><code>HTTP_208_ALREADY_REPORTED</code></li>
<li><code>HTTP_226_IM_USED</code></li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E9%87%8D%E5%AE%9A%E5%90%91-3xx" title="重定向 - 3xx" target="_blank" rel="noopener noreferrer">重定向 - 3xx</a></h2>
<p>这类状态码表明用户代理需要采取进一步行动来完成请求。</p>
<ul>
<li><code>HTTP_300_MULTIPLE_CHOICES</code></li>
<li><code>HTTP_301_MOVED_PERMANENTLY</code></li>
<li><code>HTTP_302_FOUND</code></li>
<li><code>HTTP_303_SEE_OTHER</code></li>
<li><code>HTTP_304_NOT_MODIFIED</code></li>
<li><code>HTTP_305_USE_PROXY</code></li>
<li><code>HTTP_306_RESERVED</code></li>
<li><code>HTTP_307_TEMPORARY_REDIRECT</code></li>
<li><code>HTTP_308_PERMANENT_REDIRECT</code></li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF-4xx" title="客户端错误 - 4xx" target="_blank" rel="noopener noreferrer">客户端错误 - 4xx</a></h2>
<p>4xx 状态码适用于客户端出现错误的情况。除了响应 HEAD 请求之外，服务器应该包含一个错误情况说明的实体，以及它是临时的还是永久的。</p>
<ul>
<li><code>HTTP_400_BAD_REQUEST</code></li>
<li><code>HTTP_401_UNAUTHORIZED</code></li>
<li><code>HTTP_402_PAYMENT_REQUIRED</code></li>
<li><code>HTTP_403_FORBIDDEN</code></li>
<li><code>HTTP_404_NOT_FOUND</code></li>
<li><code>HTTP_405_METHOD_NOT_ALLOWED</code></li>
<li><code>HTTP_406_NOT_ACCEPTABLE</code></li>
<li><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED</code></li>
<li><code>HTTP_408_REQUEST_TIMEOUT</code></li>
<li><code>HTTP_409_CONFLICT</code></li>
<li><code>HTTP_410_GONE</code></li>
<li><code>HTTP_411_LENGTH_REQUIRED</code></li>
<li><code>HTTP_412_PRECONDITION_FAILED</code></li>
<li><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE</code></li>
<li><code>HTTP_414_REQUEST_URI_TOO_LONG</code></li>
<li><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE</code></li>
<li><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE</code></li>
<li><code>HTTP_417_EXPECTATION_FAILED</code></li>
<li><code>HTTP_422_UNPROCESSABLE_ENTITY</code></li>
<li><code>HTTP_423_LOCKED</code></li>
<li><code>HTTP_424_FAILED_DEPENDENCY</code></li>
<li><code>HTTP_426_UPGRADE_REQUIRED</code></li>
<li><code>HTTP_428_PRECONDITION_REQUIRED</code></li>
<li><code>HTTP_429_TOO_MANY_REQUESTS</code></li>
<li><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE</code></li>
<li><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS</code></li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF-5xx" title="服务器错误 - 5xx" target="_blank" rel="noopener noreferrer">服务器错误 - 5xx</a></h2>
<p>5xx 表示服务器意识到其发生错误或无法执行请求的情况。除了响应 HEAD 请求之外，服务器应该包含一个错误情况说明的实体，以及它是临时的还是永久的。</p>
<ul>
<li><code>HTTP_500_INTERNAL_SERVER_ERROR</code></li>
<li><code>HTTP_501_NOT_IMPLEMENTED</code></li>
<li><code>HTTP_502_BAD_GATEWAY</code></li>
<li><code>HTTP_503_SERVICE_UNAVAILABLE</code></li>
<li><code>HTTP_504_GATEWAY_TIMEOUT</code></li>
<li><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED</code></li>
<li><code>HTTP_506_VARIANT_ALSO_NEGOTIATES</code></li>
<li><code>HTTP_507_INSUFFICIENT_STORAGE</code></li>
<li><code>HTTP_508_LOOP_DETECTED</code></li>
<li><code>HTTP_509_BANDWIDTH_LIMIT_EXCEEDED</code></li>
<li><code>HTTP_510_NOT_EXTENDED</code></li>
<li><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED</code></li>
</ul>
<h2> <a href="http://drf.jiuyou.info/#/drf/status-codes?id=%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0" title="帮助函数" target="_blank" rel="noopener noreferrer">帮助函数</a></h2>
<p>以下帮助函数可用于识别响应代码的类别。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>重写DRF的to_representation和to_internal_value方法有什么用途?</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/%E9%87%8D%E5%86%99DRF%E7%9A%84to_representation%E5%92%8Cto_internal_value%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%E9%80%94-.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/python/DRF/%E9%87%8D%E5%86%99DRF%E7%9A%84to_representation%E5%92%8Cto_internal_value%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%E9%80%94-.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">重写DRF的to_representation和to_internal_value方法有什么用途?</source>
      <description>目录 to\_representation方法 (#to_representation方法); to\_internal\_value方法 (#tointernalvalue方法); 自定义序列化器类字段 (#自定义序列化器类字段); 小结 (#小结); DRF所有序列化 (https://so.csdn.net/so/search?q=序列化\&amp;sp...</description>
      <pubDate>Thu, 21 Dec 2023 09:57:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 重写DRF的to_representation和to_internal_value方法有什么用途?</h1>
<h2> 目录</h2>
<ul>
<li><a href="#to_representation%E6%96%B9%E6%B3%95">to_representation方法</a></li>
<li><a href="#to_internal_value%E6%96%B9%E6%B3%95">to_internal_value方法</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%B1%BB%E5%AD%97%E6%AE%B5">自定义序列化器类字段</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li>
</ul>
<p>DRF所有<a href="https://so.csdn.net/so/search?q=%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1001.2101.3001.7020" title="序列化" target="_blank" rel="noopener noreferrer">序列化</a>器类都继承了<code>BaseSerializer</code> 类， 通过重写该类的 <code>to_representation()</code> 和<code>to_internal_value()</code>方法可以改变序列化和<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1001.2101.3001.7020" title="反序列化" target="_blank" rel="noopener noreferrer">反序列化</a>的行为，比如给序列化后的数据添加额外的数据，或者对客户端API请求携带的数据进行反序列化处理以及用来自定义序列化器字段。</p>
<ol>
<li><code>to_representation()</code> 允许我们改变序列化的输出。</li>
<li><code>to_internal_value()</code> 允许改变我们反序列化的输出。</li>
</ol>
<p>那么这两个方法该如何使用呢? 小编我今天就带你看一看！  </p>
<p>假设我们有如下一个文章模型(Article)：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个文章资源有 <code>title</code>, <code>body</code>和 <code>liked_by</code> &nbsp;三个字段。<code>liked_by</code> 代表喜欢该文章的用户对象id列表。</p>
<p>我们的序列化器<code>ArticleSerializer</code>类如下所示：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用上面序列化器去序列化单篇文章资源，我们将得到如下输出数据：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> to_representation方法</h3>
<p>现在如果我们希望给上面输出数据添加一个<code>total_likes</code>点赞总数的字段，我们只需要在序列化器类里重写<code>to_representation</code>方法。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在使用新的序列化器类去序列化单篇文章资源，我们将得到如下输出结果。<code>to_representation()</code> 方法改变了我们序列化的输出，并传递了额外的数据。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> to_internal_value方法</h3>
<p><code>to_internal_value</code>主要在<code>反序列化时用到</code>，其作用处理API请求携带的数据，对其进行验证并转化为Python的数据类型。</p>
<p>假如我们的API客户端通过请求提交了额外的数据，比如<code>extra_info</code>字段，如下所示。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>extra_info</code>字段不属于我们<code>ArticleSerializer</code>类里的字段，如果我们直接使用<code>ArticleSerializer</code>类对上述数据进行反序列化会出现错误。</p>
<p>事实上反序列化时我们只需要提取<code>article_data</code>然后对其反序列化即可，所以我们可以重写<code>to_internal_value</code>提取我们所需要的数据，忽略不想要的数据。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 自定义序列化器类字段</h2>
<p><code>to_representation()</code> 和<code>to_internal_value()</code>方法的令一个重要用途就是用来自定义序列化类字段。下例为DRF提供的一个官方演示，展示了如何使用这两个方法自定义了一个包含有x, y坐标的字段<code>CoordinateField</code>字段。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 小结</h2>
<p>重写 <code>to_representation()</code> 和<code>to_internal_value()</code>方法不仅可以改变序列化数据的输出，处理反序列化的输入数据，还可以用来自定义字段。你都明白了吗?</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL索引详解</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/docs/interviews/mysql/mysql%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/docs/interviews/mysql/mysql%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">MySQL索引详解</source>
      <description>文章来源： https://javaguide.cn/database/mysql/mysql-index.html  感谢WT-AHA (https://github.com/WT-AHA)对本文的完善，相关 PR：https://github.com/Snailclimb/JavaGuide/pull/1648 。 但凡经历过几场面试的小伙伴，应...</description>
      <category>数据库</category>
      <pubDate>Tue, 05 Dec 2023 10:37:11 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>文章来源： <a href="https://javaguide.cn/database/mysql/mysql-index.html" target="_blank" rel="noopener noreferrer">https://javaguide.cn/database/mysql/mysql-index.html</a><br>
感谢<a href="https://github.com/WT-AHA" target="_blank" rel="noopener noreferrer">WT-AHA</a>对本文的完善，相关 PR：<a href="https://github.com/Snailclimb/JavaGuide/pull/1648" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/JavaGuide/pull/1648</a> 。</p>
</blockquote>
<p>但凡经历过几场面试的小伙伴，应该都清楚，数据库索引这个知识点在面试中出现的频率高到离谱。</p>
<p>除了对于准备面试来说非常重要之外，善用索引对 SQL 的性能提升非常明显，是一个性价比较高的 SQL 优化手段。</p>
<h2> 索引介绍</h2>
<p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。</strong></p>
<p>索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p>
<p>索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构。</p>
<h2> 索引的优缺点</h2>
<p><strong>优点</strong>：</p>
<ul>
<li>使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。</li>
<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。</li>
<li>索引需要使用物理文件存储，也会耗费一定空间。</li>
</ul>
<p>但是，<strong>使用索引一定能提高查询性能吗?</strong></p>
<p>大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。</p>
<h2> 索引底层数据结构选型</h2>
<h3> Hash 表</h3>
<p>哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。</p>
<p><strong>为何能够通过 key 快速取出 value 呢？</strong> 原因在于 <strong>哈希算法</strong>（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>但是！哈希算法有个 <strong>Hash 冲突</strong> 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 <strong>链地址法</strong>。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 <code>HashMap</code> 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后<code>HashMap</code>为了减少链表过长的时候搜索时间过长引入了红黑树。</p>
<figure><figcaption></figcaption></figure>
<p>为了减少 Hash 冲突的发生，一个好的哈希函数应该“均匀地”将数据分布在整个可能的哈希值集合中。</p>
<p>MySQL 的 InnoDB 存储引擎不直接支持常规的哈希索引，但是，InnoDB 存储引擎中存在一种特殊的“自适应哈希索引”（Adaptive Hash Index），自适应哈希索引并不是传统意义上的纯哈希索引，而是结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的每个哈希桶实际上是一个小型的 B+Tree 结构。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。关于 Adaptive Hash Index 的详细介绍，可以查看 <a href="https://mp.weixin.qq.com/s/ra4v1XR5pzSWc-qtGO-dBg" target="_blank" rel="noopener noreferrer">MySQL 各种“Buffer”之 Adaptive Hash Index</a> 这篇文章。</p>
<p>既然哈希表这么快，<strong>为什么 MySQL 没有使用其作为索引的数据结构呢？</strong> 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。</p>
<p>试想一种情况:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。</p>
<h3> 二叉查找树(BST)</h3>
<p>二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构，它具有以下特点：</p>
<ol>
<li>左子树所有节点的值均小于根节点的值。</li>
<li>右子树所有节点的值均大于根节点的值。</li>
<li>左右子树也分别为二叉查找树。</li>
</ol>
<p>当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。</p>
<figure><figcaption>斜树</figcaption></figure>
<p>也就是说，<strong>二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。</strong></p>
<p>为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。</p>
<h3> AVL 树</h3>
<p>AVL 树是计算机科学中最早被发明的自平衡二叉查找树，它的名称来自于发明者 G.M. Adelson-Velsky 和 E.M. Landis 的名字缩写。AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。</p>
<figure><figcaption>AVL 树</figcaption></figure>
<p>AVL 树采用了旋转操作来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。</p>
<p>由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了查询性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 <strong>磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。</strong></p>
<p>实际应用中，AVL 树使用的并不多。</p>
<h3> 红黑树</h3>
<p>红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，它具有以下特点：</p>
<ol>
<li>每个节点非红即黑；</li>
<li>根节点总是黑色的；</li>
<li>每个叶子节点都是黑色的空节点（NIL 节点）；</li>
<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>
<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li>
</ol>
<figure><figcaption>红黑树</figcaption></figure>
<p>和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。也正因如此，红黑树的插入和删除操作效率大大提高了，因为红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，而不需要像 AVL 树一样进行 O(logn) 次数的旋转操作。</p>
<p><strong>红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。</strong></p>
<h3> B 树&amp; B+树</h3>
<p>B 树也称 B-树,全称为 <strong>多路平衡查找树</strong> ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 <code>Balanced</code> （平衡）的意思。</p>
<p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p>
<p><strong>B 树&amp; B+树两者有何异同呢？</strong></p>
<ul>
<li>B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li>
<li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li>
<li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li>
<li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li>
</ul>
<p>综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p>
<p>在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）</p>
<blockquote>
<p>MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“<strong>非聚簇索引（非聚集索引）</strong>”。</p>
<p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“<strong>聚簇索引（聚集索引）</strong>”，而其余的索引都作为 <strong>辅助索引</strong> ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p>
</blockquote>
<h2> 索引类型总结</h2>
<p>按照数据结构维度划分：</p>
<ul>
<li>BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</li>
<li>哈希索引：类似键值对的形式，一次即可定位。</li>
<li>RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li>
<li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li>
</ul>
<p>按照底层存储方式角度划分：</p>
<ul>
<li>聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。</li>
<li>非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</li>
</ul>
<p>按照应用维度划分：</p>
<ul>
<li>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</li>
<li>普通索引：仅加速查询。</li>
<li>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</li>
<li>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</li>
<li>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</li>
<li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li>
</ul>
<p>MySQL 8.x 中实现的索引新特性：</p>
<ul>
<li>隐藏索引：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。</li>
<li>降序索引：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。</li>
<li>函数索引：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。</li>
</ul>
<h2> 主键索引(Primary Key)</h2>
<p>数据表的主键列使用的就是主键索引。</p>
<p>一张数据表有只能有一个主键，并且主键不能为 null，不能重复。</p>
<p>在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。</p>
<figure><figcaption>主键索引</figcaption></figure>
<h2> 二级索引</h2>
<p><strong>二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。</strong></p>
<p>唯一索引，普通索引，前缀索引等索引属于二级索引。</p>
<p>PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。</p>
<ol>
<li><strong>唯一索引(Unique Key)</strong>:唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</li>
<li><strong>普通索引(Index)</strong>:普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。</li>
<li><strong>前缀索引(Prefix)</strong>:前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，<br>
因为只取前几个字符。</li>
<li><strong>全文索引(Full Text)</strong>:全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。</li>
</ol>
<p>二级索引:</p>
<figure><figcaption>二级索引</figcaption></figure>
<h2> 聚簇索引与非聚簇索引</h2>
<h3> 聚簇索引（聚集索引）</h3>
<h4> 聚簇索引介绍</h4>
<p><strong>聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。</strong></p>
<p>在 MySQL 中，InnoDB 引擎的表的 <code>.ibd</code>文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</p>
<h4> 聚簇索引的优缺点</h4>
<p><strong>优点</strong>：</p>
<ul>
<li><strong>查询速度非常快</strong>：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。</li>
<li><strong>对排序查找和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li><strong>依赖于有序的数据</strong>：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</li>
<li><strong>更新代价大</strong>：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。</li>
</ul>
<h3> 非聚簇索引（非聚集索引）</h3>
<h4> 非聚簇索引介绍</h4>
<p><strong>非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</strong></p>
<p>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</p>
<h4> 非聚簇索引的优缺点</h4>
<p><strong>优点</strong>：</p>
<p>更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的</p>
<p><strong>缺点</strong>：</p>
<ul>
<li><strong>依赖于有序的数据</strong>:跟聚簇索引一样，非聚簇索引也依赖于有序的数据</li>
<li><strong>可能会二次查询(回表)</strong>:这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</li>
</ul>
<p>这是 MySQL 的表的文件截图:</p>
<figure><figcaption>MySQL 表的文件</figcaption></figure>
<p>聚簇索引和非聚簇索引:</p>
<figure><figcaption>聚簇索引和非聚簇索引</figcaption></figure>
<h4> 非聚簇索引一定回表查询吗(覆盖索引)?</h4>
<p><strong>非聚簇索引不一定回表查询。</strong></p>
<p>试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。</p>
<p>即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是！<strong>如果 SQL 查的就是主键呢?</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为覆盖索引了。</p>
<h2> 覆盖索引和联合索引</h2>
<h3> 覆盖索引</h3>
<p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 <strong>覆盖索引（Covering Index）</strong> 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！</p>
<p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</strong></p>
<blockquote>
<p>如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引，<br>
那么直接根据这个索引就可以查到数据，也无需回表。</p>
</blockquote>
<figure><figcaption>覆盖索引</figcaption></figure>
<p>我们这里简单演示一下覆盖索引的效果。</p>
<p>1、创建一个名为 <code>cus_order</code> 的表，来实际测试一下这种排序方式。为了测试方便， <code>cus_order</code> 这张表只有 <code>id</code>、<code>score</code>、<code>name</code>这 3 个字段。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义一个简单的存储过程（PROCEDURE）来插入 100w 测试数据。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存储过程定义完成之后，我们执行存储过程即可！</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待一会，100w 的测试数据就插入完成了！</p>
<p>3、创建覆盖索引并使用 <code>EXPLAIN</code> 命令分析。</p>
<p>为了能够对这 100w 数据按照 <code>score</code> 进行排序，我们需要执行下面的 SQL 语句。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>EXPLAIN</code> 命令分析这条 SQL 语句，通过 <code>Extra</code> 这一列的 <code>Using filesort</code> ，我们发现是没有用到覆盖索引的。</p>
<figure><figcaption></figcaption></figure>
<p>不过这也是理所应当，毕竟我们现在还没有创建索引呢！</p>
<p>我们这里以 <code>score</code> 和 <code>name</code> 两个字段建立联合索引：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建完成之后，再用 <code>EXPLAIN</code> 命令分析再次分析这条 SQL 语句。</p>
<figure><figcaption></figcaption></figure>
<p>通过 <code>Extra</code> 这一列的 <code>Using index</code> ，说明这条 SQL 语句成功使用了覆盖索引。</p>
<p>关于 <code>EXPLAIN</code> 命令的详细介绍请看：<a href="https://javaguide.cn/database/mysql/mysql-query-execution-plan.html" target="_blank" rel="noopener noreferrer">MySQL 执行计划分析</a>这篇文章。</p>
<h3> 联合索引</h3>
<p>使用表中的多个字段创建索引，就是 <strong>联合索引</strong>，也叫 <strong>组合索引</strong> 或 <strong>复合索引</strong>。</p>
<p>以 <code>score</code> 和 <code>name</code> 两个字段建立联合索引：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 最左前缀匹配原则</h3>
<p>最左前缀匹配原则指的是，在使用联合索引时，<strong>MySQL</strong> 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 <strong><code>&gt;</code></strong>、<strong><code>&lt;</code></strong> ）才会停止匹配。对于 <strong><code>&gt;=</code></strong>、<strong><code>&lt;=</code></strong>、<strong><code>BETWEEN</code></strong>、<strong><code>like</code></strong> 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。</p>
<p>相关阅读：<a href="https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ" target="_blank" rel="noopener noreferrer">联合索引的最左匹配原则全网都在说的一个错误结论</a>。</p>
<h2> 索引下推</h2>
<p><strong>索引下推（Index Condition Pushdown）</strong> 是 <strong>MySQL 5.6</strong> 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。</p>
<h2> 正确使用索引的一些建议</h2>
<h3> 选择合适的字段创建索引</h3>
<ul>
<li><strong>不为 NULL 的字段</strong>：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。</li>
<li><strong>被频繁查询的字段</strong>：我们创建索引的字段应该是查询操作非常频繁的字段。</li>
<li><strong>被作为条件查询的字段</strong>：被作为 WHERE 条件查询的字段，应该被考虑建立索引。</li>
<li><strong>频繁需要排序的字段</strong>：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</li>
<li><strong>被经常频繁用于连接的字段</strong>：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</li>
</ul>
<h3> 被频繁更新的字段应该慎重建立索引</h3>
<p>虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。</p>
<h3> 限制每张表上的索引数量</h3>
<p>索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。</p>
<p>索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p>
<p>因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。</p>
<h3> 尽可能的考虑建立联合索引而不是单列索引</h3>
<p>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</p>
<h3> 注意避免冗余索引</h3>
<p>冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p>
<h3> 字符串类型的字段使用前缀索引代替普通索引</h3>
<p>前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。</p>
<h3> 避免索引失效</h3>
<p>索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：</p>
<ul>
<li><s>使用 <code>SELECT *</code> 进行查询;</s> <code>SELECT *</code> 不会直接导致索引失效（如果不走索引大概率是因为 where 查询范围过大导致的），但它可能会带来一些其他的性能问题比如造成网络传输和数据处理的浪费、无法使用索引覆盖;</li>
<li>创建了组合索引，但查询条件未准守最左匹配原则;</li>
<li>在索引列上进行计算、函数、类型转换等操作;</li>
<li>以 % 开头的 LIKE 查询比如 <code>LIKE '%abc';</code>;</li>
<li>查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</li>
<li>IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);</li>
<li>发生<a href="https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html" target="_blank" rel="noopener noreferrer">隐式转换</a>;</li>
<li>……</li>
</ul>
<p>推荐阅读这篇文章：<a href="https://mp.weixin.qq.com/s/mwME3qukHBFul57WQLkOYg" target="_blank" rel="noopener noreferrer">美团暑期实习一面：MySQl 索引失效的场景有哪些？</a>。</p>
<h3> 删除长期未使用的索引</h3>
<p>删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。</p>
<p>MySQL 5.7 可以通过查询 <code>sys</code> 库的 <code>schema_unused_indexes</code> 视图来查询哪些索引从未被使用。</p>
<h3> 知道如何分析语句是否走索引查询</h3>
<p>我们可以使用 <code>EXPLAIN</code> 命令来分析 SQL 的 <strong>执行计划</strong> ，这样就知道语句是否命中索引了。执行计划是指一条 SQL 语句在经过 MySQL 查询优化器的优化会后，具体的执行方式。</p>
<p><code>EXPLAIN</code> 并不会真的去执行相关的语句，而是通过 <strong>查询优化器</strong> 对语句进行分析，找出最优的查询方案，并显示对应的信息。</p>
<p><code>EXPLAIN</code> 的输出格式如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各个字段的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>列名</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>SELECT 查询的序列标识符</td>
</tr>
<tr>
<td>select_type</td>
<td>SELECT 关键字对应的查询类型</td>
</tr>
<tr>
<td>table</td>
<td>用到的表名</td>
</tr>
<tr>
<td>partitions</td>
<td>匹配的分区，对于未分区的表，值为 NULL</td>
</tr>
<tr>
<td>type</td>
<td>表的访问方法</td>
</tr>
<tr>
<td>possible_keys</td>
<td>可能用到的索引</td>
</tr>
<tr>
<td>key</td>
<td>实际用到的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>所选索引的长度</td>
</tr>
<tr>
<td>ref</td>
<td>当使用索引等值查询时，与索引作比较的列或常量</td>
</tr>
<tr>
<td>rows</td>
<td>预计要读取的行数</td>
</tr>
<tr>
<td>filtered</td>
<td>按表条件过滤后，留存的记录数的百分比</td>
</tr>
<tr>
<td>Extra</td>
<td>附加信息</td>
</tr>
</tbody>
</table>
<p>篇幅问题，我这里只是简单介绍了一下 MySQL 执行计划，详细介绍请看：<a href="https://javaguide.cn/database/mysql/mysql-query-execution-plan.html" target="_blank" rel="noopener noreferrer">MySQL 执行计划分析</a>这篇文章。</p>
]]></content:encoded>
    </item>
    <item>
      <title>99.9%的人都会犯错的几个Python小常识！</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/%E5%87%A0%E4%B8%AA%E6%98%93%E9%94%99%E7%9A%84Python%E5%B0%8F%E5%B8%B8%E8%AF%86.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/%E5%87%A0%E4%B8%AA%E6%98%93%E9%94%99%E7%9A%84Python%E5%B0%8F%E5%B8%B8%E8%AF%86.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">99.9%的人都会犯错的几个Python小常识！</source>
      <description>大家好，我是暴走の海鸽~ 本期整理了几个基础python防坑小常识，希望对大家有所帮助。 1. type == object？ 执行以下代码的结果是什么： ```python isinstance(type, object) True isinstance(object, type) True isinstance(object, object)...</description>
      <pubDate>Tue, 05 Sep 2023 09:26:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>大家好，我是暴走の海鸽~</p>
<p>本期整理了几个基础python防坑小常识，希望对大家有所帮助。</p>
<h2> 1. type == object？</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>isinstance(type, object)：这个表达式返回 True，因为在 Python 中，type 是一种类型，而 object 也是一种类型，它们都是对象的基类。</p>
</li>
<li>
<p>isinstance(object, type)：同样返回 True，因为 object 是 Python 中所有对象的基类，因此它也可以被视为一种类型。</p>
</li>
<li>
<p>isinstance(object, object)：这个表达式也返回 True，因为 object 是 object 类型的实例，它自己也是一种对象。</p>
</li>
<li>
<p>isinstance(type, type)：同样返回 True，因为 type 本身也是一种类型，可以用来描述其他类型。</p>
</li>
</ul>
<p>在 Python 中，所有东西都是对象，因此对于对象的任何实例检查都将返回<code>True</code>。</p>
<ul>
<li><code>isinstance(Anything, object) --&gt; True</code></li>
</ul>
<p>Python 的 type 表示构建所有 Python 类型的元类。因此，所有类型，如 int、str、object 都是 type 类的实例，而 type 类本身也是一个对象，与 Python 中的一切一样。</p>
<p>type 是 Python 中唯一一个自身是自己实例的对象。</p>
<h2> 2. all函数、any函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据内置函数 any 的定义，我们知道它将：</p>
<p>如果 iterable 中的任何元素为 True，则返回 True。</p>
<p>Python 中的逻辑运算符是惰性的，算法是查找第一个 True 元素的出现情况，如果没有找到，则返回 False。由于序列为空，因此没有元素可以是 True，因此 any([]) 返回 False。</p>
<p>all 的例子稍微有些复杂，因为它表示真空的真实性。与链式惰性逻辑运算符类似，算法是查找第一个 False 元素，如果没有找到，则返回 True。由于在空序列中没有false 元素，因此 all([]) 返回 True。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3. 链式运算</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>
在python中，<code>==</code>运算符和<code>in</code>运算符都具有相同的优先级，并且它们都是从左到右结合的。因此<code>False == False in [False]</code>实际上是<code>(False == False) and (False in [False]</code>的简写形式。</p>
<p>加个栗子理解下：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><a href="https://stackoverflow.com/questions/7479808/python-operator-precedence-of-in-and-comparison" target="_blank" rel="noopener noreferrer">'1' in '11' == True</a><br>
<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" target="_blank" rel="noopener noreferrer">python运算符优先级和结合性</a></p>
</blockquote>
<h2> 4. sorted函数和reversed函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：sorted 方法返回的是一个list，reversed 方法返回的是一个iterator。</p>
</blockquote>
<h2> 5. 布尔值</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Python 将 False 视为 0， True 视为 1</p>
</blockquote>
<h2> 6. round函数</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么 round(5 / 2) 返回 2 而不是 3？这里的问题在于 Python 的 round 方法实现了银行家舍入，其中所有半值都将四舍五入到最接近的偶数。<br>
即：</p>
<ul>
<li>
<p>如果小数部分小于 0.5，则舍弃小数部分，不进行舍入。</p>
</li>
<li>
<p>如果小数部分大于 0.5，则向上舍入到最接近的整数。</p>
</li>
<li>
<p>如果小数部分等于 0.5，且前一位的整数部分是奇数，则向上舍入到最接近的偶数。</p>
</li>
<li>
<p>如果小数部分等于 0.5，且前一位的整数部分是偶数，则向下舍入到最接近的偶数。</p>
</li>
</ul>
<h2> 7. python列表+和+=的区别</h2>
<p><code>+</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+=</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<ul>
<li><code>+</code>用于连接两个列表，生成一个新的列表。</li>
<li><code>+=</code>用于将一个列表与另一个列表相加，并将结果存储在原始列表中，修改原始列表。</li>
</ul>
</blockquote>
<h2> 8. 列表del元素</h2>
<p>执行以下代码的结果是什么：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们试图删除列表中的偶数元素。然而，这个代码会导致错误，因为在删除元素后，列表的长度发生变化，但循环中的索引 <code>i</code> 仍然会增加，这可能会导致索引超出列表边界的错误。</p>
<p>为了避免这种错误，可以使用以下方法之一来移除元素：</p>
<ol>
<li>创建一个新列表，只包含要保留的元素，而不删除原始列表的元素。</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>使用倒序循环，以避免索引问题。</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法可以避免在移除元素时引发错误，并确保代码正常运行。</p>
<h2> 9. 修改sum([])的默认返回值</h2>
<p>我们知道<code>sum([])</code>的返回值为0，那有没有办法修改呢，比如返回<code>0.0</code>,答案是：有的。而且就在sum函数的签名里。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 小结</h2>
<p>尽管如此，Python 仍然以其清晰透明的编程语言特性而闻名。在编写本文时，我遇到了许多这样的代码片段，它们可能在早期版本的 Python 中表现出反直觉的行为，但在新版本中得到了修复或社区的解释。上述示例代表了 Python 语法的某些边界情况，而在实际的商业项目中，遇到这些情况的机会相对较小。</p>
<p>然而，检查和理解这样的“陷阱”可以帮助您更深入地理解 Python 语言的内部结构，从而避免在编写代码时使用不常见的用例和可疑的编程做法，这可能会导致意外的错误和故障。因此，了解 Python 的行为和语法规则仍然是一个有价值的努力，尤其是对于那些希望编写高质量、可维护代码的开发人员来说。</p>
]]></content:encoded>
    </item>
    <item>
      <title>python面试题(2)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230830_kykj%E9%9D%A2%E8%AF%95%E9%A2%98.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230830_kykj%E9%9D%A2%E8%AF%95%E9%A2%98.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">python面试题(2)</source>
      <description>一、 使用python实现一个单例模式对象。 在 Python 中，你可以使用多种方法来实现单例模式，其中最常见的方法是使用装饰器或者元类。下面我会为你展示两种常见的实现方式：使用装饰器和使用元类。 1. 使用装饰器实现单例模式： ```python def singleton(cls): instances = {} def get_instance...</description>
      <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 一、 使用python实现一个单例模式对象。</h2>
<p>在 Python 中，你可以使用多种方法来实现单例模式，其中最常见的方法是使用装饰器或者元类。下面我会为你展示两种常见的实现方式：使用装饰器和使用元类。</p>
<p><strong>1. 使用装饰器实现单例模式：</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用元类实现单例模式：</strong></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法都可以实现单例模式，你可以根据自己的喜好选择其中一种。元类的方法在一些高级场景下可能更灵活，但装饰器的方法更为简洁。</p>
<p>当使用 <code>__new__</code> 函数来实现单例模式时，你可以在 <code>__new__</code> 方法中控制实例的创建和返回。这里我将为你展示如何使用 <code>__new__</code> 函数实现单例模式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>__new__</code> 方法首先检查 <code>_instance</code> 属性，如果该属性为 <code>None</code>，则创建一个新的实例并将其赋值给 <code>_instance</code>。如果 <code>_instance</code> 不为 <code>None</code>，则返回现有的实例。这样确保了只有一个实例被创建和使用。</p>
<p>注意，这种方法不是线程安全的。如果你需要在多线程环境下使用单例模式，你需要考虑线程安全性并可能采取额外的措施来保护 <code>_instance</code> 的访问和修改。</p>
<p><code>优化</code><br>
实现并发安全的单例模式需要考虑多线程或多进程环境下的竞争条件。以下是使用线程安全的方式来实现并发安全的单例模式的示例：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用了一个互斥锁 (<code>_lock</code>) 来确保在创建实例时只有一个线程能够进入临界区。这样可以防止多个线程同时创建实例，从而保证了单例模式的线程安全性。</p>
<p>请注意，这只是一个线程安全的示例。如果你需要在多进程环境中使用单例模式，你可能需要使用 <code>multiprocessing.Lock</code> 来实现进程间的同步。</p>
<p>此外，还可以考虑使用更高级的线程安全工具，例如 <code>threading.RLock</code> 或 <code>threading.Condition</code>，以便更好地满足你的并发需求。</p>
<blockquote>
<p>这里只是给出一些范例，具体使用及优化请根据实际场景适配。</p>
</blockquote>
<h2> 二、 请使用异步的方式（多进程/线程/协程等）循环交替打印A和B各50次。</h2>
<p>输出示例如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>协程版</code><br>
下面是使用异步协程的方式来实现交替打印 A 和 B 各 50 次的示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个异步函数 <code>print_a_b</code> 来循环打印指定的值（'A' 或 'B'）。我们使用 <code>asyncio.Lock</code> 来确保打印操作的互斥，从而避免同时打印 A 和 B。</p>
<p>通过创建两个异步任务（分别打印 A 和 B），我们使用 <code>asyncio.gather</code> 来等待它们完成。</p>
<p>运行以上代码，你会得到类似于你描述的交替打印 A 和 B 的输出。注意，由于异步性质，可能会有微小的延迟，但总体上会保持交替打印。</p>
<p><code>多线程版</code></p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个 AlternatePrinter 类，其中包含两个方法 print_a 和 print_b，分别用于打印 A 和 B。我们使用条件变量 threading.Condition 来确保线程的交替执行。在每次打印完后，线程会改变 turn 变量的值，然后通过 condition.notify() 唤醒等待的线程。</p>
<p>通过创建两个线程分别执行 print_a 和 print_b，线程将会交替打印 A 和 B。</p>
<p>运行以上代码，你会得到你所期望的交替打印 A 和 B 的输出。</p>
<h2> 三、你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题可以使用二分查找来解决，以减少调用 <code>isBadVersion</code> 函数的次数。由于每个错误的版本之后的版本都是错误的，我们可以将问题转化为在版本列表中寻找第一个满足条件的版本，也就是找到最左边的 <code>True</code> 值。以下是使用二分查找的示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用二分查找来找到第一个错误的版本。我们初始化 <code>left</code> 和 <code>right</code> 分别为 1 和 n，然后在每一步中计算 <code>mid</code>，并根据 <code>isBadVersion(mid)</code> 的结果来更新 <code>left</code> 和 <code>right</code>。如果 <code>isBadVersion(mid)</code> 返回 <code>True</code>，说明当前版本是错误的，我们将搜索范围缩小到左半部分；否则，搜索范围缩小到右半部分。</p>
<p>最终，当 <code>left</code> 和 <code>right</code> 相等时，就找到了第一个错误的版本，返回该版本号即可。</p>
<p>这种方法有效地减少了对 <code>isBadVersion</code> 函数的调用次数，通过二分查找的方式快速定位到第一个错误的版本。</p>
<h2> 四、请简述下python中的__new__和__init__的区别。</h2>
<p>在Python中，<code>__new__</code> 和 <code>__init__</code> 是两个特殊的方法，用于创建和初始化对象。它们在类的实例化过程中起着不同的作用。</p>
<ol>
<li>
<p><code>__new__</code> 方法：</p>
<ul>
<li><code>__new__</code> 是一个类级别的方法，负责创建并返回实例对象。它在对象创建之前调用，并且通常是静态方法，接受一个类作为第一个参数，然后传递其他参数来创建实例。</li>
<li>该方法的主要作用是控制实例对象的创建过程，可以在创建实例之前做一些额外的处理，或者返回一个已有的实例（单例模式）。</li>
<li>如果重写了 <code>__new__</code> 方法，通常需要确保返回一个有效的实例对象，否则会导致后续的初始化（<code>__init__</code>）等步骤无法进行。</li>
</ul>
</li>
<li>
<p><code>__init__</code> 方法：</p>
<ul>
<li><code>__init__</code> 是一个实例级别的方法，负责初始化实例的属性。它在对象创建之后调用，接受实例对象作为第一个参数，然后可以传递其他参数来初始化实例的属性。</li>
<li>该方法的主要作用是设置对象的属性，进行一些必要的初始化操作。</li>
<li><code>__init__</code> 不负责创建实例对象，而是在实例已经创建之后，对其进行属性的初始化。</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><code>__new__</code> 用于创建实例对象，它是类级别的方法，控制对象的创建过程。</li>
<li><code>__init__</code> 用于初始化实例对象的属性，它是实例级别的方法，对已经创建的对象进行属性的设置。</li>
</ul>
<p>通常情况下，当你想要自定义对象的创建过程时，你会重写 <code>__new__</code> 方法；而当你需要设置对象的属性或执行其他初始化操作时，你会重写 <code>__init__</code> 方法。</p>
<h2> 五、请描述下Python的多线程管理。</h2>
<p>在 Python 中，多线程管理是通过 <code>threading</code> 模块来实现的。Python 中的多线程是基于操作系统的线程实现的，但由于 Python 全局解释器锁（GIL）的存在，多线程并不能真正实现并行运行。GIL 导致在同一时刻只有一个线程可以执行 Python 字节码，从而限制了多线程在 CPU 密集型任务中的性能表现。</p>
<p>以下是 Python 多线程管理的一些关键概念和函数：</p>
<ol>
<li>
<p><strong>线程创建：</strong> 使用 <code>threading.Thread</code> 类可以创建一个新的线程。通过传入一个函数作为参数，可以指定线程要执行的操作。</p>
</li>
<li>
<p><strong>线程启动：</strong> 调用线程对象的 <code>start()</code> 方法会启动线程，并开始执行指定的函数。</p>
</li>
<li>
<p><strong>线程同步：</strong> 在多线程环境中，由于共享资源的存在，可能会出现竞争条件。为了确保线程安全，可以使用锁（<code>threading.Lock</code>）等同步原语来协调线程之间的操作。</p>
</li>
<li>
<p><strong>锁机制：</strong> 锁（<code>threading.Lock</code>）用于防止多个线程同时访问共享资源。在一个线程获得锁之后，其他线程必须等待锁被释放后才能获取锁。</p>
</li>
<li>
<p><strong>线程间通信：</strong> 多个线程之间可能需要相互通信和协调，可以使用 <code>threading.Event</code>、<code>threading.Condition</code>、<code>threading.Semaphore</code> 等进行线程间通信。</p>
</li>
<li>
<p><strong>线程状态：</strong> 线程可以处于不同的状态，如就绪、运行、阻塞等。可以使用线程对象的 <code>is_alive()</code> 方法来检查线程是否还在运行。</p>
</li>
<li>
<p><strong>守护线程：</strong> 可以将线程设置为守护线程（<code>thread.daemon = True</code>），这样在主线程退出时，守护线程会随之结束。</p>
</li>
<li>
<p><strong>线程池：</strong> <code>concurrent.futures</code> 模块提供了线程池和进程池的高级接口，用于并行地执行函数。</p>
</li>
</ol>
<p>需要注意的是，由于 GIL 的存在，Python 中的多线程主要适用于 I/O 密集型任务，如网络请求、文件操作等。对于 CPU 密集型任务，多线程并不能充分利用多核 CPU，此时可以考虑使用多进程来实现并行运算。</p>
<p>总的来说，Python 的多线程管理提供了一些基本的线程操作和同步机制，但由于 GIL 的限制，多线程在并行计算方面可能不如其他语言或多进程方式。</p>
<h2> 六、请列出Python中可变数据类型和不可变数据类型，CPython是如何实现的？</h2>
<p>在 Python 中，数据类型分为可变和不可变两种。可变数据类型是指对象的值可以被修改，而不可变数据类型是指对象的值一旦创建就无法更改。以下是 Python 中常见的可变和不可变数据类型：</p>
<p>可变数据类型（Mutable）：</p>
<ol>
<li>列表（List）</li>
<li>字典（Dictionary）</li>
<li>集合（Set）</li>
</ol>
<p>不可变数据类型（Immutable）：</p>
<ol>
<li>数字（int、float、complex）</li>
<li>字符串（str）</li>
<li>元组（tuple）</li>
<li>冻结集合（frozenset）</li>
</ol>
<p>CPython 是 Python 的标准实现，它在内存中的数据存储方式与数据类型的可变性密切相关。下面简要描述了 CPython 如何实现可变和不可变数据类型：</p>
<p><strong>可变数据类型（如列表、字典、集合）的实现：</strong></p>
<ol>
<li>在内存中创建一个对象，对象包含了实际的数据和相关的控制信息，如对象类型、大小等。</li>
<li>对象中的数据可以被修改，例如对列表进行添加、删除、修改等操作。这些操作可能会引起对象在内存中的位置发生变化，即重新分配内存空间。</li>
<li>当对象被修改时，CPython 会确保相关的引用仍然指向这个对象，从而保证所有引用该对象的变量都能看到修改后的值。</li>
</ol>
<p><strong>不可变数据类型（如数字、字符串、元组）的实现：</strong></p>
<ol>
<li>在内存中创建一个对象，对象包含实际的数据和控制信息。</li>
<li>一旦对象被创建，它的值就无法更改。如果对一个不可变对象进行修改操作，实际上会创建一个新的对象，并将修改后的值赋予新的对象。</li>
<li>不可变对象的值在内存中是固定的，这使得可以对多个变量共享同一个对象，从而节省内存。</li>
</ol>
<p>需要注意的是，不可变对象之所以被设计成不可变的，一方面是为了避免意外修改数据，另一方面是为了在实现中可以进行一些优化，例如缓存常见的不可变对象，以减少内存占用。</p>
<p>总之，CPython 的数据类型实现方式是基于对象和引用的，根据对象的可变性来决定如何存储和操作数据。这种实现方式使得 Python 的变量和数据类型的使用变得灵活且易于理解。</p>
<h2> 七、请简述下python 协程的实现原理？协程一般适用于什么场景？</h2>
<p>Python 协程的实现原理基于生成器（Generator）和 <code>yield</code> 关键字，以及使用特定的库（如 <code>asyncio</code>）来实现异步编程。协程通过避免阻塞并允许在单个线程内切换执行，实现了高效的异步操作。</p>
<p>实现协程的关键点如下：</p>
<ol>
<li>
<p><strong>生成器（Generator）：</strong> 生成器是一种特殊的函数，它使用 <code>yield</code> 关键字来暂停函数的执行并生成一个值，然后在后续调用中恢复执行。生成器在每次调用时会执行到 <code>yield</code> 语句，并将值返回给调用者。</p>
</li>
<li>
<p><strong><code>yield</code> 关键字：</strong> <code>yield</code> 用于将控制权返回给调用者，并且保留函数的状态。调用者可以使用 <code>.send()</code> 方法向生成器发送值，这个值会被 <code>yield</code> 表达式接收。</p>
</li>
<li>
<p><strong>异步库（如 asyncio）：</strong> 在 Python 中，为了实现高效的协程，通常使用异步库，如 <code>asyncio</code>。<code>asyncio</code> 提供了协程和事件循环，允许在单个线程内执行多个协程，根据需要进行切换。</p>
</li>
</ol>
<p>协程适用于以下场景：</p>
<ol>
<li>
<p><strong>异步编程：</strong> 协程在异步编程中起到关键作用。它可以处理大量并发任务，如网络请求、数据库查询等，而不会阻塞整个程序的执行。</p>
</li>
<li>
<p><strong>事件驱动编程：</strong> 协程适用于事件驱动的编程模型。例如，在用户交互、触发事件、消息传递等情况下，协程可以很好地处理异步任务。</p>
</li>
<li>
<p><strong>I/O 密集型任务：</strong> 当任务主要涉及 I/O 操作时，如读写文件、网络通信等，协程能够在 I/O 操作时切换到其他任务，从而提高程序的效率。</p>
</li>
<li>
<p><strong>并发任务管理：</strong> 协程可以方便地管理大量并发任务，而不需要关注线程或进程的开销和同步问题。</p>
</li>
</ol>
<p>总之，协程适用于需要高效处理异步操作和并发任务的场景。通过避免阻塞，协程可以在单线程内实现多个任务的协同执行，提高了程序的并发性能和响应性。</p>
<h2> 八、请简述Python的垃圾回收机制。</h2>
<p><a href="https://zhuanlan.zhihu.com/p/108683483" target="_blank" rel="noopener noreferrer">Python语法入门之垃圾回收机制</a><br>
<a href="https://cloud.tencent.com/developer/article/2045561" target="_blank" rel="noopener noreferrer">一文读懂Python垃圾回收机制</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>python面试题(1)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230829_%E6%B7%B1%E5%9C%B3%E5%8D%83%E5%B7%A1%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E9%A2%98.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230829_%E6%B7%B1%E5%9C%B3%E5%8D%83%E5%B7%A1%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E9%A2%98.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">python面试题(1)</source>
      <description>递归知道吗？简单说说吧 递归是一种算法或编程技术，它是指在解决问题时使用函数自身的调用。简单来说，递归是将一个问题分解成一个或多个与原问题类似但规模较小的子问题来解决的方法。这些子问题会不断地缩小，直到它们变得足够简单，可以直接求解。 递归的关键在于分解和基本情况（也称为递归基）： 1. 分解（Divide）： 在解决问题时，将问题分解成更小的子问题。...</description>
      <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 递归知道吗？简单说说吧</h2>
<p>递归是一种算法或编程技术，它是指在解决问题时使用函数自身的调用。简单来说，递归是将一个问题分解成一个或多个与原问题类似但规模较小的子问题来解决的方法。这些子问题会不断地缩小，直到它们变得足够简单，可以直接求解。</p>
<p>递归的关键在于分解和基本情况（也称为递归基）：</p>
<ol>
<li>
<p><strong>分解（Divide）：</strong> 在解决问题时，将问题分解成更小的子问题。每次递归调用时，问题的规模会减小，直到达到基本情况。</p>
</li>
<li>
<p><strong>基本情况（Base Case）：</strong> 这是递归的终止条件。当问题变得足够小，可以直接求解时，递归不再继续，而是返回一个确定的值。</p>
</li>
</ol>
<p>在使用递归时，确保每次递归调用都朝着基本情况靠近，以避免无限递归。如果每次递归调用都足够接近基本情况，递归最终会收敛到基本情况并停止。</p>
<p>一个经典的递归例子是计算阶乘。阶乘 n! 的定义是 n! = n * (n-1)!，其中基本情况是 0! = 1 和 1! = 1。</p>
<p>递归在编程中非常有用，但需要小心使用，因为不正确的递归调用可能导致无限循环和性能问题。理解问题如何被分解成更小的子问题以及何时达到基本情况是掌握递归的关键。</p>
<h2> 快排会吗？写一下?</h2>
<p>当然，我可以帮你写一个快速排序算法的示例代码。快速排序是一种常用的排序算法，它的基本思想是通过选择一个基准元素，将数组分成左右两部分，使得左边的元素都小于基准，右边的元素都大于基准，然后递归地对左右两部分进行排序。</p>
<p>以下是一个用 Python 实现的快速排序示例代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>quick_sort</code> 函数接受一个列表 <code>arr</code> 作为输入，然后递归地对左右两部分进行排序，并将排好序的左、中、右三个部分合并起来，最终得到完整的有序数组。这个例子中的基准元素选择方法是取数组中间的元素，实际上也可以选择其他的方法。</p>
<p>请注意，虽然这个示例代码演示了快速排序的基本思想，但在实际应用中，为了避免在最坏情况下的性能问题，可能需要考虑一些优化措施，比如随机选择基准元素，使用三路快排等。</p>
<h2> s = "sdsdscdffgdfcsdsdsd", 计算字符串s中c出现的位置和次数</h2>
<p>要计算字符串中字符 "c" 出现的位置和次数，你可以使用以下 Python 代码：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会遍历字符串 <code>s</code> 中的每个字符，如果字符等于目标字符 <code>c</code>，就将其位置添加到 <code>positions</code> 列表中，并增加计数器 <code>count</code> 的值。最后，打印出字符 "c" 的出现位置和总次数。</p>
]]></content:encoded>
    </item>
    <item>
      <title>50道SQL经典面试题(上)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8A).html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8A).html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">50道SQL经典面试题(上)</source>
      <description>原创 丶平凡世界 最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。 &amp;#x20; 我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。 &amp;#x20; 由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。 一、表结构 1、...</description>
      <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 50道SQL经典面试题(上)</h1>
<p>原创 丶平凡世界</p>
<p>最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。  </p>
<p>我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。  </p>
<p>由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。</p>
<p><strong>一、表结构</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二、表之间的关系</strong></p>
<p>四张表之间的关系如下图：</p>
<figure><figcaption></figcaption></figure>
<p>我们来解读一下上面的关系：  </p>
<p>1、课程表Course的课程编号(Cid)作为主键，在成绩表(SC)中可以看到一个或多个学生的课程分数，两表之间是属于<code>1：n</code>的关系。同理学生表(Student)与成绩表(SC)也是<code>1：n</code>的关系</p>
<p>2、教师表Teacher的教师编号(Tid)作为主键，在课程表(Course)中可以带一门或多门课程，两表之间也是属于1：n的关系。</p>
<p><strong>三、测试数据</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p>
<figure><figcaption></figcaption></figure>
<p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p><strong>四、面试题及参考答案</strong></p>
<p>1、查询" 01 "课程比" 02"课程成绩高的学生的信息及课程分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、查询同时存在" 01 "课程和"02 "课程的情况</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、查询存在" 01 "课程但可能不存在"02 "课程的情况(不存在时显示为 null )</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、查询不存在" 01 "课程但存在"02 "课程的情况</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、查询在 SC 表存在成绩的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、查有成绩的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9、查询「李」姓老师的数量 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10、查询学过「张三」老师授课的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>11、查询没有学全所有课程的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>12、查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>13、查询和" 01 "号的同学学习的课程完全相同的其他同学的信息 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>14、查询没学过"张三"老师讲授的任一门课程的学生姓名 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>16、检索" 01 "课程分数小于 60，按分数降序排列的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>18、查询各科成绩最高分、最低分和平均分：</p>
<p>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率  </p>
<p>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（提示：可以左右滑动代码）</p>
<p>19、按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>20 按各科成绩进行排序，并显示排名， Score 重复时合并名次</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>21、查询学生的总成绩，并进行排名，总分重复时保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>22 、查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>23、统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>24、查询各科成绩前三名的记录</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>25、查询每门课程被选修的学生数 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>50道SQL经典面试题(下)</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8B).html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/50%E9%81%93SQL%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98(%E4%B8%8B).html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">50道SQL经典面试题(下)</source>
      <description>50道SQL经典面试题(下)</description>
      <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 50道SQL经典面试题(下)</h1>
<p>原创 丶平凡世界 <a href="http://wiznote-desktop/ks/note/view/79a579df-0e97-4971-8f60-86ed3beffd85/92198ca5-d9f0-4d98-ab67-d20f976da33d/index.html?lang=zh-cn&amp;readerType=common&amp;isPersonalKb=1&amp;canEdit=1&amp;userGuid=79a579df-0e97-4971-8f60-86ed3beffd85&amp;alias=godl9211&amp;pSpacing=16&amp;darkBgColor=transparent&amp;darkTextColor=#f0f0f0&amp;isFromWizClipper=1&amp;xssNoFrame=1&amp;themeMode=auto&amp;resourcesPath=&amp;frameKey=normal_note_92198ca5-d9f0-4d98-ab67-d20f976da33d" target="_blank" rel="noopener noreferrer">SQL数据库开发</a> </p>
<p>最近在收集SQL每日一题时，找到这套比较经典的SQL面试题。  </p>
<p>我根据题目重新梳理了一遍，包括表结构，表之间的关系，测试数据，题目，参考答案等。其中大部分参考答案在各种数据库平台上通用。  </p>
<p>由于题目数量较多（足足50道题），小伙伴们可能不容易消化理解，于是将内容分为上下两篇，希望对你有所帮助。</p>
<p><strong>一、表结构</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二、表之间的关系</strong></p>
<p>四张表之间的关系如下图：</p>
<figure><figcaption></figcaption></figure>
<p>我们来解读一下上面的关系：  </p>
<p>1、课程表Course的课程编号(Cid)作为主键，在成绩表(SC)中可以看到一个或多个学生的课程分数，两表之间是属于<code>1：n</code>的关系。同理学生表(Student)与成绩表(SC)也是<code>1：n</code>的关系</p>
<p>2、教师表Teacher的教师编号(Tid)作为主键，在课程表(Course)中可以带一门或多门课程，两表之间也是属于1：n的关系。</p>
<p><strong>三、测试数据</strong></p>
<p>1、学生表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p>
<figure><figcaption></figcaption></figure>
<p>2、课程表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>3、教师表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p>4、成绩表</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：  </p>
<figure><figcaption></figcaption></figure>
<p><strong>四、面试题及参考答案</strong></p>
<p>26、查询出只选修两门课程的学生学号和姓名 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>27、查询男生、女生人数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>28、查询名字中含有「风」字的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>29、查询同名同性学生名单，并统计这些人数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>30、查询 1990 年出生的学生名单</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>31、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>32、查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>33、查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>34、查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>35、查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>36、查询不及格的课程学生姓名，课程名及分数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>37、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>38、求每门课程的学生人数（假设每个学生都有参加考试且有成绩）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>39、成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>40、成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>41、查询每门功成绩最好的前两名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>42、统计每门课程的学生选修人数（超过5人的课程才统计），要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>43、检索至少选修两门课程的学生学号 </p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>44、查询选修了全部课程的学生信息</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>45、查询各学生的年龄，只按年份来算</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>46、按照出生日期来算，当前月日小于出生日期的月日则年龄减1岁</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>47、查询本周过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>48、查询下周过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>49、查询本月过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>50、查询下月过生日的学生</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是50道经典SQL面试题的全部内容</p>
]]></content:encoded>
    </item>
    <item>
      <title>golang学习路线</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_golang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_golang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">golang学习路线</source>
      <description>前言 为了方便大家能够按顺序系统的进行学习，我会将相关文章进行梳理。 让我们手牵着手，一起走，少走弯路，又快又好的成为Gopher，Let&amp;apos;s Go。 总体路线 概览 首先分享了我的学习经验：讲一讲Go语言为什么值得学习？以及我是如何高效学习Go语言的。 然后就是刻意练习了，需要大家和我一样，坚持每天手撸代码，多敲多想：通过对Go基础篇的学习，可以从...</description>
      <pubDate>Tue, 22 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 前言</h2>
<p>为了方便大家能够按顺序系统的进行学习，我会将相关文章进行梳理。</p>
<p>让我们手牵着手，一起走，少走弯路，又快又好的成为<strong>Gopher</strong>，Let's Go。</p>
<h2> 总体路线</h2>
<h2> 概览</h2>
<p>首先分享了我的<strong>学习经验</strong>：讲一讲Go语言为什么值得学习？以及我是如何高效学习Go语言的。</p>
<p>然后就是刻意练习了，需要大家和我一样，坚持每天手撸代码，多敲多想：</p>
<ul>
<li>
<p>通过对<strong>Go基础篇</strong>的学习，可以从Go小白升级成为能用Go撸代码的gopher。</p>
</li>
<li>
<p>通过对<strong>Go进阶篇</strong>的学习，可以从Go初级程序员升级为Go中级工程师。</p>
</li>
<li>
<p>通过<strong>Go  JAVA类比篇</strong>的学习，可以更好的理解Go的优势，更好的理解Go的设计思想。</p>
</li>
<li>
<p><strong>框架篇</strong> 不仅对比了目前主流的Go框架，还重点讲解了GoFrame框架相关的知识点。</p>
</li>
</ul>
<p><strong>GoFrame</strong>是类似PHP-Laravel, Java-SpringBoot的Go企业级开发框架，非常值得大家学习。</p>
<p>最后，会通过几篇<strong>应用实践</strong>的文章收尾，带大家体验一下用Go开发企业项目的快乐。</p>
<blockquote>
<p>说明：下面的文章没有标注作者信息的是我的文章；标明作者的都是优秀创作者投稿，经过筛选的优质文章。</p>
</blockquote>
<h2> 为什么学Go?</h2>
<p><a href="https://juejin.cn/post/7064778754979004447" target="_blank" rel="noopener noreferrer"># Go语言为什么值得学习？</a> 作者：王中阳</p>
<p><a href="https://juejin.cn/post/7110226868418117639" target="_blank" rel="noopener noreferrer"># Go 在云原生时代的优势</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h2> 学习经验分享</h2>
<p><a href="https://juejin.cn/post/6949109361331568670" target="_blank" rel="noopener noreferrer"># 回顾一下我的Go学习之旅 | Go 主题月</a> 作者：王中阳</p>
<p><a href="https://juejin.cn/post/7061777327641853960" target="_blank" rel="noopener noreferrer"># [译]如何真正学习Go 语言</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<p><a href="https://juejin.cn/post/7103887534299545613" target="_blank" rel="noopener noreferrer"># 写Go最近踩的坑 | 日志、内聚和复用、gjson、调整心态</a></p>
<h2> golang筑基之路</h2>
<h3> 入门视频及系列教程</h3>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/BV1gf4y1r79E/?spm_id_from=333.999.0.0&amp;vd_source=f6ed028b29a932df5d0a09a54802e1b5" target="_blank" rel="noopener noreferrer">刘丹冰老师教学视频:8小时转职Golang工程师</a></p>
</li>
<li>
<p><a href="https://www.liwenzhou.com/posts/Go/golang-menu/" target="_blank" rel="noopener noreferrer">李文周老师博客</a></p>
</li>
</ul>
<h3> 数据类型</h3>
<p><a href="https://juejin.cn/post/6942795881049489438/" target="_blank" rel="noopener noreferrer">#【Go基础】编译、变量、常量、基本数据类型、字符串</a></p>
<p><a href="https://juejin.cn/post/7068456474133364743/" target="_blank" rel="noopener noreferrer"># Go const和iota 使用实战</a></p>
<p><a href="https://juejin.cn/post/7068457967133130782" target="_blank" rel="noopener noreferrer"># Go基础数据类型使用实战：int float bool</a></p>
<h3> 切片</h3>
<p><a href="https://juejin.cn/post/7071960543283642404" target="_blank" rel="noopener noreferrer"># Go slice切片详解和实战</a></p>
<p><a href="https://juejin.cn/post/7068573594879524894" target="_blank" rel="noopener noreferrer"># Go slice切片详解和实战(2) make append copy</a></p>
<p><a href="https://juejin.cn/post/7122495050067476510" target="_blank" rel="noopener noreferrer"># 深入理解 slice 非常硬核！</a> 作者：<a href="https://juejin.cn/user/2344623087289965" target="_blank" rel="noopener noreferrer"># 二牛QAQ</a></p>
<h3> 数组</h3>
<p><a href="https://juejin.cn/post/7072165701036802055" target="_blank" rel="noopener noreferrer"># Go 数组详解和实战</a></p>
<p><a href="https://juejin.cn/post/7072905649708859429" target="_blank" rel="noopener noreferrer"># Go map详解和实战</a></p>
<h3> rune</h3>
<p><a href="https://juejin.cn/post/7068726981159829541" target="_blank" rel="noopener noreferrer"># Go rune详解和实战</a></p>
<h3> 指针</h3>
<p><a href="https://juejin.cn/post/7072502044170387492" target="_blank" rel="noopener noreferrer"># Go pointer &amp; switch fallthrough 详解和实战</a></p>
<h3> 流程控制</h3>
<p><a href="https://juejin.cn/post/7069549500649439245" target="_blank" rel="noopener noreferrer"># go if判断和for循环实战 goto使用的那些坑</a></p>
<h3> 函数</h3>
<p><a href="https://juejin.cn/post/7073279289101123614" target="_blank" rel="noopener noreferrer"># Go 函数详解 func 匿名函数 闭包</a></p>
<h3> ORM</h3>
<p><a href="https://www.liwenzhou.com/posts/Go/gorm/" target="_blank" rel="noopener noreferrer"># GORM入门指南</a> 作者</p>
<p><a href="https://juejin.cn/post/7103531271803912199" target="_blank" rel="noopener noreferrer"># Go 语言中操作 MySQL 数据库</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<p><a href="https://juejin.cn/post/7147214210324234271" target="_blank" rel="noopener noreferrer"># golang 基于 mysql 实现分布式读写锁</a> 作者：<a href="https://juejin.cn/user/2344623087289965" target="_blank" rel="noopener noreferrer"># 二牛QAQ</a></p>
<h3> 部署</h3>
<p><a href="https://juejin.cn/post/6943843305750970399" target="_blank" rel="noopener noreferrer"># 如何优雅的通过Shell脚本一键部署GO项目到服务器</a></p>
<h3> 扩展包</h3>
<p><a href="https://juejin.cn/post/6943897665960689678" target="_blank" rel="noopener noreferrer"># Go时间包jsontime深入浅出 如何优雅的对时间进行格式化 ｜Go 主题月</a></p>
<p><a href="https://juejin.cn/post/6945023713930641445" target="_blank" rel="noopener noreferrer"># Go语言json包的使用技巧</a></p>
<p><a href="https://juejin.cn/post/7088342353638850567" target="_blank" rel="noopener noreferrer"># Go 入门很简单：如何在 Go 中使用日志包</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h3> 重要概念</h3>
<p><a href="https://juejin.cn/post/6950954283068031012" target="_blank" rel="noopener noreferrer"># Go开发web必懂的概念和底层原理，通过对比的方式让大家更好的理解 | Go主题月</a></p>
<h2> golang结丹之路</h2>
<h3> 协程</h3>
<p><a href="https://juejin.cn/post/6943952470993272845" target="_blank" rel="noopener noreferrer"># 什么时候用Goroutine？什么时候用Channel？</a></p>
<p><a href="https://juejin.cn/post/6950952506176471071" target="_blank" rel="noopener noreferrer"># Goroutine就是协程：进程 线程 协程 各自的概念以及三者的对比分析</a></p>
<h3> RPC</h3>
<p><a href="https://juejin.cn/post/6946452659159171102" target="_blank" rel="noopener noreferrer"># Go RPC入门指南1：RPC的使用边界在哪里？如何实现跨语言调用？</a></p>
<h3> 反射</h3>
<p><a href="https://juejin.cn/post/6844903559335526407" target="_blank" rel="noopener noreferrer"># Golang的反射reflect深入理解和示例</a> 作者：<a href="https://juejin.cn/user/1187128287436808" target="_blank" rel="noopener noreferrer">吴德宝AllenWu</a></p>
<p><a href="https://juejin.cn/post/7097534989029343246" target="_blank" rel="noopener noreferrer"># Go语言中的反射</a> 作者：<a href="https://juejin.cn/user/184373685261719" target="_blank" rel="noopener noreferrer">任沫</a></p>
<h3> interface</h3>
<p><a href="https://juejin.cn/post/6844903555141222407" target="_blank" rel="noopener noreferrer"># Golang interface接口深入理解</a> 作者：<a href="https://juejin.cn/user/1187128287436808" target="_blank" rel="noopener noreferrer">吴德宝AllenWu</a></p>
<h3> 错误处理</h3>
<p><a href="https://juejin.cn/post/7114970981872959525" target="_blank" rel="noopener noreferrer"># Go函数并发情况的错误处理</a> 作者：<a href="https://juejin.cn/user/1239904847411406" target="_blank" rel="noopener noreferrer">Masters</a></p>
<h3> 并发安全</h3>
<p><a href="https://juejin.cn/post/7068192854761275429" target="_blank" rel="noopener noreferrer"># Go源码解读-sync.Map的实现</a> 作者：<a href="https://juejin.cn/user/1239904847411406" target="_blank" rel="noopener noreferrer">Masters</a></p>
<h3> 部署</h3>
<p><a href="https://juejin.cn/post/6954309251892248612" target="_blank" rel="noopener noreferrer"># Go打包 部署 优雅的把Go项目部署到Linux服务器</a></p>
<h3> 规范&amp;技巧</h3>
<p><a href="https://juejin.cn/post/7082536852590166029" target="_blank" rel="noopener noreferrer"># Go语言中比较优雅的写法 | 硬核！</a></p>
<p><a href="https://juejin.cn/post/7086094606856618014" target="_blank" rel="noopener noreferrer"># 爆肝分享两千字Go编程规范</a></p>
<p><a href="https://juejin.cn/post/7102605823003590692" target="_blank" rel="noopener noreferrer"># Go开发技巧和踩坑分享 | 代码结构 调试技巧 配置文件 元数据</a></p>
<h3> Go对比PHP/JAVA/C</h3>
<p><a href="https://juejin.cn/post/7118866795418615822" target="_blank" rel="noopener noreferrer"># Java VS Go 还在纠结怎么选吗，(资深后端4000字带你深度对比)</a> 作者：<a href="https://juejin.cn/user/2472125987040093" target="_blank" rel="noopener noreferrer">TodoCoder</a></p>
<p><a href="https://juejin.cn/post/7105012753210802213" target="_blank" rel="noopener noreferrer"># 为什么我觉得GoFrame的garray比PHP的array还好用？</a></p>
<p><a href="https://juejin.cn/post/7105231214390280200" target="_blank" rel="noopener noreferrer"># GoFrame gset使用入门 | 对比PHP、Java、Redis</a></p>
<p><a href="https://juejin.cn/post/7077843585088897037" target="_blank" rel="noopener noreferrer"># 如何在 Go 代码中运行 C 语言代码</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h3> 好用的扩展包</h3>
<p><a href="https://juejin.cn/post/7119390985863299085" target="_blank" rel="noopener noreferrer"># GO语言框架中如何快速集成日志模块</a> 作者：<a href="https://juejin.cn/user/1239904847411406" target="_blank" rel="noopener noreferrer">Masters</a></p>
<p><a href="https://juejin.cn/post/7102001354654089223" target="_blank" rel="noopener noreferrer"># Go Web 编程入门：Go pongo2 模板引擎</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<p><a href="https://juejin.cn/post/7120256019225116679" target="_blank" rel="noopener noreferrer"># 使用 Gorilla Mux 和 CockroachDB 编写可维护 RESTful API</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h3> 设计模式</h3>
<p><a href="https://juejin.cn/post/7124720007447052302" target="_blank" rel="noopener noreferrer"># golang 设计模式-单例模式</a> 作者：<a href="https://juejin.cn/user/2344623087289965" target="_blank" rel="noopener noreferrer"># 二牛QAQ</a></p>
<h3> 框架篇</h3>
<h4> 学哪个框架？</h4>
<p><a href="https://juejin.cn/post/7067347764899741709" target="_blank" rel="noopener noreferrer"># Go主流框架对比：Gin Echo Beego Iris</a></p>
<p><a href="https://juejin.cn/post/7075098594151235597" target="_blank" rel="noopener noreferrer"># 非常适合PHP/JAVA同学使用的GO框架：GoFrame</a></p>
<p><a href="https://juejin.cn/post/7119348879820554247" target="_blank" rel="noopener noreferrer"># 12个值得一看的Go开源项目/框架</a> 作者：<a href="https://juejin.cn/user/3008695929418318" target="_blank" rel="noopener noreferrer">ReganYue</a></p>
<h4> Gin框架&amp;中间件</h4>
<p><a href="https://juejin.cn/post/6943147832937447431" target="_blank" rel="noopener noreferrer"># Go gin框架封装中间件之1：用户角色权限管理中间件</a></p>
<p><a href="https://juejin.cn/post/6943503384729583652" target="_blank" rel="noopener noreferrer"># Go gin框架封装中间件之2：操作日志中间件</a></p>
<h4> GORM</h4>
<p><a href="https://juejin.cn/post/6945404499850854408" target="_blank" rel="noopener noreferrer"># Go GORM是时候升级新版本了 2.0新特性介绍（1）</a></p>
<p><a href="https://juejin.cn/post/6946012224573931528" target="_blank" rel="noopener noreferrer"># Go GORM是时候升级新版本了 2.0新特性介绍（2）| Go主题月</a></p>
<h4> Echo</h4>
<p><a href="https://juejin.cn/post/7068555737756073997" target="_blank" rel="noopener noreferrer"># 回声嘹亮 之 Go 的 Echo 框架指南 —— 上手初体验</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h4> Beego</h4>
<p><a href="https://juejin.cn/post/7121536082151211022" target="_blank" rel="noopener noreferrer"># go-web框架-beego的使用</a> 作者：<a href="https://juejin.cn/user/3421335915080093" target="_blank" rel="noopener noreferrer"># jy白了个白</a></p>
<h4> GoFrame</h4>
<h3> 数据结构</h3>
<p><a href="https://juejin.cn/post/7105012753210802213" target="_blank" rel="noopener noreferrer"># 为什么我觉得GoFrame的garray比PHP的array还好用？</a></p>
<p><a href="https://juejin.cn/post/7090901734247104548" target="_blank" rel="noopener noreferrer"># GoFrame garray使用实践</a></p>
<p><a href="https://juejin.cn/post/7105231214390280200" target="_blank" rel="noopener noreferrer"># GoFrame gset使用入门 | 对比PHP、Java、Redis</a></p>
<p><a href="https://juejin.cn/post/7105572330612457486" target="_blank" rel="noopener noreferrer"># GoFrame gset使用实践 | 交差并补集</a></p>
<p><a href="https://juejin.cn/post/7106013158279479327" target="_blank" rel="noopener noreferrer"># GoFrame gset使用技巧总结 | 出栈、子集判断、序列化、遍历修改</a></p>
<p><a href="https://juejin.cn/post/7101515355062796296" target="_blank" rel="noopener noreferrer"># GoFrame glist 基础使用和自定义遍历</a></p>
<p><a href="https://juejin.cn/post/7101797623484383246" target="_blank" rel="noopener noreferrer"># GoFrame gmap详解 hashmap、listmap、treemap使用技巧</a></p>
<p><a href="https://juejin.cn/post/7106458930057855013" target="_blank" rel="noopener noreferrer"># GoFrame gtree 使用入门 | 养成读源码的好习惯</a></p>
<h3> 类型转换</h3>
<p><a href="https://juejin.cn/post/7081078067682082823" target="_blank" rel="noopener noreferrer"># GoFrame代码优化：使用gconv类型转换 避免重复定义map</a></p>
<h3> 通用变量</h3>
<p><a href="https://juejin.cn/post/7106712908326764552" target="_blank" rel="noopener noreferrer"># GoFrame 通用类型变量gvar | 对比 interface{}</a></p>
<h3> 数据校验</h3>
<p><a href="https://juejin.cn/post/7110222819631464485" target="_blank" rel="noopener noreferrer"># GoFrame数据校验之校验对象 | 校验结构体</a></p>
<p><a href="https://juejin.cn/post/7110952333193773064" target="_blank" rel="noopener noreferrer"># GoFrame数据校验之校验结果 | Error接口对象</a></p>
<p><a href="https://juejin.cn/post/7113360526410776583" target="_blank" rel="noopener noreferrer"># GoFrame如何实现顺序性校验</a></p>
<h3> 错误处理</h3>
<p><a href="https://juejin.cn/post/7112428421392629773" target="_blank" rel="noopener noreferrer"># GoFrame错误处理的常用方法&amp;错误码的使用</a></p>
<h3> 上下文</h3>
<p><a href="https://juejin.cn/post/7113118741776793636" target="_blank" rel="noopener noreferrer"># GoFrame 如何优雅的共享变量 | Context的使用</a></p>
<p><a href="https://juejin.cn/post/7123200814402764831" target="_blank" rel="noopener noreferrer"># Go 并发编程基础：什么是上下文</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h3> ORM</h3>
<p><a href="https://juejin.cn/post/7082278651681013773" target="_blank" rel="noopener noreferrer"># GoFrame ORM 使用实践分享</a></p>
<p><a href="https://juejin.cn/post/7089980894525521957" target="_blank" rel="noopener noreferrer"># GoFrame ORM原生方法 开箱体验 （上）</a></p>
<p><a href="https://juejin.cn/post/7090358951501365278" target="_blank" rel="noopener noreferrer"># GoFrame ORM原生方法 开箱体验 （下）</a></p>
<p><a href="https://juejin.cn/post/7084569454956249101" target="_blank" rel="noopener noreferrer"># GoFrame必知必会之Scan：类型转换</a></p>
<h3> 缓存管理</h3>
<p><a href="https://juejin.cn/post/7109465768445607967" target="_blank" rel="noopener noreferrer"># GoFrame 如何优雅的缓存查询结果</a></p>
<p><a href="https://juejin.cn/post/7107986667293638663" target="_blank" rel="noopener noreferrer"># GoFrame gcache使用实践 | 缓存控制 淘汰策略</a></p>
<p><a href="https://juejin.cn/post/7108272085452980261" target="_blank" rel="noopener noreferrer"># GoFrame gredis 配置管理 | 配置文件、配置方法的对比</a></p>
<p><a href="https://juejin.cn/post/7108698563328081928" target="_blank" rel="noopener noreferrer"># GoFrame gredis 硬核解析 | DoVar、Conn连接对象、自动序列化</a></p>
<p><a href="https://juejin.cn/post/7109092852101021704" target="_blank" rel="noopener noreferrer"># GoFrame gredis 如何优雅的取值和类型转换</a></p>
<h3> 协程管理</h3>
<p><a href="https://juejin.cn/post/7102979667925139463" target="_blank" rel="noopener noreferrer"># GoFrame gpool 对象复用池 | 对比sync.pool</a></p>
<p><a href="https://juejin.cn/post/7103502362429358116" target="_blank" rel="noopener noreferrer"># goFrame的gqueue详解 | 对比channel</a></p>
<p><a href="https://juejin.cn/post/7104661248213516319" target="_blank" rel="noopener noreferrer"># grpool goroutine池详解 | 协程管理</a></p>
<h3> 避坑指南</h3>
<p><a href="https://juejin.cn/post/7081959981456556068" target="_blank" rel="noopener noreferrer"># GoFrame避坑指南和实践干货</a></p>
<p><a href="https://juejin.cn/post/7085730973836378126" target="_blank" rel="noopener noreferrer"># GoFrame避坑指南和实践干货（2）</a></p>
<h3> 性能测试</h3>
<p><a href="https://juejin.cn/post/7110510747498594341" target="_blank" rel="noopener noreferrer"># GoFrame grpool性能测试 | 对比原生goroutine</a></p>
<h3> 调试&amp;单元测试</h3>
<p><a href="https://juejin.cn/post/7111325551549218823" target="_blank" rel="noopener noreferrer"># Go本地测试 如何解耦 任务拆解&amp;沟通</a></p>
<p><a href="https://juejin.cn/post/7115009937847091214" target="_blank" rel="noopener noreferrer"># Go Web 编程入门： 一探优秀测试库 GoConvey</a> 作者：<a href="https://juejin.cn/user/3526889034751639" target="_blank" rel="noopener noreferrer"># 宇宙之一粟</a></p>
<h1> 应用实践</h1>
<p><a href="https://juejin.cn/post/7099449898529095717" target="_blank" rel="noopener noreferrer"># gtoken替换jwt实现sso登录 | 带你读源码</a></p>
<p><a href="https://juejin.cn/post/7102389025050361864" target="_blank" rel="noopener noreferrer"># gtoken替换jwt实现sso登录 | 排雷避坑</a></p>
<p><a href="https://juejin.cn/post/7083479769878102030" target="_blank" rel="noopener noreferrer"># Go对接三方API实践</a></p>
<p><a href="https://juejin.cn/post/7084235852921962503" target="_blank" rel="noopener noreferrer"># Go一分钟对接ElasticSearch实践</a></p>
<p><a href="https://juejin.cn/post/7068192828790145060" target="_blank" rel="noopener noreferrer"># 瞄一眼clickhouse(附 go demo)</a> 作者：<a href="https://juejin.cn/user/1239904847411406" target="_blank" rel="noopener noreferrer">Masters</a></p>
<h1> Git</h1>
<p><a href="https://juejin.cn/post/7018771333173477383" target="_blank" rel="noopener noreferrer"># Git使用实战：多人协同开发，紧急修复线上bug的Git操作指南。</a></p>
<p><a href="https://juejin.cn/post/7104258964732575775" target="_blank" rel="noopener noreferrer"># Git 重命名远程分支 | 操作不规范，亲人两行泪。</a></p>
<h1> 刷题</h1>
<p>如果你是学生党，没有机会接触商业项目，不用难过。刷力扣是个非常好的选择！</p>
<p><a href="https://juejin.cn/column/7070334316957401125" target="_blank" rel="noopener noreferrer">用Go语言刷力扣专栏</a></p>
<p>为了方便大家刷Go语言的知识点，特意整理了面试题相关的文章：</p>
<p><a href="https://juejin.cn/post/7131717990558466062" target="_blank" rel="noopener noreferrer"># 【狂刷面试题】GO常见面试题汇总</a></p>
<h1> 一起学习</h1>
<p><strong>这是收藏破万的：</strong><a href="https://juejin.cn/post/7119123646471208968" target="_blank" rel="noopener noreferrer"># 《Go学习路线图》让你少走弯路，升职加薪。</a></p>
<h2> 资料</h2>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/BV1gf4y1r79E/?spm_id_from=333.999.0.0&amp;vd_source=f6ed028b29a932df5d0a09a54802e1b5" target="_blank" rel="noopener noreferrer"># 刘丹冰老师教学视频:8小时转职Golang工程师</a></p>
</li>
<li>
<p><a href="https://www.liwenzhou.com/posts/Go/golang-menu/" target="_blank" rel="noopener noreferrer"># 李文周老师博客</a></p>
</li>
<li>
<p><a href="https://juejin.cn/column/7140137480749547528" target="_blank" rel="noopener noreferrer"># 王中阳签约专栏：Go语言进阶实战</a></p>
</li>
<li>
<p><a href="https://space.bilibili.com/20942052?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer"># 楚国刮大风：go手写redis</a></p>
</li>
<li>
<p><a href="https://space.bilibili.com/317473362?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer"># 小徐先生1212：Golang专栏</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>python学习路线</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">python学习路线</source>
      <pubDate>Mon, 21 Aug 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>程序员面试刷题路线</title>
      <link>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF.html</link>
      <guid>https://vuepress-theme-hope-docs-demo.netlify.app/blog/20230821_%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98%E8%B7%AF%E7%BA%BF.html</guid>
      <source url="https://vuepress-theme-hope-docs-demo.netlify.app/rss.xml">程序员面试刷题路线</source>
      <description>大家好，我是海鸽 金九银十马上到了，海鸽在此整理下面试刷题准备路线供你参考，希望对你有所帮助~ 程序员面试的刷题路线可以根据你的目标岗位和面试准备时间的长短来进行调整。 MySQL刷题 连环炮 1. 为什么索引能提高查询速度? 2. 聚集索引和非聚集索引的区别？非聚集索引一定回表查询吗? 3. 索引这么多优点，为什么不对表中的每一个列创建一个索引呢？(...</description>
      <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>大家好，我是<code>海鸽</code></p>
<p>金九银十马上到了，海鸽在此整理下面试刷题准备路线供你参考，希望对你有所帮助~</p>
<p>程序员面试的刷题路线可以根据你的目标岗位和面试准备时间的长短来进行调整。</p>
<h2> MySQL刷题</h2>
<h3> 连环炮</h3>
<ol>
<li>为什么索引能提高查询速度?</li>
<li>聚集索引和非聚集索引的区别？非聚集索引一定回表查询吗?</li>
<li>索引这么多优点，为什么不对表中的每一个列创建一个索引呢？(使用索引一定能提高查询性能吗?)</li>
<li>索引底层的数据结构了解么？Hash 索引和 B+树索引优劣分析</li>
<li>B+树做索引比红黑树好在哪里？</li>
<li>最左前缀匹配原则了解么？</li>
<li>什么是覆盖索引</li>
<li>如何查看某条SQL语句是否用到了索引？</li>
<li>索引为什么用B+树而不用B树？</li>
<li>说一说项目中MySQL分库分表怎么做的？</li>
<li>说一说垂直分表和水平分表？</li>
</ol>
<h3> 参考</h3>
<ul>
<li>这里推荐田螺哥开源的一个刷题仓库，这里不仅可以刷MySQL常见面试题，还囊括了JAVA开发的各种技能的面试准备，仓库的地址是：</li>
</ul>
<blockquote>
<p><a href="https://github.com/whx123/JavaHome/tree/master" target="_blank" rel="noopener noreferrer">https://github.com/whx123/JavaHome/tree/master</a></p>
</blockquote>
<ul>
<li>
<p><a href="https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html" target="_blank" rel="noopener noreferrer">MySQL高性能优化规范建议总结</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/K3fJU73--kMsOP1UpxKFsQ" target="_blank" rel="noopener noreferrer">面对这些MySQL线上事故，你会怎么做性能优化？</a></p>
</li>
<li>
<p><a href="https://www.yuque.com/snailclimb/mf2z3k/abc2sv" target="_blank" rel="noopener noreferrer">高性能：有哪些常见的 SQL 优化手段？</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247499624&amp;idx=1&amp;sn=561b9cb7fe831ca7cb2d9fd65691e85e&amp;chksm=cf222041f855a957ac50c0a53baaec6d26be32427259b2974450620f33a8c834419fe535e83d&amp;token=767319274&amp;lang=zh_CN&amp;scene=21#wechat_redirect:~:text=%E7%9B%98%E7%82%B9MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9A%8412%E4%B8%AA%E5%8E%9F%E5%9B%A0,-%E5%8E%9F%E5%88%9B" target="_blank" rel="noopener noreferrer">盘点MySQL慢查询的12个原因</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247504369&amp;idx=1&amp;sn=8628a5aaec0dc8f85d06080e11072ce2&amp;chksm=cf220ed8f85587ce7f7dfebdaf160b7b54bdca6a773411e59f8df5f50604760a5c121c088bb5&amp;token=1211708820&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">SQL优化13连问，收藏好！</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247490571&amp;idx=1&amp;sn=e8638573ec8d720fd25da5b2b0d90ed2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">看一遍就理解：order by详解</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247487972&amp;idx=1&amp;sn=cd035a7fcd7496658846ab9f914be2db&amp;chksm=cf21cecdf85647dbc53e212bf1a2b95d0eb2bffe08dc0141e01f8a9b2088abffc385a2ef584e&amp;token=1569911403&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">后端程序员必备：书写高质量SQL的30条建议</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru/?p=69&amp;share_source=copy_web&amp;vd_source=8945d0055d36f5037ca23022a4925f2a&amp;t=4" target="_blank" rel="noopener noreferrer">黑马mysql</a></p>
</li>
</ul>
<h2> Redis刷题</h2>
<h3> 连环炮</h3>
<ol>
<li>说一说Redis的缓存雪崩、缓存穿透、缓存击穿，以及对应的解决方案？</li>
<li>说一说你们项目中Redis的缓存不一致，怎么解决的？</li>
<li>Redis中如何实现分布式锁的？</li>
<li>我看你写到的Redis多级缓存架构，你们是怎么做的？</li>
</ol>
<h3> 参考</h3>
<p><a href="https://www.sharkchili.com/pages/5d69b6/" target="_blank" rel="noopener noreferrer">Redis持久化AOF详解</a></p>
<h2> 算法刷题</h2>
<blockquote>
<p><code>LeetCode</code>：<a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/</a><br>
<code>恋上数据结构与算法</code><br>
<code>代码随想录</code></p>
</blockquote>
]]></content:encoded>
    </item>
  </channel>
</rss>